//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit;
use crate::CoreData;
use crate::Foundation;

typed_enum!(
    pub type NSTextCheckingOptionKey = Foundation::NSString;
);

extern_static!(NSTextCheckingOrthographyKey: &'static AppKit::NSTextCheckingOptionKey);

extern_static!(NSTextCheckingQuotesKey: &'static AppKit::NSTextCheckingOptionKey);

extern_static!(NSTextCheckingReplacementsKey: &'static AppKit::NSTextCheckingOptionKey);

extern_static!(NSTextCheckingReferenceDateKey: &'static AppKit::NSTextCheckingOptionKey);

extern_static!(NSTextCheckingReferenceTimeZoneKey: &'static AppKit::NSTextCheckingOptionKey);

extern_static!(NSTextCheckingDocumentURLKey: &'static AppKit::NSTextCheckingOptionKey);

extern_static!(NSTextCheckingDocumentTitleKey: &'static AppKit::NSTextCheckingOptionKey);

extern_static!(NSTextCheckingDocumentAuthorKey: &'static AppKit::NSTextCheckingOptionKey);

extern_static!(NSTextCheckingRegularExpressionsKey: &'static AppKit::NSTextCheckingOptionKey);

extern_static!(NSTextCheckingSelectedRangeKey: &'static AppKit::NSTextCheckingOptionKey);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSCorrectionResponse {
        NSCorrectionResponseNone = 0,
        NSCorrectionResponseAccepted = 1,
        NSCorrectionResponseRejected = 2,
        NSCorrectionResponseIgnored = 3,
        NSCorrectionResponseEdited = 4,
        NSCorrectionResponseReverted = 5,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSCorrectionIndicatorType {
        NSCorrectionIndicatorTypeDefault = 0,
        NSCorrectionIndicatorTypeReversion = 1,
        NSCorrectionIndicatorTypeGuesses = 2,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSSpellChecker;

    unsafe impl ClassType for NSSpellChecker {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSSpellChecker")]
    unsafe impl NSSpellChecker {
        #[method_id(@__retain_semantics Other sharedSpellChecker)]
        pub unsafe fn sharedSpellChecker() -> Id<AppKit::NSSpellChecker, Shared>;

        #[method(sharedSpellCheckerExists)]
        pub unsafe fn sharedSpellCheckerExists() -> bool;

        #[method(uniqueSpellDocumentTag)]
        pub unsafe fn uniqueSpellDocumentTag() -> NSInteger;

        #[cfg(feature = "Foundation_NSString")]
        #[method(checkSpellingOfString:startingAt:language:wrap:inSpellDocumentWithTag:wordCount:)]
        pub unsafe fn checkSpellingOfString_startingAt_language_wrap_inSpellDocumentWithTag_wordCount(
            &self,
            stringToCheck: &Foundation::NSString,
            startingOffset: NSInteger,
            language: Option<&Foundation::NSString>,
            wrapFlag: bool,
            tag: NSInteger,
            wordCount: *mut NSInteger,
        ) -> NSRange;

        #[cfg(feature = "Foundation_NSString")]
        #[method(checkSpellingOfString:startingAt:)]
        pub unsafe fn checkSpellingOfString_startingAt(
            &self,
            stringToCheck: &Foundation::NSString,
            startingOffset: NSInteger,
        ) -> NSRange;

        #[cfg(feature = "Foundation_NSString")]
        #[method(countWordsInString:language:)]
        pub unsafe fn countWordsInString_language(
            &self,
            stringToCount: &Foundation::NSString,
            language: Option<&Foundation::NSString>,
        ) -> NSInteger;

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[method(checkGrammarOfString:startingAt:language:wrap:inSpellDocumentWithTag:details:)]
        pub unsafe fn checkGrammarOfString_startingAt_language_wrap_inSpellDocumentWithTag_details(
            &self,
            stringToCheck: &Foundation::NSString,
            startingOffset: NSInteger,
            language: Option<&Foundation::NSString>,
            wrapFlag: bool,
            tag: NSInteger,
            details: *mut *mut Foundation::NSArray<
                Foundation::NSDictionary<Foundation::NSString, Object>,
            >,
        ) -> NSRange;

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSOrthography",
            feature = "Foundation_NSString",
            feature = "Foundation_NSTextCheckingResult"
        ))]
        #[method_id(@__retain_semantics Other checkString:range:types:options:inSpellDocumentWithTag:orthography:wordCount:)]
        pub unsafe fn checkString_range_types_options_inSpellDocumentWithTag_orthography_wordCount(
            &self,
            stringToCheck: &Foundation::NSString,
            range: NSRange,
            checkingTypes: NSTextCheckingTypes,
            options: Option<&Foundation::NSDictionary<AppKit::NSTextCheckingOptionKey, Object>>,
            tag: NSInteger,
            orthography: *mut *mut Foundation::NSOrthography,
            wordCount: *mut NSInteger,
        ) -> Id<Foundation::NSArray<Foundation::NSTextCheckingResult>, Shared>;

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSOrthography",
            feature = "Foundation_NSString",
            feature = "Foundation_NSTextCheckingResult"
        ))]
        #[method(requestCheckingOfString:range:types:options:inSpellDocumentWithTag:completionHandler:)]
        pub unsafe fn requestCheckingOfString_range_types_options_inSpellDocumentWithTag_completionHandler(
            &self,
            stringToCheck: &Foundation::NSString,
            range: NSRange,
            checkingTypes: NSTextCheckingTypes,
            options: Option<&Foundation::NSDictionary<AppKit::NSTextCheckingOptionKey, Object>>,
            tag: NSInteger,
            completionHandler: Option<
                &Block<
                    (
                        NSInteger,
                        NonNull<Foundation::NSArray<Foundation::NSTextCheckingResult>>,
                        NonNull<Foundation::NSOrthography>,
                        NSInteger,
                    ),
                    (),
                >,
            >,
        ) -> NSInteger;

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString",
            feature = "Foundation_NSTextCheckingResult"
        ))]
        #[method(requestCandidatesForSelectedRange:inString:types:options:inSpellDocumentWithTag:completionHandler:)]
        pub unsafe fn requestCandidatesForSelectedRange_inString_types_options_inSpellDocumentWithTag_completionHandler(
            &self,
            selectedRange: NSRange,
            stringToCheck: &Foundation::NSString,
            checkingTypes: NSTextCheckingTypes,
            options: Option<&Foundation::NSDictionary<AppKit::NSTextCheckingOptionKey, Object>>,
            tag: NSInteger,
            completionHandler: Option<
                &Block<
                    (
                        NSInteger,
                        NonNull<Foundation::NSArray<Foundation::NSTextCheckingResult>>,
                    ),
                    (),
                >,
            >,
        ) -> NSInteger;

        #[cfg(all(
            feature = "AppKit_NSMenu",
            feature = "AppKit_NSView",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString",
            feature = "Foundation_NSTextCheckingResult"
        ))]
        #[method_id(@__retain_semantics Other menuForResult:string:options:atLocation:inView:)]
        pub unsafe fn menuForResult_string_options_atLocation_inView(
            &self,
            result: &Foundation::NSTextCheckingResult,
            checkedString: &Foundation::NSString,
            options: Option<&Foundation::NSDictionary<AppKit::NSTextCheckingOptionKey, Object>>,
            location: NSPoint,
            view: &AppKit::NSView,
        ) -> Option<Id<AppKit::NSMenu, Shared>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other userQuotesArrayForLanguage:)]
        pub unsafe fn userQuotesArrayForLanguage(
            &self,
            language: &Foundation::NSString,
        ) -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other userReplacementsDictionary)]
        pub unsafe fn userReplacementsDictionary(
            &self,
        ) -> Id<Foundation::NSDictionary<Foundation::NSString, Foundation::NSString>, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(updateSpellingPanelWithMisspelledWord:)]
        pub unsafe fn updateSpellingPanelWithMisspelledWord(&self, word: &Foundation::NSString);

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method(updateSpellingPanelWithGrammarString:detail:)]
        pub unsafe fn updateSpellingPanelWithGrammarString_detail(
            &self,
            string: &Foundation::NSString,
            detail: &Foundation::NSDictionary<Foundation::NSString, Object>,
        );

        #[cfg(feature = "AppKit_NSPanel")]
        #[method_id(@__retain_semantics Other spellingPanel)]
        pub unsafe fn spellingPanel(&self) -> Id<AppKit::NSPanel, Shared>;

        #[cfg(feature = "AppKit_NSView")]
        #[method_id(@__retain_semantics Other accessoryView)]
        pub unsafe fn accessoryView(&self) -> Option<Id<AppKit::NSView, Shared>>;

        #[cfg(feature = "AppKit_NSView")]
        #[method(setAccessoryView:)]
        pub unsafe fn setAccessoryView(&self, accessoryView: Option<&AppKit::NSView>);

        #[cfg(feature = "AppKit_NSPanel")]
        #[method_id(@__retain_semantics Other substitutionsPanel)]
        pub unsafe fn substitutionsPanel(&self) -> Id<AppKit::NSPanel, Shared>;

        #[cfg(feature = "AppKit_NSViewController")]
        #[method_id(@__retain_semantics Other substitutionsPanelAccessoryViewController)]
        pub unsafe fn substitutionsPanelAccessoryViewController(
            &self,
        ) -> Option<Id<AppKit::NSViewController, Shared>>;

        #[cfg(feature = "AppKit_NSViewController")]
        #[method(setSubstitutionsPanelAccessoryViewController:)]
        pub unsafe fn setSubstitutionsPanelAccessoryViewController(
            &self,
            substitutionsPanelAccessoryViewController: Option<&AppKit::NSViewController>,
        );

        #[method(updatePanels)]
        pub unsafe fn updatePanels(&self);

        #[cfg(feature = "Foundation_NSString")]
        #[method(ignoreWord:inSpellDocumentWithTag:)]
        pub unsafe fn ignoreWord_inSpellDocumentWithTag(
            &self,
            wordToIgnore: &Foundation::NSString,
            tag: NSInteger,
        );

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other ignoredWordsInSpellDocumentWithTag:)]
        pub unsafe fn ignoredWordsInSpellDocumentWithTag(
            &self,
            tag: NSInteger,
        ) -> Option<Id<Foundation::NSArray<Foundation::NSString>, Shared>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method(setIgnoredWords:inSpellDocumentWithTag:)]
        pub unsafe fn setIgnoredWords_inSpellDocumentWithTag(
            &self,
            words: &Foundation::NSArray<Foundation::NSString>,
            tag: NSInteger,
        );

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other guessesForWordRange:inString:language:inSpellDocumentWithTag:)]
        pub unsafe fn guessesForWordRange_inString_language_inSpellDocumentWithTag(
            &self,
            range: NSRange,
            string: &Foundation::NSString,
            language: Option<&Foundation::NSString>,
            tag: NSInteger,
        ) -> Option<Id<Foundation::NSArray<Foundation::NSString>, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other correctionForWordRange:inString:language:inSpellDocumentWithTag:)]
        pub unsafe fn correctionForWordRange_inString_language_inSpellDocumentWithTag(
            &self,
            range: NSRange,
            string: &Foundation::NSString,
            language: &Foundation::NSString,
            tag: NSInteger,
        ) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other completionsForPartialWordRange:inString:language:inSpellDocumentWithTag:)]
        pub unsafe fn completionsForPartialWordRange_inString_language_inSpellDocumentWithTag(
            &self,
            range: NSRange,
            string: &Foundation::NSString,
            language: Option<&Foundation::NSString>,
            tag: NSInteger,
        ) -> Option<Id<Foundation::NSArray<Foundation::NSString>, Shared>>;

        #[cfg(all(feature = "Foundation_NSOrthography", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other languageForWordRange:inString:orthography:)]
        pub unsafe fn languageForWordRange_inString_orthography(
            &self,
            range: NSRange,
            string: &Foundation::NSString,
            orthography: Option<&Foundation::NSOrthography>,
        ) -> Option<Id<Foundation::NSString, Shared>>;

        #[method(closeSpellDocumentWithTag:)]
        pub unsafe fn closeSpellDocumentWithTag(&self, tag: NSInteger);

        #[cfg(feature = "Foundation_NSString")]
        #[method(recordResponse:toCorrection:forWord:language:inSpellDocumentWithTag:)]
        pub unsafe fn recordResponse_toCorrection_forWord_language_inSpellDocumentWithTag(
            &self,
            response: NSCorrectionResponse,
            correction: &Foundation::NSString,
            word: &Foundation::NSString,
            language: Option<&Foundation::NSString>,
            tag: NSInteger,
        );

        #[cfg(all(
            feature = "AppKit_NSView",
            feature = "Foundation_NSArray",
            feature = "Foundation_NSString"
        ))]
        #[method(showCorrectionIndicatorOfType:primaryString:alternativeStrings:forStringInRect:view:completionHandler:)]
        pub unsafe fn showCorrectionIndicatorOfType_primaryString_alternativeStrings_forStringInRect_view_completionHandler(
            &self,
            type_: NSCorrectionIndicatorType,
            primaryString: &Foundation::NSString,
            alternativeStrings: &Foundation::NSArray<Foundation::NSString>,
            rectOfTypedString: NSRect,
            view: &AppKit::NSView,
            completionBlock: Option<&Block<(*mut Foundation::NSString,), ()>>,
        );

        #[cfg(feature = "AppKit_NSView")]
        #[method(dismissCorrectionIndicatorForView:)]
        pub unsafe fn dismissCorrectionIndicatorForView(&self, view: &AppKit::NSView);

        #[cfg(feature = "Foundation_NSString")]
        #[method(preventsAutocorrectionBeforeString:language:)]
        pub unsafe fn preventsAutocorrectionBeforeString_language(
            &self,
            string: &Foundation::NSString,
            language: Option<&Foundation::NSString>,
        ) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method(deletesAutospaceBetweenString:andString:language:)]
        pub unsafe fn deletesAutospaceBetweenString_andString_language(
            &self,
            precedingString: &Foundation::NSString,
            followingString: &Foundation::NSString,
            language: Option<&Foundation::NSString>,
        ) -> bool;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other availableLanguages)]
        pub unsafe fn availableLanguages(
            &self,
        ) -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other userPreferredLanguages)]
        pub unsafe fn userPreferredLanguages(
            &self,
        ) -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[method(automaticallyIdentifiesLanguages)]
        pub unsafe fn automaticallyIdentifiesLanguages(&self) -> bool;

        #[method(setAutomaticallyIdentifiesLanguages:)]
        pub unsafe fn setAutomaticallyIdentifiesLanguages(
            &self,
            automaticallyIdentifiesLanguages: bool,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[method(setWordFieldStringValue:)]
        pub unsafe fn setWordFieldStringValue(&self, string: &Foundation::NSString);

        #[cfg(feature = "Foundation_NSString")]
        #[method(learnWord:)]
        pub unsafe fn learnWord(&self, word: &Foundation::NSString);

        #[cfg(feature = "Foundation_NSString")]
        #[method(hasLearnedWord:)]
        pub unsafe fn hasLearnedWord(&self, word: &Foundation::NSString) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method(unlearnWord:)]
        pub unsafe fn unlearnWord(&self, word: &Foundation::NSString);

        #[method(isAutomaticTextReplacementEnabled)]
        pub unsafe fn isAutomaticTextReplacementEnabled() -> bool;

        #[method(isAutomaticSpellingCorrectionEnabled)]
        pub unsafe fn isAutomaticSpellingCorrectionEnabled() -> bool;

        #[method(isAutomaticQuoteSubstitutionEnabled)]
        pub unsafe fn isAutomaticQuoteSubstitutionEnabled() -> bool;

        #[method(isAutomaticDashSubstitutionEnabled)]
        pub unsafe fn isAutomaticDashSubstitutionEnabled() -> bool;

        #[method(isAutomaticCapitalizationEnabled)]
        pub unsafe fn isAutomaticCapitalizationEnabled() -> bool;

        #[method(isAutomaticPeriodSubstitutionEnabled)]
        pub unsafe fn isAutomaticPeriodSubstitutionEnabled() -> bool;

        #[method(isAutomaticTextCompletionEnabled)]
        pub unsafe fn isAutomaticTextCompletionEnabled() -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other language)]
        pub unsafe fn language(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setLanguage:)]
        pub unsafe fn setLanguage(&self, language: &Foundation::NSString) -> bool;
    }
);

extern_static!(
    NSSpellCheckerDidChangeAutomaticSpellingCorrectionNotification:
        &'static Foundation::NSNotificationName
);

extern_static!(
    NSSpellCheckerDidChangeAutomaticTextReplacementNotification:
        &'static Foundation::NSNotificationName
);

extern_static!(
    NSSpellCheckerDidChangeAutomaticQuoteSubstitutionNotification:
        &'static Foundation::NSNotificationName
);

extern_static!(
    NSSpellCheckerDidChangeAutomaticDashSubstitutionNotification:
        &'static Foundation::NSNotificationName
);

extern_static!(
    NSSpellCheckerDidChangeAutomaticCapitalizationNotification:
        &'static Foundation::NSNotificationName
);

extern_static!(
    NSSpellCheckerDidChangeAutomaticPeriodSubstitutionNotification:
        &'static Foundation::NSNotificationName
);

extern_static!(
    NSSpellCheckerDidChangeAutomaticTextCompletionNotification:
        &'static Foundation::NSNotificationName
);

extern_methods!(
    /// NSDeprecated
    #[cfg(feature = "AppKit_NSSpellChecker")]
    unsafe impl NSSpellChecker {
        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other guessesForWord:)]
        pub unsafe fn guessesForWord(
            &self,
            word: Option<&Foundation::NSString>,
        ) -> Option<Id<Foundation::NSArray, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(forgetWord:)]
        pub unsafe fn forgetWord(&self, word: Option<&Foundation::NSString>);
    }
);
