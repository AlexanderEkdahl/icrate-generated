//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit;
use crate::CoreData;
use crate::Foundation;

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSLineCapStyle {
        NSLineCapStyleButt = 0,
        NSLineCapStyleRound = 1,
        NSLineCapStyleSquare = 2,
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSLineJoinStyle {
        NSLineJoinStyleMiter = 0,
        NSLineJoinStyleRound = 1,
        NSLineJoinStyleBevel = 2,
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSWindingRule {
        NSWindingRuleNonZero = 0,
        NSWindingRuleEvenOdd = 1,
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSBezierPathElement {
        NSBezierPathElementMoveTo = 0,
        NSBezierPathElementLineTo = 1,
        NSBezierPathElementCurveTo = 2,
        NSBezierPathElementClosePath = 3,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSBezierPath;

    unsafe impl ClassType for NSBezierPath {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSBezierPath")]
    unsafe impl NSBezierPath {
        #[method_id(@__retain_semantics Other bezierPath)]
        pub unsafe fn bezierPath() -> Id<AppKit::NSBezierPath, Shared>;

        #[method_id(@__retain_semantics Other bezierPathWithRect:)]
        pub unsafe fn bezierPathWithRect(
            rect: Foundation::NSRect,
        ) -> Id<AppKit::NSBezierPath, Shared>;

        #[method_id(@__retain_semantics Other bezierPathWithOvalInRect:)]
        pub unsafe fn bezierPathWithOvalInRect(
            rect: Foundation::NSRect,
        ) -> Id<AppKit::NSBezierPath, Shared>;

        #[method_id(@__retain_semantics Other bezierPathWithRoundedRect:xRadius:yRadius:)]
        pub unsafe fn bezierPathWithRoundedRect_xRadius_yRadius(
            rect: Foundation::NSRect,
            xRadius: CoreGraphics::CGFloat,
            yRadius: CoreGraphics::CGFloat,
        ) -> Id<AppKit::NSBezierPath, Shared>;

        #[method(fillRect:)]
        pub unsafe fn fillRect(rect: Foundation::NSRect);

        #[method(strokeRect:)]
        pub unsafe fn strokeRect(rect: Foundation::NSRect);

        #[method(clipRect:)]
        pub unsafe fn clipRect(rect: Foundation::NSRect);

        #[method(strokeLineFromPoint:toPoint:)]
        pub unsafe fn strokeLineFromPoint_toPoint(
            point1: Foundation::NSPoint,
            point2: Foundation::NSPoint,
        );

        #[method(drawPackedGlyphs:atPoint:)]
        pub unsafe fn drawPackedGlyphs_atPoint(
            packedGlyphs: NonNull<c_char>,
            point: Foundation::NSPoint,
        );

        #[method(defaultMiterLimit)]
        pub unsafe fn defaultMiterLimit() -> CoreGraphics::CGFloat;

        #[method(setDefaultMiterLimit:)]
        pub unsafe fn setDefaultMiterLimit(defaultMiterLimit: CoreGraphics::CGFloat);

        #[method(defaultFlatness)]
        pub unsafe fn defaultFlatness() -> CoreGraphics::CGFloat;

        #[method(setDefaultFlatness:)]
        pub unsafe fn setDefaultFlatness(defaultFlatness: CoreGraphics::CGFloat);

        #[method(defaultWindingRule)]
        pub unsafe fn defaultWindingRule() -> AppKit::NSWindingRule;

        #[method(setDefaultWindingRule:)]
        pub unsafe fn setDefaultWindingRule(defaultWindingRule: AppKit::NSWindingRule);

        #[method(defaultLineCapStyle)]
        pub unsafe fn defaultLineCapStyle() -> AppKit::NSLineCapStyle;

        #[method(setDefaultLineCapStyle:)]
        pub unsafe fn setDefaultLineCapStyle(defaultLineCapStyle: AppKit::NSLineCapStyle);

        #[method(defaultLineJoinStyle)]
        pub unsafe fn defaultLineJoinStyle() -> AppKit::NSLineJoinStyle;

        #[method(setDefaultLineJoinStyle:)]
        pub unsafe fn setDefaultLineJoinStyle(defaultLineJoinStyle: AppKit::NSLineJoinStyle);

        #[method(defaultLineWidth)]
        pub unsafe fn defaultLineWidth() -> CoreGraphics::CGFloat;

        #[method(setDefaultLineWidth:)]
        pub unsafe fn setDefaultLineWidth(defaultLineWidth: CoreGraphics::CGFloat);

        #[method(moveToPoint:)]
        pub unsafe fn moveToPoint(&self, point: Foundation::NSPoint);

        #[method(lineToPoint:)]
        pub unsafe fn lineToPoint(&self, point: Foundation::NSPoint);

        #[method(curveToPoint:controlPoint1:controlPoint2:)]
        pub unsafe fn curveToPoint_controlPoint1_controlPoint2(
            &self,
            endPoint: Foundation::NSPoint,
            controlPoint1: Foundation::NSPoint,
            controlPoint2: Foundation::NSPoint,
        );

        #[method(closePath)]
        pub unsafe fn closePath(&self);

        #[method(removeAllPoints)]
        pub unsafe fn removeAllPoints(&self);

        #[method(relativeMoveToPoint:)]
        pub unsafe fn relativeMoveToPoint(&self, point: Foundation::NSPoint);

        #[method(relativeLineToPoint:)]
        pub unsafe fn relativeLineToPoint(&self, point: Foundation::NSPoint);

        #[method(relativeCurveToPoint:controlPoint1:controlPoint2:)]
        pub unsafe fn relativeCurveToPoint_controlPoint1_controlPoint2(
            &self,
            endPoint: Foundation::NSPoint,
            controlPoint1: Foundation::NSPoint,
            controlPoint2: Foundation::NSPoint,
        );

        #[method(lineWidth)]
        pub unsafe fn lineWidth(&self) -> CoreGraphics::CGFloat;

        #[method(setLineWidth:)]
        pub unsafe fn setLineWidth(&self, lineWidth: CoreGraphics::CGFloat);

        #[method(lineCapStyle)]
        pub unsafe fn lineCapStyle(&self) -> AppKit::NSLineCapStyle;

        #[method(setLineCapStyle:)]
        pub unsafe fn setLineCapStyle(&self, lineCapStyle: AppKit::NSLineCapStyle);

        #[method(lineJoinStyle)]
        pub unsafe fn lineJoinStyle(&self) -> AppKit::NSLineJoinStyle;

        #[method(setLineJoinStyle:)]
        pub unsafe fn setLineJoinStyle(&self, lineJoinStyle: AppKit::NSLineJoinStyle);

        #[method(windingRule)]
        pub unsafe fn windingRule(&self) -> AppKit::NSWindingRule;

        #[method(setWindingRule:)]
        pub unsafe fn setWindingRule(&self, windingRule: AppKit::NSWindingRule);

        #[method(miterLimit)]
        pub unsafe fn miterLimit(&self) -> CoreGraphics::CGFloat;

        #[method(setMiterLimit:)]
        pub unsafe fn setMiterLimit(&self, miterLimit: CoreGraphics::CGFloat);

        #[method(flatness)]
        pub unsafe fn flatness(&self) -> CoreGraphics::CGFloat;

        #[method(setFlatness:)]
        pub unsafe fn setFlatness(&self, flatness: CoreGraphics::CGFloat);

        #[method(getLineDash:count:phase:)]
        pub unsafe fn getLineDash_count_phase(
            &self,
            pattern: *mut CoreGraphics::CGFloat,
            count: *mut NSInteger,
            phase: *mut CoreGraphics::CGFloat,
        );

        #[method(setLineDash:count:phase:)]
        pub unsafe fn setLineDash_count_phase(
            &self,
            pattern: *mut CoreGraphics::CGFloat,
            count: NSInteger,
            phase: CoreGraphics::CGFloat,
        );

        #[method(stroke)]
        pub unsafe fn stroke(&self);

        #[method(fill)]
        pub unsafe fn fill(&self);

        #[method(addClip)]
        pub unsafe fn addClip(&self);

        #[method(setClip)]
        pub unsafe fn setClip(&self);

        #[method_id(@__retain_semantics Other bezierPathByFlatteningPath)]
        pub unsafe fn bezierPathByFlatteningPath(&self) -> Id<AppKit::NSBezierPath, Shared>;

        #[method_id(@__retain_semantics Other bezierPathByReversingPath)]
        pub unsafe fn bezierPathByReversingPath(&self) -> Id<AppKit::NSBezierPath, Shared>;

        #[cfg(feature = "Foundation_NSAffineTransform")]
        #[method(transformUsingAffineTransform:)]
        pub unsafe fn transformUsingAffineTransform(
            &self,
            transform: &Foundation::NSAffineTransform,
        );

        #[method(isEmpty)]
        pub unsafe fn isEmpty(&self) -> bool;

        #[method(currentPoint)]
        pub unsafe fn currentPoint(&self) -> Foundation::NSPoint;

        #[method(controlPointBounds)]
        pub unsafe fn controlPointBounds(&self) -> Foundation::NSRect;

        #[method(bounds)]
        pub unsafe fn bounds(&self) -> Foundation::NSRect;

        #[method(elementCount)]
        pub unsafe fn elementCount(&self) -> NSInteger;

        #[method(elementAtIndex:associatedPoints:)]
        pub unsafe fn elementAtIndex_associatedPoints(
            &self,
            index: NSInteger,
            points: Foundation::NSPointArray,
        ) -> AppKit::NSBezierPathElement;

        #[method(elementAtIndex:)]
        pub unsafe fn elementAtIndex(&self, index: NSInteger) -> AppKit::NSBezierPathElement;

        #[method(setAssociatedPoints:atIndex:)]
        pub unsafe fn setAssociatedPoints_atIndex(
            &self,
            points: Foundation::NSPointArray,
            index: NSInteger,
        );

        #[method(appendBezierPath:)]
        pub unsafe fn appendBezierPath(&self, path: &AppKit::NSBezierPath);

        #[method(appendBezierPathWithRect:)]
        pub unsafe fn appendBezierPathWithRect(&self, rect: Foundation::NSRect);

        #[method(appendBezierPathWithPoints:count:)]
        pub unsafe fn appendBezierPathWithPoints_count(
            &self,
            points: Foundation::NSPointArray,
            count: NSInteger,
        );

        #[method(appendBezierPathWithOvalInRect:)]
        pub unsafe fn appendBezierPathWithOvalInRect(&self, rect: Foundation::NSRect);

        #[method(appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:clockwise:)]
        pub unsafe fn appendBezierPathWithArcWithCenter_radius_startAngle_endAngle_clockwise(
            &self,
            center: Foundation::NSPoint,
            radius: CoreGraphics::CGFloat,
            startAngle: CoreGraphics::CGFloat,
            endAngle: CoreGraphics::CGFloat,
            clockwise: bool,
        );

        #[method(appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:)]
        pub unsafe fn appendBezierPathWithArcWithCenter_radius_startAngle_endAngle(
            &self,
            center: Foundation::NSPoint,
            radius: CoreGraphics::CGFloat,
            startAngle: CoreGraphics::CGFloat,
            endAngle: CoreGraphics::CGFloat,
        );

        #[method(appendBezierPathWithArcFromPoint:toPoint:radius:)]
        pub unsafe fn appendBezierPathWithArcFromPoint_toPoint_radius(
            &self,
            point1: Foundation::NSPoint,
            point2: Foundation::NSPoint,
            radius: CoreGraphics::CGFloat,
        );

        #[method(appendBezierPathWithRoundedRect:xRadius:yRadius:)]
        pub unsafe fn appendBezierPathWithRoundedRect_xRadius_yRadius(
            &self,
            rect: Foundation::NSRect,
            xRadius: CoreGraphics::CGFloat,
            yRadius: CoreGraphics::CGFloat,
        );

        #[method(containsPoint:)]
        pub unsafe fn containsPoint(&self, point: Foundation::NSPoint) -> bool;
    }
);

extern_methods!(
    /// NSBezierPathDeprecated
    #[cfg(feature = "AppKit_NSBezierPath")]
    unsafe impl NSBezierPath {
        #[method(cachesBezierPath)]
        pub unsafe fn cachesBezierPath(&self) -> bool;

        #[method(setCachesBezierPath:)]
        pub unsafe fn setCachesBezierPath(&self, flag: bool);

        #[cfg(feature = "AppKit_NSFont")]
        #[method(appendBezierPathWithGlyph:inFont:)]
        pub unsafe fn appendBezierPathWithGlyph_inFont(
            &self,
            glyph: AppKit::NSGlyph,
            font: &AppKit::NSFont,
        );

        #[cfg(feature = "AppKit_NSFont")]
        #[method(appendBezierPathWithGlyphs:count:inFont:)]
        pub unsafe fn appendBezierPathWithGlyphs_count_inFont(
            &self,
            glyphs: NonNull<AppKit::NSGlyph>,
            count: NSInteger,
            font: &AppKit::NSFont,
        );

        #[method(appendBezierPathWithPackedGlyphs:)]
        pub unsafe fn appendBezierPathWithPackedGlyphs(&self, packedGlyphs: NonNull<c_char>);
    }
);

extern_static!(NSButtLineCapStyle: AppKit::NSLineCapStyle = NSLineCapStyleButt);

extern_static!(NSRoundLineCapStyle: AppKit::NSLineCapStyle = NSLineCapStyleRound);

extern_static!(NSSquareLineCapStyle: AppKit::NSLineCapStyle = NSLineCapStyleSquare);

extern_static!(NSMiterLineJoinStyle: AppKit::NSLineJoinStyle = NSLineJoinStyleMiter);

extern_static!(NSRoundLineJoinStyle: AppKit::NSLineJoinStyle = NSLineJoinStyleRound);

extern_static!(NSBevelLineJoinStyle: AppKit::NSLineJoinStyle = NSLineJoinStyleBevel);

extern_static!(NSNonZeroWindingRule: AppKit::NSWindingRule = NSWindingRuleNonZero);

extern_static!(NSEvenOddWindingRule: AppKit::NSWindingRule = NSWindingRuleEvenOdd);

extern_static!(NSMoveToBezierPathElement: AppKit::NSBezierPathElement = NSBezierPathElementMoveTo);

extern_static!(NSLineToBezierPathElement: AppKit::NSBezierPathElement = NSBezierPathElementLineTo);

extern_static!(
    NSCurveToBezierPathElement: AppKit::NSBezierPathElement = NSBezierPathElementCurveTo
);

extern_static!(
    NSClosePathBezierPathElement: AppKit::NSBezierPathElement = NSBezierPathElementClosePath
);
