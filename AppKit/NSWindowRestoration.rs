//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit;
use crate::CoreData;
use crate::Foundation;

extern_protocol!(
    pub struct NSWindowRestoration;

    unsafe impl ProtocolType for NSWindowRestoration {}
);

extern_methods!(
    /// NSWindowRestoration
    #[cfg(feature = "AppKit_NSDocumentController")]
    unsafe impl AppKit::NSDocumentController {}
);

extern_methods!(
    /// NSWindowRestoration
    #[cfg(feature = "AppKit_NSApplication")]
    unsafe impl AppKit::NSApplication {
        #[cfg(all(
            feature = "AppKit_NSUserInterfaceItemIdentifier",
            feature = "AppKit_NSWindow",
            feature = "Foundation_NSCoder",
            feature = "Foundation_NSError"
        ))]
        #[method(restoreWindowWithIdentifier:state:completionHandler:)]
        pub unsafe fn restoreWindowWithIdentifier_state_completionHandler(
            &self,
            identifier: &AppKit::NSUserInterfaceItemIdentifier,
            state: &Foundation::NSCoder,
            completionHandler: &Block<(*mut AppKit::NSWindow, *mut Foundation::NSError), ()>,
        ) -> bool;
    }
);

extern_static!(
    NSApplicationDidFinishRestoringWindowsNotification: &'static Foundation::NSNotificationName
);

extern_methods!(
    /// NSUserInterfaceRestoration
    #[cfg(feature = "AppKit_NSWindow")]
    unsafe impl AppKit::NSWindow {
        #[method(isRestorable)]
        pub unsafe fn isRestorable(&self) -> bool;

        #[method(setRestorable:)]
        pub unsafe fn setRestorable(&self, restorable: bool);

        #[method_id(@__retain_semantics Other restorationClass)]
        pub unsafe fn restorationClass(&self) -> Option<Id<TodoClass, Shared>>;

        #[method(setRestorationClass:)]
        pub unsafe fn setRestorationClass(&self, restorationClass: Option<&TodoClass>);

        #[method(disableSnapshotRestoration)]
        pub unsafe fn disableSnapshotRestoration(&self);

        #[method(enableSnapshotRestoration)]
        pub unsafe fn enableSnapshotRestoration(&self);
    }
);

extern_methods!(
    /// NSRestorableState
    #[cfg(feature = "AppKit_NSResponder")]
    unsafe impl AppKit::NSResponder {
        #[cfg(feature = "Foundation_NSCoder")]
        #[method(encodeRestorableStateWithCoder:)]
        pub unsafe fn encodeRestorableStateWithCoder(&self, coder: &Foundation::NSCoder);

        #[cfg(all(
            feature = "Foundation_NSCoder",
            feature = "Foundation_NSOperationQueue"
        ))]
        #[method(encodeRestorableStateWithCoder:backgroundQueue:)]
        pub unsafe fn encodeRestorableStateWithCoder_backgroundQueue(
            &self,
            coder: &Foundation::NSCoder,
            queue: &Foundation::NSOperationQueue,
        );

        #[cfg(feature = "Foundation_NSCoder")]
        #[method(restoreStateWithCoder:)]
        pub unsafe fn restoreStateWithCoder(&self, coder: &Foundation::NSCoder);

        #[method(invalidateRestorableState)]
        pub unsafe fn invalidateRestorableState(&self);

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other restorableStateKeyPaths)]
        pub unsafe fn restorableStateKeyPaths(
        ) -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other allowedClassesForRestorableStateKeyPath:)]
        pub unsafe fn allowedClassesForRestorableStateKeyPath(
            keyPath: &Foundation::NSString,
        ) -> Id<Foundation::NSArray<TodoClass>, Shared>;
    }
);

extern_methods!(
    /// NSRestorableStateExtension
    #[cfg(feature = "AppKit_NSApplication")]
    unsafe impl AppKit::NSApplication {
        #[method(extendStateRestoration)]
        pub unsafe fn extendStateRestoration(&self);

        #[method(completeStateRestoration)]
        pub unsafe fn completeStateRestoration(&self);
    }
);

extern_methods!(
    /// NSRestorableState
    #[cfg(feature = "AppKit_NSDocument")]
    unsafe impl AppKit::NSDocument {
        #[cfg(all(
            feature = "AppKit_NSUserInterfaceItemIdentifier",
            feature = "AppKit_NSWindow",
            feature = "Foundation_NSCoder",
            feature = "Foundation_NSError"
        ))]
        #[method(restoreDocumentWindowWithIdentifier:state:completionHandler:)]
        pub unsafe fn restoreDocumentWindowWithIdentifier_state_completionHandler(
            &self,
            identifier: &AppKit::NSUserInterfaceItemIdentifier,
            state: &Foundation::NSCoder,
            completionHandler: &Block<(*mut AppKit::NSWindow, *mut Foundation::NSError), ()>,
        );

        #[cfg(feature = "Foundation_NSCoder")]
        #[method(encodeRestorableStateWithCoder:)]
        pub unsafe fn encodeRestorableStateWithCoder(&self, coder: &Foundation::NSCoder);

        #[cfg(all(
            feature = "Foundation_NSCoder",
            feature = "Foundation_NSOperationQueue"
        ))]
        #[method(encodeRestorableStateWithCoder:backgroundQueue:)]
        pub unsafe fn encodeRestorableStateWithCoder_backgroundQueue(
            &self,
            coder: &Foundation::NSCoder,
            queue: &Foundation::NSOperationQueue,
        );

        #[cfg(feature = "Foundation_NSCoder")]
        #[method(restoreStateWithCoder:)]
        pub unsafe fn restoreStateWithCoder(&self, coder: &Foundation::NSCoder);

        #[method(invalidateRestorableState)]
        pub unsafe fn invalidateRestorableState(&self);

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other restorableStateKeyPaths)]
        pub unsafe fn restorableStateKeyPaths(
        ) -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other allowedClassesForRestorableStateKeyPath:)]
        pub unsafe fn allowedClassesForRestorableStateKeyPath(
            keyPath: &Foundation::NSString,
        ) -> Id<Foundation::NSArray<TodoClass>, Shared>;
    }
);
