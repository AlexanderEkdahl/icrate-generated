//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit;
use crate::CoreData;
use crate::Foundation;

__inner_extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSCandidateListTouchBarItem<
        CandidateType: Message = Object,
        CandidateTypeOwnership: Ownership = Shared,
    > {
        _inner0: PhantomData<*mut (CandidateType, CandidateTypeOwnership)>,
        notunwindsafe: PhantomData<&'static mut ()>,
    }

    unsafe impl<CandidateType: Message, CandidateTypeOwnership: Ownership> ClassType
        for NSCandidateListTouchBarItem<CandidateType, CandidateTypeOwnership>
    {
        #[inherits(NSObject)]
        type Super = AppKit::NSTouchBarItem;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSCandidateListTouchBarItem")]
    unsafe impl<CandidateType: Message, CandidateTypeOwnership: Ownership>
        NSCandidateListTouchBarItem<CandidateType, CandidateTypeOwnership>
    {
        #[cfg(feature = "AppKit_NSView")]
        #[method_id(@__retain_semantics Other client)]
        pub unsafe fn client(&self) -> Option<Id<AppKit::NSView, Shared>>;

        #[cfg(feature = "AppKit_NSView")]
        #[method(setClient:)]
        pub unsafe fn setClient(&self, client: Option<&AppKit::NSView>);

        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(
            &self,
        ) -> Option<Id<AppKit::NSCandidateListTouchBarItemDelegate, Shared>>;

        #[method(setDelegate:)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&AppKit::NSCandidateListTouchBarItemDelegate>,
        );

        #[method(isCollapsed)]
        pub unsafe fn isCollapsed(&self) -> bool;

        #[method(setCollapsed:)]
        pub unsafe fn setCollapsed(&self, collapsed: bool);

        #[method(allowsCollapsing)]
        pub unsafe fn allowsCollapsing(&self) -> bool;

        #[method(setAllowsCollapsing:)]
        pub unsafe fn setAllowsCollapsing(&self, allowsCollapsing: bool);

        #[method(isCandidateListVisible)]
        pub unsafe fn isCandidateListVisible(&self) -> bool;

        #[method(updateWithInsertionPointVisibility:)]
        pub unsafe fn updateWithInsertionPointVisibility(&self, isVisible: bool);

        #[method(allowsTextInputContextCandidates)]
        pub unsafe fn allowsTextInputContextCandidates(&self) -> bool;

        #[method(setAllowsTextInputContextCandidates:)]
        pub unsafe fn setAllowsTextInputContextCandidates(
            &self,
            allowsTextInputContextCandidates: bool,
        );

        #[cfg(feature = "Foundation_NSAttributedString")]
        #[method(attributedStringForCandidate)]
        pub unsafe fn attributedStringForCandidate(
            &self,
        ) -> *mut Block<(NonNull<CandidateType>, NSInteger), NonNull<Foundation::NSAttributedString>>;

        #[cfg(feature = "Foundation_NSAttributedString")]
        #[method(setAttributedStringForCandidate:)]
        pub unsafe fn setAttributedStringForCandidate(
            &self,
            attributedStringForCandidate: Option<
                &Block<
                    (NonNull<CandidateType>, NSInteger),
                    NonNull<Foundation::NSAttributedString>,
                >,
            >,
        );

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other candidates)]
        pub unsafe fn candidates(&self) -> Id<Foundation::NSArray<CandidateType>, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method(setCandidates:forSelectedRange:inString:)]
        pub unsafe fn setCandidates_forSelectedRange_inString(
            &self,
            candidates: &Foundation::NSArray<CandidateType>,
            selectedRange: Foundation::NSRange,
            originalString: Option<&Foundation::NSString>,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other customizationLabel)]
        pub unsafe fn customizationLabel(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setCustomizationLabel:)]
        pub unsafe fn setCustomizationLabel(
            &self,
            customizationLabel: Option<&Foundation::NSString>,
        );
    }
);

extern_protocol!(
    pub struct NSCandidateListTouchBarItemDelegate;

    unsafe impl ProtocolType for NSCandidateListTouchBarItemDelegate {
        #[optional]
        #[method(candidateListTouchBarItem:beginSelectingCandidateAtIndex:)]
        pub unsafe fn candidateListTouchBarItem_beginSelectingCandidateAtIndex(
            &self,
            anItem: &AppKit::NSCandidateListTouchBarItem,
            index: NSInteger,
        );

        #[optional]
        #[method(candidateListTouchBarItem:changeSelectionFromCandidateAtIndex:toIndex:)]
        pub unsafe fn candidateListTouchBarItem_changeSelectionFromCandidateAtIndex_toIndex(
            &self,
            anItem: &AppKit::NSCandidateListTouchBarItem,
            previousIndex: NSInteger,
            index: NSInteger,
        );

        #[optional]
        #[method(candidateListTouchBarItem:endSelectingCandidateAtIndex:)]
        pub unsafe fn candidateListTouchBarItem_endSelectingCandidateAtIndex(
            &self,
            anItem: &AppKit::NSCandidateListTouchBarItem,
            index: NSInteger,
        );

        #[optional]
        #[method(candidateListTouchBarItem:changedCandidateListVisibility:)]
        pub unsafe fn candidateListTouchBarItem_changedCandidateListVisibility(
            &self,
            anItem: &AppKit::NSCandidateListTouchBarItem,
            isVisible: bool,
        );
    }
);

extern_methods!(
    /// NSCandidateListTouchBarItem
    #[cfg(feature = "AppKit_NSView")]
    unsafe impl AppKit::NSView {
        #[cfg(feature = "AppKit_NSCandidateListTouchBarItem")]
        #[method_id(@__retain_semantics Other candidateListTouchBarItem)]
        pub unsafe fn candidateListTouchBarItem(
            &self,
        ) -> Option<Id<AppKit::NSCandidateListTouchBarItem, Shared>>;
    }
);

extern_static!(NSTouchBarItemIdentifierCandidateList: &'static AppKit::NSTouchBarItemIdentifier);

extern_methods!(
    /// Methods declared on superclass `NSTouchBarItem`
    #[cfg(feature = "AppKit_NSCandidateListTouchBarItem")]
    unsafe impl<CandidateType: Message, CandidateTypeOwnership: Ownership>
        AppKit::NSCandidateListTouchBarItem<CandidateType, CandidateTypeOwnership>
    {
        #[method_id(@__retain_semantics Init initWithIdentifier:)]
        pub unsafe fn initWithIdentifier(
            this: Option<Allocated<Self>>,
            identifier: &AppKit::NSTouchBarItemIdentifier,
        ) -> Id<Self, Shared>;
    }
);
