//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit;
use crate::CoreData;
use crate::Foundation;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSFilePromiseProvider;

    unsafe impl ClassType for NSFilePromiseProvider {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSFilePromiseProvider")]
    unsafe impl NSFilePromiseProvider {
        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other fileType)]
        pub unsafe fn fileType(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setFileType:)]
        pub unsafe fn setFileType(&self, fileType: &Foundation::NSString);

        #[cfg(feature = "AppKit_NSFilePromiseProviderDelegate")]
        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(&self) -> Option<Id<AppKit::NSFilePromiseProviderDelegate, Shared>>;

        #[cfg(feature = "AppKit_NSFilePromiseProviderDelegate")]
        #[method(setDelegate:)]
        pub unsafe fn setDelegate(&self, delegate: Option<&AppKit::NSFilePromiseProviderDelegate>);

        #[method_id(@__retain_semantics Other userInfo)]
        pub unsafe fn userInfo(&self) -> Option<Id<Object, Shared>>;

        #[method(setUserInfo:)]
        pub unsafe fn setUserInfo(&self, userInfo: Option<&Object>);

        #[cfg(all(
            feature = "AppKit_NSFilePromiseProviderDelegate",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Init initWithFileType:delegate:)]
        pub unsafe fn initWithFileType_delegate(
            this: Option<Allocated<Self>>,
            fileType: &Foundation::NSString,
            delegate: &AppKit::NSFilePromiseProviderDelegate,
        ) -> Id<Self, Shared>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self, Shared>;
    }
);

extern_protocol!(
    pub struct NSFilePromiseProviderDelegate;

    unsafe impl ProtocolType for NSFilePromiseProviderDelegate {
        #[method_id(@__retain_semantics Other filePromiseProvider:fileNameForType:)]
        pub unsafe fn filePromiseProvider_fileNameForType(
            &self,
            filePromiseProvider: &AppKit::NSFilePromiseProvider,
            fileType: &Foundation::NSString,
        ) -> Id<Foundation::NSString, Shared>;

        #[method(filePromiseProvider:writePromiseToURL:completionHandler:)]
        pub unsafe fn filePromiseProvider_writePromiseToURL_completionHandler(
            &self,
            filePromiseProvider: &AppKit::NSFilePromiseProvider,
            url: &Foundation::NSURL,
            completionHandler: &Block<(*mut Foundation::NSError,), ()>,
        );

        #[optional]
        #[method_id(@__retain_semantics Other operationQueueForFilePromiseProvider:)]
        pub unsafe fn operationQueueForFilePromiseProvider(
            &self,
            filePromiseProvider: &AppKit::NSFilePromiseProvider,
        ) -> Id<Foundation::NSOperationQueue, Shared>;
    }
);
