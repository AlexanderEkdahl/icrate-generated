//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit;
use crate::CoreData;
use crate::Foundation;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSPathControl;

    unsafe impl ClassType for NSPathControl {
        #[inherits(AppKit::NSView, AppKit::NSResponder, NSObject)]
        type Super = AppKit::NSControl;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSPathControl")]
    unsafe impl NSPathControl {
        #[method(isEditable)]
        pub unsafe fn isEditable(&self) -> bool;

        #[method(setEditable:)]
        pub unsafe fn setEditable(&self, editable: bool);

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other allowedTypes)]
        pub unsafe fn allowedTypes(
            &self,
        ) -> Option<Id<Foundation::NSArray<Foundation::NSString>, Shared>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method(setAllowedTypes:)]
        pub unsafe fn setAllowedTypes(
            &self,
            allowedTypes: Option<&Foundation::NSArray<Foundation::NSString>>,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other placeholderString)]
        pub unsafe fn placeholderString(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setPlaceholderString:)]
        pub unsafe fn setPlaceholderString(&self, placeholderString: Option<&Foundation::NSString>);

        #[cfg(feature = "Foundation_NSAttributedString")]
        #[method_id(@__retain_semantics Other placeholderAttributedString)]
        pub unsafe fn placeholderAttributedString(
            &self,
        ) -> Option<Id<Foundation::NSAttributedString, Shared>>;

        #[cfg(feature = "Foundation_NSAttributedString")]
        #[method(setPlaceholderAttributedString:)]
        pub unsafe fn setPlaceholderAttributedString(
            &self,
            placeholderAttributedString: Option<&Foundation::NSAttributedString>,
        );

        #[cfg(feature = "Foundation_NSURL")]
        #[method_id(@__retain_semantics Other URL)]
        pub unsafe fn URL(&self) -> Option<Id<Foundation::NSURL, Shared>>;

        #[cfg(feature = "Foundation_NSURL")]
        #[method(setURL:)]
        pub unsafe fn setURL(&self, URL: Option<&Foundation::NSURL>);

        #[method(doubleAction)]
        pub unsafe fn doubleAction(&self) -> Option<Sel>;

        #[method(setDoubleAction:)]
        pub unsafe fn setDoubleAction(&self, doubleAction: Option<Sel>);

        #[method(pathStyle)]
        pub unsafe fn pathStyle(&self) -> NSPathStyle;

        #[method(setPathStyle:)]
        pub unsafe fn setPathStyle(&self, pathStyle: NSPathStyle);

        #[cfg(feature = "AppKit_NSPathControlItem")]
        #[method_id(@__retain_semantics Other clickedPathItem)]
        pub unsafe fn clickedPathItem(&self) -> Option<Id<AppKit::NSPathControlItem, Shared>>;

        #[cfg(all(feature = "AppKit_NSPathControlItem", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Other pathItems)]
        pub unsafe fn pathItems(
            &self,
        ) -> Id<Foundation::NSArray<AppKit::NSPathControlItem>, Shared>;

        #[cfg(all(feature = "AppKit_NSPathControlItem", feature = "Foundation_NSArray"))]
        #[method(setPathItems:)]
        pub unsafe fn setPathItems(
            &self,
            pathItems: &Foundation::NSArray<AppKit::NSPathControlItem>,
        );

        #[cfg(feature = "AppKit_NSColor")]
        #[method_id(@__retain_semantics Other backgroundColor)]
        pub unsafe fn backgroundColor(&self) -> Option<Id<AppKit::NSColor, Shared>>;

        #[cfg(feature = "AppKit_NSColor")]
        #[method(setBackgroundColor:)]
        pub unsafe fn setBackgroundColor(&self, backgroundColor: Option<&AppKit::NSColor>);

        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(&self) -> Option<Id<AppKit::NSPathControlDelegate, Shared>>;

        #[method(setDelegate:)]
        pub unsafe fn setDelegate(&self, delegate: Option<&AppKit::NSPathControlDelegate>);

        #[method(setDraggingSourceOperationMask:forLocal:)]
        pub unsafe fn setDraggingSourceOperationMask_forLocal(
            &self,
            mask: NSDragOperation,
            isLocal: bool,
        );

        #[cfg(feature = "AppKit_NSMenu")]
        #[method_id(@__retain_semantics Other menu)]
        pub unsafe fn menu(&self) -> Option<Id<AppKit::NSMenu, Shared>>;

        #[cfg(feature = "AppKit_NSMenu")]
        #[method(setMenu:)]
        pub unsafe fn setMenu(&self, menu: Option<&AppKit::NSMenu>);
    }
);

extern_protocol!(
    pub struct NSPathControlDelegate;

    unsafe impl ProtocolType for NSPathControlDelegate {
        #[optional]
        #[method(pathControl:shouldDragItem:withPasteboard:)]
        pub unsafe fn pathControl_shouldDragItem_withPasteboard(
            &self,
            pathControl: &AppKit::NSPathControl,
            pathItem: &AppKit::NSPathControlItem,
            pasteboard: &AppKit::NSPasteboard,
        ) -> bool;

        #[optional]
        #[method(pathControl:shouldDragPathComponentCell:withPasteboard:)]
        pub unsafe fn pathControl_shouldDragPathComponentCell_withPasteboard(
            &self,
            pathControl: &AppKit::NSPathControl,
            pathComponentCell: &AppKit::NSPathComponentCell,
            pasteboard: &AppKit::NSPasteboard,
        ) -> bool;

        #[optional]
        #[method(pathControl:validateDrop:)]
        pub unsafe fn pathControl_validateDrop(
            &self,
            pathControl: &AppKit::NSPathControl,
            info: &AppKit::NSDraggingInfo,
        ) -> NSDragOperation;

        #[optional]
        #[method(pathControl:acceptDrop:)]
        pub unsafe fn pathControl_acceptDrop(
            &self,
            pathControl: &AppKit::NSPathControl,
            info: &AppKit::NSDraggingInfo,
        ) -> bool;

        #[optional]
        #[method(pathControl:willDisplayOpenPanel:)]
        pub unsafe fn pathControl_willDisplayOpenPanel(
            &self,
            pathControl: &AppKit::NSPathControl,
            openPanel: &AppKit::NSOpenPanel,
        );

        #[optional]
        #[method(pathControl:willPopUpMenu:)]
        pub unsafe fn pathControl_willPopUpMenu(
            &self,
            pathControl: &AppKit::NSPathControl,
            menu: &AppKit::NSMenu,
        );
    }
);

extern_methods!(
    /// NSDeprecated
    #[cfg(feature = "AppKit_NSPathControl")]
    unsafe impl NSPathControl {
        #[cfg(feature = "AppKit_NSPathComponentCell")]
        #[method_id(@__retain_semantics Other clickedPathComponentCell)]
        pub unsafe fn clickedPathComponentCell(
            &self,
        ) -> Option<Id<AppKit::NSPathComponentCell, Shared>>;

        #[cfg(all(feature = "AppKit_NSPathComponentCell", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Other pathComponentCells)]
        pub unsafe fn pathComponentCells(
            &self,
        ) -> Id<Foundation::NSArray<AppKit::NSPathComponentCell>, Shared>;

        #[cfg(all(feature = "AppKit_NSPathComponentCell", feature = "Foundation_NSArray"))]
        #[method(setPathComponentCells:)]
        pub unsafe fn setPathComponentCells(
            &self,
            cells: &Foundation::NSArray<AppKit::NSPathComponentCell>,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSControl`
    #[cfg(feature = "AppKit_NSPathControl")]
    unsafe impl AppKit::NSPathControl {
        #[method_id(@__retain_semantics Init initWithFrame:)]
        pub unsafe fn initWithFrame(
            this: Option<Allocated<Self>>,
            frameRect: NSRect,
        ) -> Id<Self, Shared>;
    }
);
