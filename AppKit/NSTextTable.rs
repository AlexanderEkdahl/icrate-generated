//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit;
use crate::CoreData;
use crate::Foundation;

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSTextBlockValueType {
        NSTextBlockAbsoluteValueType = 0,
        NSTextBlockPercentageValueType = 1,
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSTextBlockDimension {
        NSTextBlockWidth = 0,
        NSTextBlockMinimumWidth = 1,
        NSTextBlockMaximumWidth = 2,
        NSTextBlockHeight = 4,
        NSTextBlockMinimumHeight = 5,
        NSTextBlockMaximumHeight = 6,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSTextBlockLayer {
        NSTextBlockPadding = -1,
        NSTextBlockBorder = 0,
        NSTextBlockMargin = 1,
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSTextBlockVerticalAlignment {
        NSTextBlockTopAlignment = 0,
        NSTextBlockMiddleAlignment = 1,
        NSTextBlockBottomAlignment = 2,
        NSTextBlockBaselineAlignment = 3,
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSTextTableLayoutAlgorithm {
        NSTextTableAutomaticLayoutAlgorithm = 0,
        NSTextTableFixedLayoutAlgorithm = 1,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSTextBlock;

    unsafe impl ClassType for NSTextBlock {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSTextBlock")]
    unsafe impl NSTextBlock {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self, Shared>;

        #[method(setValue:type:forDimension:)]
        pub unsafe fn setValue_type_forDimension(
            &self,
            val: CoreGraphics::CGFloat,
            type_: AppKit::NSTextBlockValueType,
            dimension: AppKit::NSTextBlockDimension,
        );

        #[method(valueForDimension:)]
        pub unsafe fn valueForDimension(
            &self,
            dimension: AppKit::NSTextBlockDimension,
        ) -> CoreGraphics::CGFloat;

        #[method(valueTypeForDimension:)]
        pub unsafe fn valueTypeForDimension(
            &self,
            dimension: AppKit::NSTextBlockDimension,
        ) -> AppKit::NSTextBlockValueType;

        #[method(setContentWidth:type:)]
        pub unsafe fn setContentWidth_type(
            &self,
            val: CoreGraphics::CGFloat,
            type_: AppKit::NSTextBlockValueType,
        );

        #[method(contentWidth)]
        pub unsafe fn contentWidth(&self) -> CoreGraphics::CGFloat;

        #[method(contentWidthValueType)]
        pub unsafe fn contentWidthValueType(&self) -> AppKit::NSTextBlockValueType;

        #[method(setWidth:type:forLayer:edge:)]
        pub unsafe fn setWidth_type_forLayer_edge(
            &self,
            val: CoreGraphics::CGFloat,
            type_: AppKit::NSTextBlockValueType,
            layer: AppKit::NSTextBlockLayer,
            edge: Foundation::NSRectEdge,
        );

        #[method(setWidth:type:forLayer:)]
        pub unsafe fn setWidth_type_forLayer(
            &self,
            val: CoreGraphics::CGFloat,
            type_: AppKit::NSTextBlockValueType,
            layer: AppKit::NSTextBlockLayer,
        );

        #[method(widthForLayer:edge:)]
        pub unsafe fn widthForLayer_edge(
            &self,
            layer: AppKit::NSTextBlockLayer,
            edge: Foundation::NSRectEdge,
        ) -> CoreGraphics::CGFloat;

        #[method(widthValueTypeForLayer:edge:)]
        pub unsafe fn widthValueTypeForLayer_edge(
            &self,
            layer: AppKit::NSTextBlockLayer,
            edge: Foundation::NSRectEdge,
        ) -> AppKit::NSTextBlockValueType;

        #[method(verticalAlignment)]
        pub unsafe fn verticalAlignment(&self) -> AppKit::NSTextBlockVerticalAlignment;

        #[method(setVerticalAlignment:)]
        pub unsafe fn setVerticalAlignment(
            &self,
            verticalAlignment: AppKit::NSTextBlockVerticalAlignment,
        );

        #[cfg(feature = "AppKit_NSColor")]
        #[method_id(@__retain_semantics Other backgroundColor)]
        pub unsafe fn backgroundColor(&self) -> Option<Id<AppKit::NSColor, Shared>>;

        #[cfg(feature = "AppKit_NSColor")]
        #[method(setBackgroundColor:)]
        pub unsafe fn setBackgroundColor(&self, backgroundColor: Option<&AppKit::NSColor>);

        #[cfg(feature = "AppKit_NSColor")]
        #[method(setBorderColor:forEdge:)]
        pub unsafe fn setBorderColor_forEdge(
            &self,
            color: Option<&AppKit::NSColor>,
            edge: Foundation::NSRectEdge,
        );

        #[cfg(feature = "AppKit_NSColor")]
        #[method(setBorderColor:)]
        pub unsafe fn setBorderColor(&self, color: Option<&AppKit::NSColor>);

        #[cfg(feature = "AppKit_NSColor")]
        #[method_id(@__retain_semantics Other borderColorForEdge:)]
        pub unsafe fn borderColorForEdge(
            &self,
            edge: Foundation::NSRectEdge,
        ) -> Option<Id<AppKit::NSColor, Shared>>;

        #[cfg(feature = "AppKit_NSTextContainer")]
        #[method(rectForLayoutAtPoint:inRect:textContainer:characterRange:)]
        pub unsafe fn rectForLayoutAtPoint_inRect_textContainer_characterRange(
            &self,
            startingPoint: Foundation::NSPoint,
            rect: Foundation::NSRect,
            textContainer: &AppKit::NSTextContainer,
            charRange: Foundation::NSRange,
        ) -> Foundation::NSRect;

        #[cfg(feature = "AppKit_NSTextContainer")]
        #[method(boundsRectForContentRect:inRect:textContainer:characterRange:)]
        pub unsafe fn boundsRectForContentRect_inRect_textContainer_characterRange(
            &self,
            contentRect: Foundation::NSRect,
            rect: Foundation::NSRect,
            textContainer: &AppKit::NSTextContainer,
            charRange: Foundation::NSRange,
        ) -> Foundation::NSRect;

        #[cfg(all(feature = "AppKit_NSLayoutManager", feature = "AppKit_NSView"))]
        #[method(drawBackgroundWithFrame:inView:characterRange:layoutManager:)]
        pub unsafe fn drawBackgroundWithFrame_inView_characterRange_layoutManager(
            &self,
            frameRect: Foundation::NSRect,
            controlView: &AppKit::NSView,
            charRange: Foundation::NSRange,
            layoutManager: &AppKit::NSLayoutManager,
        );
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSTextTableBlock;

    unsafe impl ClassType for NSTextTableBlock {
        #[inherits(NSObject)]
        type Super = NSTextBlock;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSTextTableBlock")]
    unsafe impl NSTextTableBlock {
        #[cfg(feature = "AppKit_NSTextTable")]
        #[method_id(@__retain_semantics Init initWithTable:startingRow:rowSpan:startingColumn:columnSpan:)]
        pub unsafe fn initWithTable_startingRow_rowSpan_startingColumn_columnSpan(
            this: Option<Allocated<Self>>,
            table: &AppKit::NSTextTable,
            row: NSInteger,
            rowSpan: NSInteger,
            col: NSInteger,
            colSpan: NSInteger,
        ) -> Id<Self, Shared>;

        #[cfg(feature = "AppKit_NSTextTable")]
        #[method_id(@__retain_semantics Other table)]
        pub unsafe fn table(&self) -> Id<AppKit::NSTextTable, Shared>;

        #[method(startingRow)]
        pub unsafe fn startingRow(&self) -> NSInteger;

        #[method(rowSpan)]
        pub unsafe fn rowSpan(&self) -> NSInteger;

        #[method(startingColumn)]
        pub unsafe fn startingColumn(&self) -> NSInteger;

        #[method(columnSpan)]
        pub unsafe fn columnSpan(&self) -> NSInteger;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSTextTable;

    unsafe impl ClassType for NSTextTable {
        #[inherits(NSObject)]
        type Super = NSTextBlock;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSTextTable")]
    unsafe impl NSTextTable {
        #[method(numberOfColumns)]
        pub unsafe fn numberOfColumns(&self) -> NSUInteger;

        #[method(setNumberOfColumns:)]
        pub unsafe fn setNumberOfColumns(&self, numberOfColumns: NSUInteger);

        #[method(layoutAlgorithm)]
        pub unsafe fn layoutAlgorithm(&self) -> AppKit::NSTextTableLayoutAlgorithm;

        #[method(setLayoutAlgorithm:)]
        pub unsafe fn setLayoutAlgorithm(
            &self,
            layoutAlgorithm: AppKit::NSTextTableLayoutAlgorithm,
        );

        #[method(collapsesBorders)]
        pub unsafe fn collapsesBorders(&self) -> bool;

        #[method(setCollapsesBorders:)]
        pub unsafe fn setCollapsesBorders(&self, collapsesBorders: bool);

        #[method(hidesEmptyCells)]
        pub unsafe fn hidesEmptyCells(&self) -> bool;

        #[method(setHidesEmptyCells:)]
        pub unsafe fn setHidesEmptyCells(&self, hidesEmptyCells: bool);

        #[cfg(all(
            feature = "AppKit_NSTextContainer",
            feature = "AppKit_NSTextTableBlock"
        ))]
        #[method(rectForBlock:layoutAtPoint:inRect:textContainer:characterRange:)]
        pub unsafe fn rectForBlock_layoutAtPoint_inRect_textContainer_characterRange(
            &self,
            block: &AppKit::NSTextTableBlock,
            startingPoint: Foundation::NSPoint,
            rect: Foundation::NSRect,
            textContainer: &AppKit::NSTextContainer,
            charRange: Foundation::NSRange,
        ) -> Foundation::NSRect;

        #[cfg(all(
            feature = "AppKit_NSTextContainer",
            feature = "AppKit_NSTextTableBlock"
        ))]
        #[method(boundsRectForBlock:contentRect:inRect:textContainer:characterRange:)]
        pub unsafe fn boundsRectForBlock_contentRect_inRect_textContainer_characterRange(
            &self,
            block: &AppKit::NSTextTableBlock,
            contentRect: Foundation::NSRect,
            rect: Foundation::NSRect,
            textContainer: &AppKit::NSTextContainer,
            charRange: Foundation::NSRange,
        ) -> Foundation::NSRect;

        #[cfg(all(
            feature = "AppKit_NSLayoutManager",
            feature = "AppKit_NSTextTableBlock",
            feature = "AppKit_NSView"
        ))]
        #[method(drawBackgroundForBlock:withFrame:inView:characterRange:layoutManager:)]
        pub unsafe fn drawBackgroundForBlock_withFrame_inView_characterRange_layoutManager(
            &self,
            block: &AppKit::NSTextTableBlock,
            frameRect: Foundation::NSRect,
            controlView: &AppKit::NSView,
            charRange: Foundation::NSRange,
            layoutManager: &AppKit::NSLayoutManager,
        );
    }
);
