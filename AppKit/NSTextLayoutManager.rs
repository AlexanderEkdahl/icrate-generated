//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit;
use crate::CoreData;
use crate::Foundation;

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSTextLayoutManagerSegmentType {
        NSTextLayoutManagerSegmentTypeStandard = 0,
        NSTextLayoutManagerSegmentTypeSelection = 1,
        NSTextLayoutManagerSegmentTypeHighlight = 2,
    }
);

ns_options!(
    #[underlying(NSUInteger)]
    pub enum NSTextLayoutManagerSegmentOptions {
        NSTextLayoutManagerSegmentOptionsNone = 0,
        NSTextLayoutManagerSegmentOptionsRangeNotRequired = 1 << 0,
        NSTextLayoutManagerSegmentOptionsMiddleFragmentsExcluded = 1 << 1,
        NSTextLayoutManagerSegmentOptionsHeadSegmentExtended = 1 << 2,
        NSTextLayoutManagerSegmentOptionsTailSegmentExtended = 1 << 3,
        NSTextLayoutManagerSegmentOptionsUpstreamAffinity = 1 << 4,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSTextLayoutManager;

    unsafe impl ClassType for NSTextLayoutManager {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSTextLayoutManager")]
    unsafe impl NSTextLayoutManager {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self, Shared>;

        #[cfg(feature = "Foundation_NSCoder")]
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Option<Allocated<Self>>,
            coder: &Foundation::NSCoder,
        ) -> Option<Id<Self, Shared>>;

        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(&self) -> Option<Id<AppKit::NSTextLayoutManagerDelegate, Shared>>;

        #[method(setDelegate:)]
        pub unsafe fn setDelegate(&self, delegate: Option<&AppKit::NSTextLayoutManagerDelegate>);

        #[method(usesFontLeading)]
        pub unsafe fn usesFontLeading(&self) -> bool;

        #[method(setUsesFontLeading:)]
        pub unsafe fn setUsesFontLeading(&self, usesFontLeading: bool);

        #[method(limitsLayoutForSuspiciousContents)]
        pub unsafe fn limitsLayoutForSuspiciousContents(&self) -> bool;

        #[method(setLimitsLayoutForSuspiciousContents:)]
        pub unsafe fn setLimitsLayoutForSuspiciousContents(
            &self,
            limitsLayoutForSuspiciousContents: bool,
        );

        #[method(usesHyphenation)]
        pub unsafe fn usesHyphenation(&self) -> bool;

        #[method(setUsesHyphenation:)]
        pub unsafe fn setUsesHyphenation(&self, usesHyphenation: bool);

        #[cfg(feature = "AppKit_NSTextContentManager")]
        #[method_id(@__retain_semantics Other textContentManager)]
        pub unsafe fn textContentManager(&self)
            -> Option<Id<AppKit::NSTextContentManager, Shared>>;

        #[cfg(feature = "AppKit_NSTextContentManager")]
        #[method(replaceTextContentManager:)]
        pub unsafe fn replaceTextContentManager(
            &self,
            textContentManager: &AppKit::NSTextContentManager,
        );

        #[cfg(feature = "AppKit_NSTextContainer")]
        #[method_id(@__retain_semantics Other textContainer)]
        pub unsafe fn textContainer(&self) -> Option<Id<AppKit::NSTextContainer, Shared>>;

        #[cfg(feature = "AppKit_NSTextContainer")]
        #[method(setTextContainer:)]
        pub unsafe fn setTextContainer(&self, textContainer: Option<&AppKit::NSTextContainer>);

        #[method(usageBoundsForTextContainer)]
        pub unsafe fn usageBoundsForTextContainer(&self) -> CGRect;

        #[cfg(feature = "AppKit_NSTextViewportLayoutController")]
        #[method_id(@__retain_semantics Other textViewportLayoutController)]
        pub unsafe fn textViewportLayoutController(
            &self,
        ) -> Id<AppKit::NSTextViewportLayoutController, Shared>;

        #[cfg(feature = "Foundation_NSOperationQueue")]
        #[method_id(@__retain_semantics Other layoutQueue)]
        pub unsafe fn layoutQueue(&self) -> Option<Id<Foundation::NSOperationQueue, Shared>>;

        #[cfg(feature = "Foundation_NSOperationQueue")]
        #[method(setLayoutQueue:)]
        pub unsafe fn setLayoutQueue(&self, layoutQueue: Option<&Foundation::NSOperationQueue>);

        #[cfg(feature = "AppKit_NSTextRange")]
        #[method(ensureLayoutForRange:)]
        pub unsafe fn ensureLayoutForRange(&self, range: &AppKit::NSTextRange);

        #[method(ensureLayoutForBounds:)]
        pub unsafe fn ensureLayoutForBounds(&self, bounds: CGRect);

        #[cfg(feature = "AppKit_NSTextRange")]
        #[method(invalidateLayoutForRange:)]
        pub unsafe fn invalidateLayoutForRange(&self, range: &AppKit::NSTextRange);

        #[cfg(feature = "AppKit_NSTextLayoutFragment")]
        #[method_id(@__retain_semantics Other textLayoutFragmentForPosition:)]
        pub unsafe fn textLayoutFragmentForPosition(
            &self,
            position: CGPoint,
        ) -> Option<Id<AppKit::NSTextLayoutFragment, Shared>>;

        #[cfg(feature = "AppKit_NSTextLayoutFragment")]
        #[method_id(@__retain_semantics Other textLayoutFragmentForLocation:)]
        pub unsafe fn textLayoutFragmentForLocation(
            &self,
            location: &AppKit::NSTextLocation,
        ) -> Option<Id<AppKit::NSTextLayoutFragment, Shared>>;

        #[cfg(feature = "AppKit_NSTextLayoutFragment")]
        #[method_id(@__retain_semantics Other enumerateTextLayoutFragmentsFromLocation:options:usingBlock:)]
        pub unsafe fn enumerateTextLayoutFragmentsFromLocation_options_usingBlock(
            &self,
            location: Option<&AppKit::NSTextLocation>,
            options: NSTextLayoutFragmentEnumerationOptions,
            block: &Block<(NonNull<AppKit::NSTextLayoutFragment>,), Bool>,
        ) -> Option<Id<AppKit::NSTextLocation, Shared>>;

        #[cfg(all(feature = "AppKit_NSTextSelection", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Other textSelections)]
        pub unsafe fn textSelections(
            &self,
        ) -> Id<Foundation::NSArray<AppKit::NSTextSelection>, Shared>;

        #[cfg(all(feature = "AppKit_NSTextSelection", feature = "Foundation_NSArray"))]
        #[method(setTextSelections:)]
        pub unsafe fn setTextSelections(
            &self,
            textSelections: &Foundation::NSArray<AppKit::NSTextSelection>,
        );

        #[cfg(feature = "AppKit_NSTextSelectionNavigation")]
        #[method_id(@__retain_semantics Other textSelectionNavigation)]
        pub unsafe fn textSelectionNavigation(
            &self,
        ) -> Id<AppKit::NSTextSelectionNavigation, Shared>;

        #[cfg(feature = "AppKit_NSTextSelectionNavigation")]
        #[method(setTextSelectionNavigation:)]
        pub unsafe fn setTextSelectionNavigation(
            &self,
            textSelectionNavigation: &AppKit::NSTextSelectionNavigation,
        );

        #[cfg(all(feature = "AppKit_NSTextRange", feature = "Foundation_NSDictionary"))]
        #[method(enumerateRenderingAttributesFromLocation:reverse:usingBlock:)]
        pub unsafe fn enumerateRenderingAttributesFromLocation_reverse_usingBlock(
            &self,
            location: &AppKit::NSTextLocation,
            reverse: bool,
            block: &Block<
                (
                    NonNull<AppKit::NSTextLayoutManager>,
                    NonNull<Foundation::NSDictionary<Foundation::NSAttributedStringKey, Object>>,
                    NonNull<AppKit::NSTextRange>,
                ),
                Bool,
            >,
        );

        #[cfg(all(feature = "AppKit_NSTextRange", feature = "Foundation_NSDictionary"))]
        #[method(setRenderingAttributes:forTextRange:)]
        pub unsafe fn setRenderingAttributes_forTextRange(
            &self,
            renderingAttributes: &Foundation::NSDictionary<
                Foundation::NSAttributedStringKey,
                Object,
            >,
            textRange: &AppKit::NSTextRange,
        );

        #[cfg(feature = "AppKit_NSTextRange")]
        #[method(addRenderingAttribute:value:forTextRange:)]
        pub unsafe fn addRenderingAttribute_value_forTextRange(
            &self,
            renderingAttribute: &Foundation::NSAttributedStringKey,
            value: Option<&Object>,
            textRange: &AppKit::NSTextRange,
        );

        #[cfg(feature = "AppKit_NSTextRange")]
        #[method(removeRenderingAttribute:forTextRange:)]
        pub unsafe fn removeRenderingAttribute_forTextRange(
            &self,
            renderingAttribute: &Foundation::NSAttributedStringKey,
            textRange: &AppKit::NSTextRange,
        );

        #[cfg(feature = "AppKit_NSTextRange")]
        #[method(invalidateRenderingAttributesForTextRange:)]
        pub unsafe fn invalidateRenderingAttributesForTextRange(
            &self,
            textRange: &AppKit::NSTextRange,
        );

        #[cfg(feature = "AppKit_NSTextLayoutFragment")]
        #[method(renderingAttributesValidator)]
        pub unsafe fn renderingAttributesValidator(
            &self,
        ) -> *mut Block<
            (
                NonNull<AppKit::NSTextLayoutManager>,
                NonNull<AppKit::NSTextLayoutFragment>,
            ),
            (),
        >;

        #[cfg(feature = "AppKit_NSTextLayoutFragment")]
        #[method(setRenderingAttributesValidator:)]
        pub unsafe fn setRenderingAttributesValidator(
            &self,
            renderingAttributesValidator: Option<
                &Block<
                    (
                        NonNull<AppKit::NSTextLayoutManager>,
                        NonNull<AppKit::NSTextLayoutFragment>,
                    ),
                    (),
                >,
            >,
        );

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method_id(@__retain_semantics Other linkRenderingAttributes)]
        pub unsafe fn linkRenderingAttributes(
        ) -> Id<Foundation::NSDictionary<Foundation::NSAttributedStringKey, Object>, Shared>;

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method_id(@__retain_semantics Other renderingAttributesForLink:atLocation:)]
        pub unsafe fn renderingAttributesForLink_atLocation(
            &self,
            link: &Object,
            location: &AppKit::NSTextLocation,
        ) -> Id<Foundation::NSDictionary<Foundation::NSAttributedStringKey, Object>, Shared>;

        #[cfg(all(feature = "AppKit_NSTextContainer", feature = "AppKit_NSTextRange"))]
        #[method(enumerateTextSegmentsInRange:type:options:usingBlock:)]
        pub unsafe fn enumerateTextSegmentsInRange_type_options_usingBlock(
            &self,
            textRange: &AppKit::NSTextRange,
            type_: NSTextLayoutManagerSegmentType,
            options: NSTextLayoutManagerSegmentOptions,
            block: &Block<
                (
                    *mut AppKit::NSTextRange,
                    CGRect,
                    CGFloat,
                    NonNull<AppKit::NSTextContainer>,
                ),
                Bool,
            >,
        );

        #[cfg(all(
            feature = "AppKit_NSTextElement",
            feature = "AppKit_NSTextRange",
            feature = "Foundation_NSArray"
        ))]
        #[method(replaceContentsInRange:withTextElements:)]
        pub unsafe fn replaceContentsInRange_withTextElements(
            &self,
            range: &AppKit::NSTextRange,
            textElements: &Foundation::NSArray<AppKit::NSTextElement>,
        );

        #[cfg(all(
            feature = "AppKit_NSTextRange",
            feature = "Foundation_NSAttributedString"
        ))]
        #[method(replaceContentsInRange:withAttributedString:)]
        pub unsafe fn replaceContentsInRange_withAttributedString(
            &self,
            range: &AppKit::NSTextRange,
            attributedString: &Foundation::NSAttributedString,
        );
    }
);

extern_protocol!(
    pub struct NSTextLayoutManagerDelegate;

    unsafe impl ProtocolType for NSTextLayoutManagerDelegate {
        #[optional]
        #[method_id(@__retain_semantics Other textLayoutManager:textLayoutFragmentForLocation:inTextElement:)]
        pub unsafe fn textLayoutManager_textLayoutFragmentForLocation_inTextElement(
            &self,
            textLayoutManager: &AppKit::NSTextLayoutManager,
            location: &AppKit::NSTextLocation,
            textElement: &AppKit::NSTextElement,
        ) -> Id<AppKit::NSTextLayoutFragment, Shared>;

        #[optional]
        #[method(textLayoutManager:shouldBreakLineBeforeLocation:hyphenating:)]
        pub unsafe fn textLayoutManager_shouldBreakLineBeforeLocation_hyphenating(
            &self,
            textLayoutManager: &AppKit::NSTextLayoutManager,
            location: &AppKit::NSTextLocation,
            hyphenating: bool,
        ) -> bool;

        #[optional]
        #[method_id(@__retain_semantics Other textLayoutManager:renderingAttributesForLink:atLocation:defaultAttributes:)]
        pub unsafe fn textLayoutManager_renderingAttributesForLink_atLocation_defaultAttributes(
            &self,
            textLayoutManager: &AppKit::NSTextLayoutManager,
            link: &Object,
            location: &AppKit::NSTextLocation,
            renderingAttributes: &Foundation::NSDictionary<
                Foundation::NSAttributedStringKey,
                Object,
            >,
        ) -> Option<Id<Foundation::NSDictionary<Foundation::NSAttributedStringKey, Object>, Shared>>;
    }
);
