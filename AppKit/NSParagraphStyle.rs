//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit;
use crate::CoreData;
use crate::Foundation;

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSLineBreakMode {
        NSLineBreakByWordWrapping = 0,
        NSLineBreakByCharWrapping = 1,
        NSLineBreakByClipping = 2,
        NSLineBreakByTruncatingHead = 3,
        NSLineBreakByTruncatingTail = 4,
        NSLineBreakByTruncatingMiddle = 5,
    }
);

ns_options!(
    #[underlying(NSUInteger)]
    pub enum NSLineBreakStrategy {
        NSLineBreakStrategyNone = 0,
        NSLineBreakStrategyPushOut = 1 << 0,
        NSLineBreakStrategyHangulWordPriority = 1 << 1,
        NSLineBreakStrategyStandard = 0xFFFF,
    }
);

typed_enum!(
    pub type NSTextTabOptionKey = Foundation::NSString;
);

extern_static!(NSTabColumnTerminatorsAttributeName: &'static AppKit::NSTextTabOptionKey);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSTextTab;

    unsafe impl ClassType for NSTextTab {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSTextTab")]
    unsafe impl NSTextTab {
        #[cfg(all(feature = "Foundation_NSCharacterSet", feature = "Foundation_NSLocale"))]
        #[method_id(@__retain_semantics Other columnTerminatorsForLocale:)]
        pub unsafe fn columnTerminatorsForLocale(
            aLocale: Option<&Foundation::NSLocale>,
        ) -> Id<Foundation::NSCharacterSet, Shared>;

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method_id(@__retain_semantics Init initWithTextAlignment:location:options:)]
        pub unsafe fn initWithTextAlignment_location_options(
            this: Option<Allocated<Self>>,
            alignment: AppKit::NSTextAlignment,
            loc: CoreGraphics::CGFloat,
            options: &Foundation::NSDictionary<AppKit::NSTextTabOptionKey, Object>,
        ) -> Id<Self, Shared>;

        #[method(alignment)]
        pub unsafe fn alignment(&self) -> AppKit::NSTextAlignment;

        #[method(location)]
        pub unsafe fn location(&self) -> CoreGraphics::CGFloat;

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method_id(@__retain_semantics Other options)]
        pub unsafe fn options(
            &self,
        ) -> Id<Foundation::NSDictionary<AppKit::NSTextTabOptionKey, Object>, Shared>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSParagraphStyle;

    unsafe impl ClassType for NSParagraphStyle {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSParagraphStyle")]
    unsafe impl NSParagraphStyle {
        #[method_id(@__retain_semantics Other defaultParagraphStyle)]
        pub unsafe fn defaultParagraphStyle() -> Id<AppKit::NSParagraphStyle, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(defaultWritingDirectionForLanguage:)]
        pub unsafe fn defaultWritingDirectionForLanguage(
            languageName: Option<&Foundation::NSString>,
        ) -> AppKit::NSWritingDirection;

        #[method(lineSpacing)]
        pub unsafe fn lineSpacing(&self) -> CoreGraphics::CGFloat;

        #[method(paragraphSpacing)]
        pub unsafe fn paragraphSpacing(&self) -> CoreGraphics::CGFloat;

        #[method(alignment)]
        pub unsafe fn alignment(&self) -> AppKit::NSTextAlignment;

        #[method(headIndent)]
        pub unsafe fn headIndent(&self) -> CoreGraphics::CGFloat;

        #[method(tailIndent)]
        pub unsafe fn tailIndent(&self) -> CoreGraphics::CGFloat;

        #[method(firstLineHeadIndent)]
        pub unsafe fn firstLineHeadIndent(&self) -> CoreGraphics::CGFloat;

        #[method(minimumLineHeight)]
        pub unsafe fn minimumLineHeight(&self) -> CoreGraphics::CGFloat;

        #[method(maximumLineHeight)]
        pub unsafe fn maximumLineHeight(&self) -> CoreGraphics::CGFloat;

        #[method(lineBreakMode)]
        pub unsafe fn lineBreakMode(&self) -> AppKit::NSLineBreakMode;

        #[method(baseWritingDirection)]
        pub unsafe fn baseWritingDirection(&self) -> AppKit::NSWritingDirection;

        #[method(lineHeightMultiple)]
        pub unsafe fn lineHeightMultiple(&self) -> CoreGraphics::CGFloat;

        #[method(paragraphSpacingBefore)]
        pub unsafe fn paragraphSpacingBefore(&self) -> CoreGraphics::CGFloat;

        #[method(hyphenationFactor)]
        pub unsafe fn hyphenationFactor(&self) -> c_float;

        #[method(usesDefaultHyphenation)]
        pub unsafe fn usesDefaultHyphenation(&self) -> bool;

        #[cfg(all(feature = "AppKit_NSTextTab", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Other tabStops)]
        pub unsafe fn tabStops(&self) -> Id<Foundation::NSArray<AppKit::NSTextTab>, Shared>;

        #[method(defaultTabInterval)]
        pub unsafe fn defaultTabInterval(&self) -> CoreGraphics::CGFloat;

        #[method(allowsDefaultTighteningForTruncation)]
        pub unsafe fn allowsDefaultTighteningForTruncation(&self) -> bool;

        #[method(tighteningFactorForTruncation)]
        pub unsafe fn tighteningFactorForTruncation(&self) -> c_float;

        #[cfg(all(feature = "AppKit_NSTextBlock", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Other textBlocks)]
        pub unsafe fn textBlocks(&self) -> Id<Foundation::NSArray<AppKit::NSTextBlock>, Shared>;

        #[cfg(all(feature = "AppKit_NSTextList", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Other textLists)]
        pub unsafe fn textLists(&self) -> Id<Foundation::NSArray<AppKit::NSTextList>, Shared>;

        #[method(headerLevel)]
        pub unsafe fn headerLevel(&self) -> NSInteger;

        #[method(lineBreakStrategy)]
        pub unsafe fn lineBreakStrategy(&self) -> AppKit::NSLineBreakStrategy;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSMutableParagraphStyle;

    unsafe impl ClassType for NSMutableParagraphStyle {
        #[inherits(NSObject)]
        type Super = NSParagraphStyle;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSMutableParagraphStyle")]
    unsafe impl NSMutableParagraphStyle {
        #[method(lineSpacing)]
        pub unsafe fn lineSpacing(&self) -> CoreGraphics::CGFloat;

        #[method(setLineSpacing:)]
        pub unsafe fn setLineSpacing(&self, lineSpacing: CoreGraphics::CGFloat);

        #[method(paragraphSpacing)]
        pub unsafe fn paragraphSpacing(&self) -> CoreGraphics::CGFloat;

        #[method(setParagraphSpacing:)]
        pub unsafe fn setParagraphSpacing(&self, paragraphSpacing: CoreGraphics::CGFloat);

        #[method(alignment)]
        pub unsafe fn alignment(&self) -> AppKit::NSTextAlignment;

        #[method(setAlignment:)]
        pub unsafe fn setAlignment(&self, alignment: AppKit::NSTextAlignment);

        #[method(firstLineHeadIndent)]
        pub unsafe fn firstLineHeadIndent(&self) -> CoreGraphics::CGFloat;

        #[method(setFirstLineHeadIndent:)]
        pub unsafe fn setFirstLineHeadIndent(&self, firstLineHeadIndent: CoreGraphics::CGFloat);

        #[method(headIndent)]
        pub unsafe fn headIndent(&self) -> CoreGraphics::CGFloat;

        #[method(setHeadIndent:)]
        pub unsafe fn setHeadIndent(&self, headIndent: CoreGraphics::CGFloat);

        #[method(tailIndent)]
        pub unsafe fn tailIndent(&self) -> CoreGraphics::CGFloat;

        #[method(setTailIndent:)]
        pub unsafe fn setTailIndent(&self, tailIndent: CoreGraphics::CGFloat);

        #[method(lineBreakMode)]
        pub unsafe fn lineBreakMode(&self) -> AppKit::NSLineBreakMode;

        #[method(setLineBreakMode:)]
        pub unsafe fn setLineBreakMode(&self, lineBreakMode: AppKit::NSLineBreakMode);

        #[method(minimumLineHeight)]
        pub unsafe fn minimumLineHeight(&self) -> CoreGraphics::CGFloat;

        #[method(setMinimumLineHeight:)]
        pub unsafe fn setMinimumLineHeight(&self, minimumLineHeight: CoreGraphics::CGFloat);

        #[method(maximumLineHeight)]
        pub unsafe fn maximumLineHeight(&self) -> CoreGraphics::CGFloat;

        #[method(setMaximumLineHeight:)]
        pub unsafe fn setMaximumLineHeight(&self, maximumLineHeight: CoreGraphics::CGFloat);

        #[method(baseWritingDirection)]
        pub unsafe fn baseWritingDirection(&self) -> AppKit::NSWritingDirection;

        #[method(setBaseWritingDirection:)]
        pub unsafe fn setBaseWritingDirection(
            &self,
            baseWritingDirection: AppKit::NSWritingDirection,
        );

        #[method(lineHeightMultiple)]
        pub unsafe fn lineHeightMultiple(&self) -> CoreGraphics::CGFloat;

        #[method(setLineHeightMultiple:)]
        pub unsafe fn setLineHeightMultiple(&self, lineHeightMultiple: CoreGraphics::CGFloat);

        #[method(paragraphSpacingBefore)]
        pub unsafe fn paragraphSpacingBefore(&self) -> CoreGraphics::CGFloat;

        #[method(setParagraphSpacingBefore:)]
        pub unsafe fn setParagraphSpacingBefore(
            &self,
            paragraphSpacingBefore: CoreGraphics::CGFloat,
        );

        #[method(hyphenationFactor)]
        pub unsafe fn hyphenationFactor(&self) -> c_float;

        #[method(setHyphenationFactor:)]
        pub unsafe fn setHyphenationFactor(&self, hyphenationFactor: c_float);

        #[method(usesDefaultHyphenation)]
        pub unsafe fn usesDefaultHyphenation(&self) -> bool;

        #[method(setUsesDefaultHyphenation:)]
        pub unsafe fn setUsesDefaultHyphenation(&self, usesDefaultHyphenation: bool);

        #[cfg(all(feature = "AppKit_NSTextTab", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Other tabStops)]
        pub unsafe fn tabStops(&self) -> Id<Foundation::NSArray<AppKit::NSTextTab>, Shared>;

        #[cfg(all(feature = "AppKit_NSTextTab", feature = "Foundation_NSArray"))]
        #[method(setTabStops:)]
        pub unsafe fn setTabStops(&self, tabStops: Option<&Foundation::NSArray<AppKit::NSTextTab>>);

        #[method(defaultTabInterval)]
        pub unsafe fn defaultTabInterval(&self) -> CoreGraphics::CGFloat;

        #[method(setDefaultTabInterval:)]
        pub unsafe fn setDefaultTabInterval(&self, defaultTabInterval: CoreGraphics::CGFloat);

        #[method(allowsDefaultTighteningForTruncation)]
        pub unsafe fn allowsDefaultTighteningForTruncation(&self) -> bool;

        #[method(setAllowsDefaultTighteningForTruncation:)]
        pub unsafe fn setAllowsDefaultTighteningForTruncation(
            &self,
            allowsDefaultTighteningForTruncation: bool,
        );

        #[cfg(feature = "AppKit_NSTextTab")]
        #[method(addTabStop:)]
        pub unsafe fn addTabStop(&self, anObject: &AppKit::NSTextTab);

        #[cfg(feature = "AppKit_NSTextTab")]
        #[method(removeTabStop:)]
        pub unsafe fn removeTabStop(&self, anObject: &AppKit::NSTextTab);

        #[method(setParagraphStyle:)]
        pub unsafe fn setParagraphStyle(&self, obj: &AppKit::NSParagraphStyle);

        #[method(tighteningFactorForTruncation)]
        pub unsafe fn tighteningFactorForTruncation(&self) -> c_float;

        #[method(setTighteningFactorForTruncation:)]
        pub unsafe fn setTighteningFactorForTruncation(
            &self,
            tighteningFactorForTruncation: c_float,
        );

        #[cfg(all(feature = "AppKit_NSTextBlock", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Other textBlocks)]
        pub unsafe fn textBlocks(&self) -> Id<Foundation::NSArray<AppKit::NSTextBlock>, Shared>;

        #[cfg(all(feature = "AppKit_NSTextBlock", feature = "Foundation_NSArray"))]
        #[method(setTextBlocks:)]
        pub unsafe fn setTextBlocks(&self, textBlocks: &Foundation::NSArray<AppKit::NSTextBlock>);

        #[cfg(all(feature = "AppKit_NSTextList", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Other textLists)]
        pub unsafe fn textLists(&self) -> Id<Foundation::NSArray<AppKit::NSTextList>, Shared>;

        #[cfg(all(feature = "AppKit_NSTextList", feature = "Foundation_NSArray"))]
        #[method(setTextLists:)]
        pub unsafe fn setTextLists(&self, textLists: &Foundation::NSArray<AppKit::NSTextList>);

        #[method(headerLevel)]
        pub unsafe fn headerLevel(&self) -> NSInteger;

        #[method(setHeaderLevel:)]
        pub unsafe fn setHeaderLevel(&self, headerLevel: NSInteger);

        #[method(lineBreakStrategy)]
        pub unsafe fn lineBreakStrategy(&self) -> AppKit::NSLineBreakStrategy;

        #[method(setLineBreakStrategy:)]
        pub unsafe fn setLineBreakStrategy(&self, lineBreakStrategy: AppKit::NSLineBreakStrategy);
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSTextTabType {
        NSLeftTabStopType = 0,
        NSRightTabStopType = 1,
        NSCenterTabStopType = 2,
        NSDecimalTabStopType = 3,
    }
);

extern_methods!(
    /// NSTextTabDeprecated
    #[cfg(feature = "AppKit_NSTextTab")]
    unsafe impl NSTextTab {
        #[method_id(@__retain_semantics Init initWithType:location:)]
        pub unsafe fn initWithType_location(
            this: Option<Allocated<Self>>,
            type_: AppKit::NSTextTabType,
            loc: CoreGraphics::CGFloat,
        ) -> Id<Self, Shared>;

        #[method(tabStopType)]
        pub unsafe fn tabStopType(&self) -> AppKit::NSTextTabType;
    }
);
