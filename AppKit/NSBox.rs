//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit;
use crate::CoreData;
use crate::Foundation;

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSTitlePosition {
        NSNoTitle = 0,
        NSAboveTop = 1,
        NSAtTop = 2,
        NSBelowTop = 3,
        NSAboveBottom = 4,
        NSAtBottom = 5,
        NSBelowBottom = 6,
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSBoxType {
        NSBoxPrimary = 0,
        NSBoxSeparator = 2,
        NSBoxCustom = 4,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSBox;

    unsafe impl ClassType for NSBox {
        #[inherits(AppKit::NSResponder, NSObject)]
        type Super = AppKit::NSView;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSBox")]
    unsafe impl NSBox {
        #[method(boxType)]
        pub unsafe fn boxType(&self) -> AppKit::NSBoxType;

        #[method(setBoxType:)]
        pub unsafe fn setBoxType(&self, boxType: AppKit::NSBoxType);

        #[method(titlePosition)]
        pub unsafe fn titlePosition(&self) -> AppKit::NSTitlePosition;

        #[method(setTitlePosition:)]
        pub unsafe fn setTitlePosition(&self, titlePosition: AppKit::NSTitlePosition);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other title)]
        pub unsafe fn title(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setTitle:)]
        pub unsafe fn setTitle(&self, title: &Foundation::NSString);

        #[cfg(feature = "AppKit_NSFont")]
        #[method_id(@__retain_semantics Other titleFont)]
        pub unsafe fn titleFont(&self) -> Id<AppKit::NSFont, Shared>;

        #[cfg(feature = "AppKit_NSFont")]
        #[method(setTitleFont:)]
        pub unsafe fn setTitleFont(&self, titleFont: &AppKit::NSFont);

        #[method(borderRect)]
        pub unsafe fn borderRect(&self) -> Foundation::NSRect;

        #[method(titleRect)]
        pub unsafe fn titleRect(&self) -> Foundation::NSRect;

        #[method_id(@__retain_semantics Other titleCell)]
        pub unsafe fn titleCell(&self) -> Id<Object, Shared>;

        #[method(contentViewMargins)]
        pub unsafe fn contentViewMargins(&self) -> Foundation::NSSize;

        #[method(setContentViewMargins:)]
        pub unsafe fn setContentViewMargins(&self, contentViewMargins: Foundation::NSSize);

        #[method(sizeToFit)]
        pub unsafe fn sizeToFit(&self);

        #[method(setFrameFromContentFrame:)]
        pub unsafe fn setFrameFromContentFrame(&self, contentFrame: Foundation::NSRect);

        #[method_id(@__retain_semantics Other contentView)]
        pub unsafe fn contentView(&self) -> Option<Id<AppKit::NSView, Shared>>;

        #[method(setContentView:)]
        pub unsafe fn setContentView(&self, contentView: Option<&AppKit::NSView>);

        #[method(isTransparent)]
        pub unsafe fn isTransparent(&self) -> bool;

        #[method(setTransparent:)]
        pub unsafe fn setTransparent(&self, transparent: bool);

        #[method(borderWidth)]
        pub unsafe fn borderWidth(&self) -> Foundation::CGFloat;

        #[method(setBorderWidth:)]
        pub unsafe fn setBorderWidth(&self, borderWidth: Foundation::CGFloat);

        #[method(cornerRadius)]
        pub unsafe fn cornerRadius(&self) -> Foundation::CGFloat;

        #[method(setCornerRadius:)]
        pub unsafe fn setCornerRadius(&self, cornerRadius: Foundation::CGFloat);

        #[cfg(feature = "AppKit_NSColor")]
        #[method_id(@__retain_semantics Other borderColor)]
        pub unsafe fn borderColor(&self) -> Id<AppKit::NSColor, Shared>;

        #[cfg(feature = "AppKit_NSColor")]
        #[method(setBorderColor:)]
        pub unsafe fn setBorderColor(&self, borderColor: &AppKit::NSColor);

        #[cfg(feature = "AppKit_NSColor")]
        #[method_id(@__retain_semantics Other fillColor)]
        pub unsafe fn fillColor(&self) -> Id<AppKit::NSColor, Shared>;

        #[cfg(feature = "AppKit_NSColor")]
        #[method(setFillColor:)]
        pub unsafe fn setFillColor(&self, fillColor: &AppKit::NSColor);
    }
);

extern_methods!(
    /// NSDeprecated
    #[cfg(feature = "AppKit_NSBox")]
    unsafe impl NSBox {
        #[method(borderType)]
        pub unsafe fn borderType(&self) -> AppKit::NSBorderType;

        #[method(setBorderType:)]
        pub unsafe fn setBorderType(&self, borderType: AppKit::NSBorderType);

        #[cfg(feature = "Foundation_NSString")]
        #[method(setTitleWithMnemonic:)]
        pub unsafe fn setTitleWithMnemonic(
            &self,
            stringWithAmpersand: Option<&Foundation::NSString>,
        );
    }
);

extern_static!(NSBoxSecondary: AppKit::NSBoxType = 1);

extern_static!(NSBoxOldStyle: AppKit::NSBoxType = 3);

extern_methods!(
    /// Methods declared on superclass `NSView`
    #[cfg(feature = "AppKit_NSBox")]
    unsafe impl AppKit::NSBox {
        #[method_id(@__retain_semantics Init initWithFrame:)]
        pub unsafe fn initWithFrame(
            this: Option<Allocated<Self>>,
            frameRect: Foundation::NSRect,
        ) -> Id<Self, Shared>;
    }
);
