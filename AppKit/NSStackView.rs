//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit;
use crate::CoreData;
use crate::Foundation;

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSStackViewGravity {
        NSStackViewGravityTop = 1,
        NSStackViewGravityLeading = 1,
        NSStackViewGravityCenter = 2,
        NSStackViewGravityBottom = 3,
        NSStackViewGravityTrailing = 3,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSStackViewDistribution {
        NSStackViewDistributionGravityAreas = -1,
        NSStackViewDistributionFill = 0,
        NSStackViewDistributionFillEqually = 1,
        NSStackViewDistributionFillProportionally = 2,
        NSStackViewDistributionEqualSpacing = 3,
        NSStackViewDistributionEqualCentering = 4,
    }
);

typed_extensible_enum!(
    pub type NSStackViewVisibilityPriority = c_float;
);

extern_static!(NSStackViewVisibilityPriorityMustHold: AppKit::NSStackViewVisibilityPriority = 1000);

extern_static!(
    NSStackViewVisibilityPriorityDetachOnlyIfNecessary: AppKit::NSStackViewVisibilityPriority = 900
);

extern_static!(NSStackViewVisibilityPriorityNotVisible: AppKit::NSStackViewVisibilityPriority = 0);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSStackView;

    unsafe impl ClassType for NSStackView {
        #[inherits(AppKit::NSResponder, NSObject)]
        type Super = AppKit::NSView;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSStackView")]
    unsafe impl NSStackView {
        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other stackViewWithViews:)]
        pub unsafe fn stackViewWithViews(
            views: &Foundation::NSArray<AppKit::NSView>,
        ) -> Id<Self, Shared>;

        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(&self) -> Option<Id<AppKit::NSStackViewDelegate, Shared>>;

        #[method(setDelegate:)]
        pub unsafe fn setDelegate(&self, delegate: Option<&AppKit::NSStackViewDelegate>);

        #[method(orientation)]
        pub unsafe fn orientation(&self) -> AppKit::NSUserInterfaceLayoutOrientation;

        #[method(setOrientation:)]
        pub unsafe fn setOrientation(&self, orientation: AppKit::NSUserInterfaceLayoutOrientation);

        #[method(alignment)]
        pub unsafe fn alignment(&self) -> AppKit::NSLayoutAttribute;

        #[method(setAlignment:)]
        pub unsafe fn setAlignment(&self, alignment: AppKit::NSLayoutAttribute);

        #[method(edgeInsets)]
        pub unsafe fn edgeInsets(&self) -> Foundation::NSEdgeInsets;

        #[method(setEdgeInsets:)]
        pub unsafe fn setEdgeInsets(&self, edgeInsets: Foundation::NSEdgeInsets);

        #[method(distribution)]
        pub unsafe fn distribution(&self) -> AppKit::NSStackViewDistribution;

        #[method(setDistribution:)]
        pub unsafe fn setDistribution(&self, distribution: AppKit::NSStackViewDistribution);

        #[method(spacing)]
        pub unsafe fn spacing(&self) -> CoreGraphics::CGFloat;

        #[method(setSpacing:)]
        pub unsafe fn setSpacing(&self, spacing: CoreGraphics::CGFloat);

        #[method(setCustomSpacing:afterView:)]
        pub unsafe fn setCustomSpacing_afterView(
            &self,
            spacing: CoreGraphics::CGFloat,
            view: &AppKit::NSView,
        );

        #[method(customSpacingAfterView:)]
        pub unsafe fn customSpacingAfterView(&self, view: &AppKit::NSView)
            -> CoreGraphics::CGFloat;

        #[method(detachesHiddenViews)]
        pub unsafe fn detachesHiddenViews(&self) -> bool;

        #[method(setDetachesHiddenViews:)]
        pub unsafe fn setDetachesHiddenViews(&self, detachesHiddenViews: bool);

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other arrangedSubviews)]
        pub unsafe fn arrangedSubviews(&self) -> Id<Foundation::NSArray<AppKit::NSView>, Shared>;

        #[method(addArrangedSubview:)]
        pub unsafe fn addArrangedSubview(&self, view: &AppKit::NSView);

        #[method(insertArrangedSubview:atIndex:)]
        pub unsafe fn insertArrangedSubview_atIndex(&self, view: &AppKit::NSView, index: NSInteger);

        #[method(removeArrangedSubview:)]
        pub unsafe fn removeArrangedSubview(&self, view: &AppKit::NSView);

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other detachedViews)]
        pub unsafe fn detachedViews(&self) -> Id<Foundation::NSArray<AppKit::NSView>, Shared>;

        #[method(setVisibilityPriority:forView:)]
        pub unsafe fn setVisibilityPriority_forView(
            &self,
            priority: AppKit::NSStackViewVisibilityPriority,
            view: &AppKit::NSView,
        );

        #[method(visibilityPriorityForView:)]
        pub unsafe fn visibilityPriorityForView(
            &self,
            view: &AppKit::NSView,
        ) -> AppKit::NSStackViewVisibilityPriority;

        #[method(clippingResistancePriorityForOrientation:)]
        pub unsafe fn clippingResistancePriorityForOrientation(
            &self,
            orientation: AppKit::NSLayoutConstraintOrientation,
        ) -> AppKit::NSLayoutPriority;

        #[method(setClippingResistancePriority:forOrientation:)]
        pub unsafe fn setClippingResistancePriority_forOrientation(
            &self,
            clippingResistancePriority: AppKit::NSLayoutPriority,
            orientation: AppKit::NSLayoutConstraintOrientation,
        );

        #[method(huggingPriorityForOrientation:)]
        pub unsafe fn huggingPriorityForOrientation(
            &self,
            orientation: AppKit::NSLayoutConstraintOrientation,
        ) -> AppKit::NSLayoutPriority;

        #[method(setHuggingPriority:forOrientation:)]
        pub unsafe fn setHuggingPriority_forOrientation(
            &self,
            huggingPriority: AppKit::NSLayoutPriority,
            orientation: AppKit::NSLayoutConstraintOrientation,
        );
    }
);

extern_protocol!(
    pub struct NSStackViewDelegate;

    unsafe impl ProtocolType for NSStackViewDelegate {
        #[optional]
        #[method(stackView:willDetachViews:)]
        pub unsafe fn stackView_willDetachViews(
            &self,
            stackView: &AppKit::NSStackView,
            views: &Foundation::NSArray<AppKit::NSView>,
        );

        #[optional]
        #[method(stackView:didReattachViews:)]
        pub unsafe fn stackView_didReattachViews(
            &self,
            stackView: &AppKit::NSStackView,
            views: &Foundation::NSArray<AppKit::NSView>,
        );
    }
);

extern_methods!(
    /// NSStackViewGravityAreas
    #[cfg(feature = "AppKit_NSStackView")]
    unsafe impl NSStackView {
        #[cfg(feature = "AppKit_NSView")]
        #[method(addView:inGravity:)]
        pub unsafe fn addView_inGravity(
            &self,
            view: &AppKit::NSView,
            gravity: AppKit::NSStackViewGravity,
        );

        #[cfg(feature = "AppKit_NSView")]
        #[method(insertView:atIndex:inGravity:)]
        pub unsafe fn insertView_atIndex_inGravity(
            &self,
            view: &AppKit::NSView,
            index: NSUInteger,
            gravity: AppKit::NSStackViewGravity,
        );

        #[cfg(feature = "AppKit_NSView")]
        #[method(removeView:)]
        pub unsafe fn removeView(&self, view: &AppKit::NSView);

        #[cfg(all(feature = "AppKit_NSView", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Other viewsInGravity:)]
        pub unsafe fn viewsInGravity(
            &self,
            gravity: AppKit::NSStackViewGravity,
        ) -> Id<Foundation::NSArray<AppKit::NSView>, Shared>;

        #[cfg(all(feature = "AppKit_NSView", feature = "Foundation_NSArray"))]
        #[method(setViews:inGravity:)]
        pub unsafe fn setViews_inGravity(
            &self,
            views: &Foundation::NSArray<AppKit::NSView>,
            gravity: AppKit::NSStackViewGravity,
        );

        #[cfg(all(feature = "AppKit_NSView", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Other views)]
        pub unsafe fn views(&self) -> Id<Foundation::NSArray<AppKit::NSView>, Shared>;
    }
);

extern_methods!(
    /// NSStackViewDeprecated
    #[cfg(feature = "AppKit_NSStackView")]
    unsafe impl NSStackView {
        #[method(hasEqualSpacing)]
        pub unsafe fn hasEqualSpacing(&self) -> bool;

        #[method(setHasEqualSpacing:)]
        pub unsafe fn setHasEqualSpacing(&self, hasEqualSpacing: bool);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSView`
    #[cfg(feature = "AppKit_NSStackView")]
    unsafe impl AppKit::NSStackView {
        #[method_id(@__retain_semantics Init initWithFrame:)]
        pub unsafe fn initWithFrame(
            this: Option<Allocated<Self>>,
            frameRect: Foundation::NSRect,
        ) -> Id<Self, Shared>;
    }
);
