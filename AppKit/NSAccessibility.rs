//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit;
use crate::CoreData;
use crate::Foundation;

extern_methods!(
    /// NSWorkspaceAccessibilityDisplay
    #[cfg(feature = "AppKit_NSWorkspace")]
    unsafe impl AppKit::NSWorkspace {
        #[method(accessibilityDisplayShouldIncreaseContrast)]
        pub unsafe fn accessibilityDisplayShouldIncreaseContrast(&self) -> bool;

        #[method(accessibilityDisplayShouldDifferentiateWithoutColor)]
        pub unsafe fn accessibilityDisplayShouldDifferentiateWithoutColor(&self) -> bool;

        #[method(accessibilityDisplayShouldReduceTransparency)]
        pub unsafe fn accessibilityDisplayShouldReduceTransparency(&self) -> bool;

        #[method(accessibilityDisplayShouldReduceMotion)]
        pub unsafe fn accessibilityDisplayShouldReduceMotion(&self) -> bool;

        #[method(accessibilityDisplayShouldInvertColors)]
        pub unsafe fn accessibilityDisplayShouldInvertColors(&self) -> bool;
    }
);

extern_methods!(
    /// NSWorkspaceAccessibility
    #[cfg(feature = "AppKit_NSWorkspace")]
    unsafe impl AppKit::NSWorkspace {
        #[method(isVoiceOverEnabled)]
        pub unsafe fn isVoiceOverEnabled(&self) -> bool;

        #[method(isSwitchControlEnabled)]
        pub unsafe fn isSwitchControlEnabled(&self) -> bool;
    }
);

extern_static!(
    NSWorkspaceAccessibilityDisplayOptionsDidChangeNotification:
        &'static Foundation::NSNotificationName
);

extern_fn!(
    pub unsafe fn NSAccessibilityFrameInView(
        parentView: &AppKit::NSView,
        frame: Foundation::NSRect,
    ) -> Foundation::NSRect;
);

extern_fn!(
    pub unsafe fn NSAccessibilityPointInView(
        parentView: &AppKit::NSView,
        point: Foundation::NSPoint,
    ) -> Foundation::NSPoint;
);

extern_fn!(
    pub unsafe fn NSAccessibilitySetMayContainProtectedContent(flag: Bool) -> Bool;
);

extern_fn!(
    pub unsafe fn NSAccessibilityRoleDescription(
        role: &AppKit::NSAccessibilityRole,
        subrole: Option<&AppKit::NSAccessibilitySubrole>,
    ) -> *mut Foundation::NSString;
);

extern_fn!(
    pub unsafe fn NSAccessibilityRoleDescriptionForUIElement(
        element: &Object,
    ) -> *mut Foundation::NSString;
);

extern_fn!(
    pub unsafe fn NSAccessibilityActionDescription(
        action: &AppKit::NSAccessibilityActionName,
    ) -> *mut Foundation::NSString;
);

extern_fn!(
    pub unsafe fn NSAccessibilityRaiseBadArgumentException(
        element: Option<&Object>,
        attribute: Option<&AppKit::NSAccessibilityAttributeName>,
        value: Option<&Object>,
    );
);

extern_fn!(
    pub unsafe fn NSAccessibilityUnignoredAncestor(element: &Object) -> *mut Object;
);

extern_fn!(
    pub unsafe fn NSAccessibilityUnignoredDescendant(element: &Object) -> *mut Object;
);

extern_fn!(
    pub unsafe fn NSAccessibilityUnignoredChildren(
        originalChildren: &Foundation::NSArray,
    ) -> NonNull<Foundation::NSArray>;
);

extern_fn!(
    pub unsafe fn NSAccessibilityUnignoredChildrenForOnlyChild(
        originalChild: &Object,
    ) -> NonNull<Foundation::NSArray>;
);

extern_fn!(
    pub unsafe fn NSAccessibilityPostNotification(
        element: &Object,
        notification: &AppKit::NSAccessibilityNotificationName,
    );
);
