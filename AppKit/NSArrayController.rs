//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit;
use crate::CoreData;
use crate::Foundation;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSArrayController;

    unsafe impl ClassType for NSArrayController {
        #[inherits(AppKit::NSController, NSObject)]
        type Super = AppKit::NSObjectController;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSArrayController")]
    unsafe impl NSArrayController {
        #[method(rearrangeObjects)]
        pub unsafe fn rearrangeObjects(&self);

        #[method(automaticallyRearrangesObjects)]
        pub unsafe fn automaticallyRearrangesObjects(&self) -> bool;

        #[method(setAutomaticallyRearrangesObjects:)]
        pub unsafe fn setAutomaticallyRearrangesObjects(
            &self,
            automaticallyRearrangesObjects: bool,
        );

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other automaticRearrangementKeyPaths)]
        pub unsafe fn automaticRearrangementKeyPaths(
            &self,
        ) -> Option<Id<Foundation::NSArray<Foundation::NSString>, Shared>>;

        #[method(didChangeArrangementCriteria)]
        pub unsafe fn didChangeArrangementCriteria(&self);

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSSortDescriptor"
        ))]
        #[method_id(@__retain_semantics Other sortDescriptors)]
        pub unsafe fn sortDescriptors(
            &self,
        ) -> Id<Foundation::NSArray<Foundation::NSSortDescriptor>, Shared>;

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSSortDescriptor"
        ))]
        #[method(setSortDescriptors:)]
        pub unsafe fn setSortDescriptors(
            &self,
            sortDescriptors: &Foundation::NSArray<Foundation::NSSortDescriptor>,
        );

        #[cfg(feature = "Foundation_NSPredicate")]
        #[method_id(@__retain_semantics Other filterPredicate)]
        pub unsafe fn filterPredicate(&self) -> Option<Id<Foundation::NSPredicate, Shared>>;

        #[cfg(feature = "Foundation_NSPredicate")]
        #[method(setFilterPredicate:)]
        pub unsafe fn setFilterPredicate(&self, filterPredicate: Option<&Foundation::NSPredicate>);

        #[method(clearsFilterPredicateOnInsertion)]
        pub unsafe fn clearsFilterPredicateOnInsertion(&self) -> bool;

        #[method(setClearsFilterPredicateOnInsertion:)]
        pub unsafe fn setClearsFilterPredicateOnInsertion(
            &self,
            clearsFilterPredicateOnInsertion: bool,
        );

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other arrangeObjects:)]
        pub unsafe fn arrangeObjects(
            &self,
            objects: &Foundation::NSArray,
        ) -> Id<Foundation::NSArray, Shared>;

        #[method_id(@__retain_semantics Other arrangedObjects)]
        pub unsafe fn arrangedObjects(&self) -> Id<Object, Shared>;

        #[method(avoidsEmptySelection)]
        pub unsafe fn avoidsEmptySelection(&self) -> bool;

        #[method(setAvoidsEmptySelection:)]
        pub unsafe fn setAvoidsEmptySelection(&self, avoidsEmptySelection: bool);

        #[method(preservesSelection)]
        pub unsafe fn preservesSelection(&self) -> bool;

        #[method(setPreservesSelection:)]
        pub unsafe fn setPreservesSelection(&self, preservesSelection: bool);

        #[method(selectsInsertedObjects)]
        pub unsafe fn selectsInsertedObjects(&self) -> bool;

        #[method(setSelectsInsertedObjects:)]
        pub unsafe fn setSelectsInsertedObjects(&self, selectsInsertedObjects: bool);

        #[method(alwaysUsesMultipleValuesMarker)]
        pub unsafe fn alwaysUsesMultipleValuesMarker(&self) -> bool;

        #[method(setAlwaysUsesMultipleValuesMarker:)]
        pub unsafe fn setAlwaysUsesMultipleValuesMarker(
            &self,
            alwaysUsesMultipleValuesMarker: bool,
        );

        #[cfg(feature = "Foundation_NSIndexSet")]
        #[method(setSelectionIndexes:)]
        pub unsafe fn setSelectionIndexes(&self, indexes: &Foundation::NSIndexSet) -> bool;

        #[cfg(feature = "Foundation_NSIndexSet")]
        #[method_id(@__retain_semantics Other selectionIndexes)]
        pub unsafe fn selectionIndexes(&self) -> Id<Foundation::NSIndexSet, Shared>;

        #[method(setSelectionIndex:)]
        pub unsafe fn setSelectionIndex(&self, index: NSUInteger) -> bool;

        #[method(selectionIndex)]
        pub unsafe fn selectionIndex(&self) -> NSUInteger;

        #[cfg(feature = "Foundation_NSIndexSet")]
        #[method(addSelectionIndexes:)]
        pub unsafe fn addSelectionIndexes(&self, indexes: &Foundation::NSIndexSet) -> bool;

        #[cfg(feature = "Foundation_NSIndexSet")]
        #[method(removeSelectionIndexes:)]
        pub unsafe fn removeSelectionIndexes(&self, indexes: &Foundation::NSIndexSet) -> bool;

        #[cfg(feature = "Foundation_NSArray")]
        #[method(setSelectedObjects:)]
        pub unsafe fn setSelectedObjects(&self, objects: &Foundation::NSArray) -> bool;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other selectedObjects)]
        pub unsafe fn selectedObjects(&self) -> Id<Foundation::NSArray, Shared>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method(addSelectedObjects:)]
        pub unsafe fn addSelectedObjects(&self, objects: &Foundation::NSArray) -> bool;

        #[cfg(feature = "Foundation_NSArray")]
        #[method(removeSelectedObjects:)]
        pub unsafe fn removeSelectedObjects(&self, objects: &Foundation::NSArray) -> bool;

        #[method(add:)]
        pub unsafe fn add(&self, sender: Option<&Object>);

        #[method(remove:)]
        pub unsafe fn remove(&self, sender: Option<&Object>);

        #[method(insert:)]
        pub unsafe fn insert(&self, sender: Option<&Object>);

        #[method(canInsert)]
        pub unsafe fn canInsert(&self) -> bool;

        #[method(selectNext:)]
        pub unsafe fn selectNext(&self, sender: Option<&Object>);

        #[method(selectPrevious:)]
        pub unsafe fn selectPrevious(&self, sender: Option<&Object>);

        #[method(canSelectNext)]
        pub unsafe fn canSelectNext(&self) -> bool;

        #[method(canSelectPrevious)]
        pub unsafe fn canSelectPrevious(&self) -> bool;

        #[method(addObject:)]
        pub unsafe fn addObject(&self, object: &Object);

        #[cfg(feature = "Foundation_NSArray")]
        #[method(addObjects:)]
        pub unsafe fn addObjects(&self, objects: &Foundation::NSArray);

        #[method(insertObject:atArrangedObjectIndex:)]
        pub unsafe fn insertObject_atArrangedObjectIndex(&self, object: &Object, index: NSUInteger);

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSIndexSet"))]
        #[method(insertObjects:atArrangedObjectIndexes:)]
        pub unsafe fn insertObjects_atArrangedObjectIndexes(
            &self,
            objects: &Foundation::NSArray,
            indexes: &Foundation::NSIndexSet,
        );

        #[method(removeObjectAtArrangedObjectIndex:)]
        pub unsafe fn removeObjectAtArrangedObjectIndex(&self, index: NSUInteger);

        #[cfg(feature = "Foundation_NSIndexSet")]
        #[method(removeObjectsAtArrangedObjectIndexes:)]
        pub unsafe fn removeObjectsAtArrangedObjectIndexes(&self, indexes: &Foundation::NSIndexSet);

        #[method(removeObject:)]
        pub unsafe fn removeObject(&self, object: &Object);

        #[cfg(feature = "Foundation_NSArray")]
        #[method(removeObjects:)]
        pub unsafe fn removeObjects(&self, objects: &Foundation::NSArray);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObjectController`
    #[cfg(feature = "AppKit_NSArrayController")]
    unsafe impl AppKit::NSArrayController {
        #[method_id(@__retain_semantics Init initWithContent:)]
        pub unsafe fn initWithContent(
            this: Option<Allocated<Self>>,
            content: Option<&Object>,
        ) -> Id<Self, Shared>;
    }
);
