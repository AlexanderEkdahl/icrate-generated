//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit;
use crate::CoreData;
use crate::Foundation;

extern_static!(NSFontAttributeName: &'static Foundation::NSAttributedStringKey);

extern_static!(NSParagraphStyleAttributeName: &'static Foundation::NSAttributedStringKey);

extern_static!(NSForegroundColorAttributeName: &'static Foundation::NSAttributedStringKey);

extern_static!(NSBackgroundColorAttributeName: &'static Foundation::NSAttributedStringKey);

extern_static!(NSLigatureAttributeName: &'static Foundation::NSAttributedStringKey);

extern_static!(NSKernAttributeName: &'static Foundation::NSAttributedStringKey);

extern_static!(NSTrackingAttributeName: &'static Foundation::NSAttributedStringKey);

extern_static!(NSStrikethroughStyleAttributeName: &'static Foundation::NSAttributedStringKey);

extern_static!(NSUnderlineStyleAttributeName: &'static Foundation::NSAttributedStringKey);

extern_static!(NSStrokeColorAttributeName: &'static Foundation::NSAttributedStringKey);

extern_static!(NSStrokeWidthAttributeName: &'static Foundation::NSAttributedStringKey);

extern_static!(NSShadowAttributeName: &'static Foundation::NSAttributedStringKey);

extern_static!(NSTextEffectAttributeName: &'static Foundation::NSAttributedStringKey);

extern_static!(NSAttachmentAttributeName: &'static Foundation::NSAttributedStringKey);

extern_static!(NSLinkAttributeName: &'static Foundation::NSAttributedStringKey);

extern_static!(NSBaselineOffsetAttributeName: &'static Foundation::NSAttributedStringKey);

extern_static!(NSUnderlineColorAttributeName: &'static Foundation::NSAttributedStringKey);

extern_static!(NSStrikethroughColorAttributeName: &'static Foundation::NSAttributedStringKey);

extern_static!(NSObliquenessAttributeName: &'static Foundation::NSAttributedStringKey);

extern_static!(NSExpansionAttributeName: &'static Foundation::NSAttributedStringKey);

extern_static!(NSWritingDirectionAttributeName: &'static Foundation::NSAttributedStringKey);

extern_static!(NSVerticalGlyphFormAttributeName: &'static Foundation::NSAttributedStringKey);

extern_static!(NSCursorAttributeName: &'static Foundation::NSAttributedStringKey);

extern_static!(NSToolTipAttributeName: &'static Foundation::NSAttributedStringKey);

extern_static!(NSMarkedClauseSegmentAttributeName: &'static Foundation::NSAttributedStringKey);

extern_static!(NSTextAlternativesAttributeName: &'static Foundation::NSAttributedStringKey);

extern_static!(NSSpellingStateAttributeName: &'static Foundation::NSAttributedStringKey);

extern_static!(NSSuperscriptAttributeName: &'static Foundation::NSAttributedStringKey);

extern_static!(NSGlyphInfoAttributeName: &'static Foundation::NSAttributedStringKey);

ns_options!(
    #[underlying(NSInteger)]
    pub enum NSUnderlineStyle {
        NSUnderlineStyleNone = 0x00,
        NSUnderlineStyleSingle = 0x01,
        NSUnderlineStyleThick = 0x02,
        NSUnderlineStyleDouble = 0x09,
        NSUnderlineStylePatternSolid = 0x0000,
        NSUnderlineStylePatternDot = 0x0100,
        NSUnderlineStylePatternDash = 0x0200,
        NSUnderlineStylePatternDashDot = 0x0300,
        NSUnderlineStylePatternDashDotDot = 0x0400,
        NSUnderlineStyleByWord = 0x8000,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSWritingDirectionFormatType {
        NSWritingDirectionEmbedding = 0 << 1,
        NSWritingDirectionOverride = 1 << 1,
    }
);

typed_enum!(
    pub type NSTextEffectStyle = Foundation::NSString;
);

extern_static!(NSTextEffectLetterpressStyle: &'static AppKit::NSTextEffectStyle);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSSpellingState {
        NSSpellingStateSpellingFlag = 1 << 0,
        NSSpellingStateGrammarFlag = 1 << 1,
    }
);

extern_methods!(
    /// NSAttributedStringAttributeFixing
    #[cfg(feature = "Foundation_NSMutableAttributedString")]
    unsafe impl NSMutableAttributedString {
        #[method(fixAttributesInRange:)]
        pub unsafe fn fixAttributesInRange(&self, range: NSRange);

        #[method(fixFontAttributeInRange:)]
        pub unsafe fn fixFontAttributeInRange(&self, range: NSRange);

        #[method(fixParagraphStyleAttributeInRange:)]
        pub unsafe fn fixParagraphStyleAttributeInRange(&self, range: NSRange);

        #[method(fixAttachmentAttributeInRange:)]
        pub unsafe fn fixAttachmentAttributeInRange(&self, range: NSRange);
    }
);

typed_extensible_enum!(
    pub type NSAttributedStringDocumentType = Foundation::NSString;
);

extern_static!(NSPlainTextDocumentType: &'static AppKit::NSAttributedStringDocumentType);

extern_static!(NSRTFTextDocumentType: &'static AppKit::NSAttributedStringDocumentType);

extern_static!(NSRTFDTextDocumentType: &'static AppKit::NSAttributedStringDocumentType);

extern_static!(NSHTMLTextDocumentType: &'static AppKit::NSAttributedStringDocumentType);

extern_static!(NSMacSimpleTextDocumentType: &'static AppKit::NSAttributedStringDocumentType);

extern_static!(NSDocFormatTextDocumentType: &'static AppKit::NSAttributedStringDocumentType);

extern_static!(NSWordMLTextDocumentType: &'static AppKit::NSAttributedStringDocumentType);

extern_static!(NSWebArchiveTextDocumentType: &'static AppKit::NSAttributedStringDocumentType);

extern_static!(NSOfficeOpenXMLTextDocumentType: &'static AppKit::NSAttributedStringDocumentType);

extern_static!(NSOpenDocumentTextDocumentType: &'static AppKit::NSAttributedStringDocumentType);

typed_enum!(
    pub type NSTextLayoutSectionKey = Foundation::NSString;
);

extern_static!(NSTextLayoutSectionOrientation: &'static AppKit::NSTextLayoutSectionKey);

extern_static!(NSTextLayoutSectionRange: &'static AppKit::NSTextLayoutSectionKey);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSTextScalingType {
        NSTextScalingStandard = 0,
        NSTextScalingiOS = 1,
    }
);

typed_extensible_enum!(
    pub type NSAttributedStringDocumentAttributeKey = Foundation::NSString;
);

extern_static!(
    NSDocumentTypeDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey
);

extern_static!(
    NSConvertedDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey
);

extern_static!(
    NSCocoaVersionDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey
);

extern_static!(
    NSFileTypeDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey
);

extern_static!(NSTitleDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey);

extern_static!(NSCompanyDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey);

extern_static!(
    NSCopyrightDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey
);

extern_static!(NSSubjectDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey);

extern_static!(NSAuthorDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey);

extern_static!(
    NSKeywordsDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey
);

extern_static!(NSCommentDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey);

extern_static!(NSEditorDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey);

extern_static!(
    NSCreationTimeDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey
);

extern_static!(
    NSModificationTimeDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey
);

extern_static!(NSManagerDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey);

extern_static!(
    NSCategoryDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey
);

extern_static!(
    NSAppearanceDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey
);

extern_static!(
    NSCharacterEncodingDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey
);

extern_static!(
    NSDefaultAttributesDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey
);

extern_static!(
    NSPaperSizeDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey
);

extern_static!(
    NSLeftMarginDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey
);

extern_static!(
    NSRightMarginDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey
);

extern_static!(
    NSTopMarginDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey
);

extern_static!(
    NSBottomMarginDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey
);

extern_static!(
    NSViewSizeDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey
);

extern_static!(
    NSViewZoomDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey
);

extern_static!(
    NSViewModeDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey
);

extern_static!(
    NSReadOnlyDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey
);

extern_static!(
    NSBackgroundColorDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey
);

extern_static!(
    NSHyphenationFactorDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey
);

extern_static!(
    NSDefaultTabIntervalDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey
);

extern_static!(
    NSTextLayoutSectionsAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey
);

extern_static!(
    NSExcludedElementsDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey
);

extern_static!(
    NSTextEncodingNameDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey
);

extern_static!(
    NSPrefixSpacesDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey
);

extern_static!(
    NSTextScalingDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey
);

extern_static!(
    NSSourceTextScalingDocumentAttribute: &'static AppKit::NSAttributedStringDocumentAttributeKey
);

typed_extensible_enum!(
    pub type NSAttributedStringDocumentReadingOptionKey = Foundation::NSString;
);

extern_static!(
    NSDocumentTypeDocumentOption: &'static AppKit::NSAttributedStringDocumentReadingOptionKey
);

extern_static!(
    NSDefaultAttributesDocumentOption: &'static AppKit::NSAttributedStringDocumentReadingOptionKey
);

extern_static!(
    NSCharacterEncodingDocumentOption: &'static AppKit::NSAttributedStringDocumentReadingOptionKey
);

extern_static!(
    NSTextEncodingNameDocumentOption: &'static AppKit::NSAttributedStringDocumentReadingOptionKey
);

extern_static!(
    NSBaseURLDocumentOption: &'static AppKit::NSAttributedStringDocumentReadingOptionKey
);

extern_static!(
    NSTimeoutDocumentOption: &'static AppKit::NSAttributedStringDocumentReadingOptionKey
);

extern_static!(
    NSWebPreferencesDocumentOption: &'static AppKit::NSAttributedStringDocumentReadingOptionKey
);

extern_static!(
    NSWebResourceLoadDelegateDocumentOption:
        &'static AppKit::NSAttributedStringDocumentReadingOptionKey
);

extern_static!(
    NSTextSizeMultiplierDocumentOption: &'static AppKit::NSAttributedStringDocumentReadingOptionKey
);

extern_static!(
    NSFileTypeDocumentOption: &'static AppKit::NSAttributedStringDocumentReadingOptionKey
);

extern_static!(
    NSTargetTextScalingDocumentOption: &'static AppKit::NSAttributedStringDocumentReadingOptionKey
);

extern_static!(
    NSSourceTextScalingDocumentOption: &'static AppKit::NSAttributedStringDocumentReadingOptionKey
);

extern_methods!(
    /// NSAttributedStringDocumentFormats
    #[cfg(feature = "Foundation_NSAttributedString")]
    unsafe impl NSAttributedString {
        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSURL"
        ))]
        #[method_id(@__retain_semantics Init initWithURL:options:documentAttributes:error:_)]
        pub unsafe fn initWithURL_options_documentAttributes_error(
            this: Option<Allocated<Self>>,
            url: &Foundation::NSURL,
            options: &Foundation::NSDictionary<
                AppKit::NSAttributedStringDocumentReadingOptionKey,
                Object,
            >,
            dict: *mut *mut Foundation::NSDictionary<
                AppKit::NSAttributedStringDocumentAttributeKey,
                Object,
            >,
        ) -> Result<Id<Self, Shared>, Id<NSError, Shared>>;

        #[cfg(all(
            feature = "Foundation_NSData",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError"
        ))]
        #[method_id(@__retain_semantics Init initWithData:options:documentAttributes:error:_)]
        pub unsafe fn initWithData_options_documentAttributes_error(
            this: Option<Allocated<Self>>,
            data: &Foundation::NSData,
            options: &Foundation::NSDictionary<
                AppKit::NSAttributedStringDocumentReadingOptionKey,
                Object,
            >,
            dict: *mut *mut Foundation::NSDictionary<
                AppKit::NSAttributedStringDocumentAttributeKey,
                Object,
            >,
        ) -> Result<Id<Self, Shared>, Id<NSError, Shared>>;

        #[cfg(all(
            feature = "Foundation_NSData",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError"
        ))]
        #[method_id(@__retain_semantics Other dataFromRange:documentAttributes:error:_)]
        pub unsafe fn dataFromRange_documentAttributes_error(
            &self,
            range: NSRange,
            dict: &Foundation::NSDictionary<AppKit::NSAttributedStringDocumentAttributeKey, Object>,
        ) -> Result<Id<Foundation::NSData, Shared>, Id<NSError, Shared>>;

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSFileWrapper"
        ))]
        #[method_id(@__retain_semantics Other fileWrapperFromRange:documentAttributes:error:_)]
        pub unsafe fn fileWrapperFromRange_documentAttributes_error(
            &self,
            range: NSRange,
            dict: &Foundation::NSDictionary<AppKit::NSAttributedStringDocumentAttributeKey, Object>,
        ) -> Result<Id<Foundation::NSFileWrapper, Shared>, Id<NSError, Shared>>;

        #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSDictionary"))]
        #[method_id(@__retain_semantics Init initWithRTF:documentAttributes:)]
        pub unsafe fn initWithRTF_documentAttributes(
            this: Option<Allocated<Self>>,
            data: &Foundation::NSData,
            dict: *mut *mut Foundation::NSDictionary<
                AppKit::NSAttributedStringDocumentAttributeKey,
                Object,
            >,
        ) -> Option<Id<Self, Shared>>;

        #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSDictionary"))]
        #[method_id(@__retain_semantics Init initWithRTFD:documentAttributes:)]
        pub unsafe fn initWithRTFD_documentAttributes(
            this: Option<Allocated<Self>>,
            data: &Foundation::NSData,
            dict: *mut *mut Foundation::NSDictionary<
                AppKit::NSAttributedStringDocumentAttributeKey,
                Object,
            >,
        ) -> Option<Id<Self, Shared>>;

        #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSDictionary"))]
        #[method_id(@__retain_semantics Init initWithHTML:documentAttributes:)]
        pub unsafe fn initWithHTML_documentAttributes(
            this: Option<Allocated<Self>>,
            data: &Foundation::NSData,
            dict: *mut *mut Foundation::NSDictionary<
                AppKit::NSAttributedStringDocumentAttributeKey,
                Object,
            >,
        ) -> Option<Id<Self, Shared>>;

        #[cfg(all(
            feature = "Foundation_NSData",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSURL"
        ))]
        #[method_id(@__retain_semantics Init initWithHTML:baseURL:documentAttributes:)]
        pub unsafe fn initWithHTML_baseURL_documentAttributes(
            this: Option<Allocated<Self>>,
            data: &Foundation::NSData,
            base: &Foundation::NSURL,
            dict: *mut *mut Foundation::NSDictionary<
                AppKit::NSAttributedStringDocumentAttributeKey,
                Object,
            >,
        ) -> Option<Id<Self, Shared>>;

        #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSDictionary"))]
        #[method_id(@__retain_semantics Init initWithDocFormat:documentAttributes:)]
        pub unsafe fn initWithDocFormat_documentAttributes(
            this: Option<Allocated<Self>>,
            data: &Foundation::NSData,
            dict: *mut *mut Foundation::NSDictionary<
                AppKit::NSAttributedStringDocumentAttributeKey,
                Object,
            >,
        ) -> Option<Id<Self, Shared>>;

        #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSDictionary"))]
        #[method_id(@__retain_semantics Init initWithHTML:options:documentAttributes:)]
        pub unsafe fn initWithHTML_options_documentAttributes(
            this: Option<Allocated<Self>>,
            data: &Foundation::NSData,
            options: &Foundation::NSDictionary<
                AppKit::NSAttributedStringDocumentReadingOptionKey,
                Object,
            >,
            dict: *mut *mut Foundation::NSDictionary<
                AppKit::NSAttributedStringDocumentAttributeKey,
                Object,
            >,
        ) -> Option<Id<Self, Shared>>;

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSFileWrapper"
        ))]
        #[method_id(@__retain_semantics Init initWithRTFDFileWrapper:documentAttributes:)]
        pub unsafe fn initWithRTFDFileWrapper_documentAttributes(
            this: Option<Allocated<Self>>,
            wrapper: &Foundation::NSFileWrapper,
            dict: *mut *mut Foundation::NSDictionary<
                AppKit::NSAttributedStringDocumentAttributeKey,
                Object,
            >,
        ) -> Option<Id<Self, Shared>>;

        #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSDictionary"))]
        #[method_id(@__retain_semantics Other RTFFromRange:documentAttributes:)]
        pub unsafe fn RTFFromRange_documentAttributes(
            &self,
            range: NSRange,
            dict: &Foundation::NSDictionary<AppKit::NSAttributedStringDocumentAttributeKey, Object>,
        ) -> Option<Id<Foundation::NSData, Shared>>;

        #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSDictionary"))]
        #[method_id(@__retain_semantics Other RTFDFromRange:documentAttributes:)]
        pub unsafe fn RTFDFromRange_documentAttributes(
            &self,
            range: NSRange,
            dict: &Foundation::NSDictionary<AppKit::NSAttributedStringDocumentAttributeKey, Object>,
        ) -> Option<Id<Foundation::NSData, Shared>>;

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSFileWrapper"
        ))]
        #[method_id(@__retain_semantics Other RTFDFileWrapperFromRange:documentAttributes:)]
        pub unsafe fn RTFDFileWrapperFromRange_documentAttributes(
            &self,
            range: NSRange,
            dict: &Foundation::NSDictionary<AppKit::NSAttributedStringDocumentAttributeKey, Object>,
        ) -> Option<Id<Foundation::NSFileWrapper, Shared>>;

        #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSDictionary"))]
        #[method_id(@__retain_semantics Other docFormatFromRange:documentAttributes:)]
        pub unsafe fn docFormatFromRange_documentAttributes(
            &self,
            range: NSRange,
            dict: &Foundation::NSDictionary<AppKit::NSAttributedStringDocumentAttributeKey, Object>,
        ) -> Option<Id<Foundation::NSData, Shared>>;
    }
);

extern_methods!(
    /// NSMutableAttributedStringDocumentFormats
    #[cfg(feature = "Foundation_NSMutableAttributedString")]
    unsafe impl NSMutableAttributedString {
        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSURL"
        ))]
        #[method(readFromURL:options:documentAttributes:error:_)]
        pub unsafe fn readFromURL_options_documentAttributes_error(
            &self,
            url: &Foundation::NSURL,
            opts: &Foundation::NSDictionary<
                AppKit::NSAttributedStringDocumentReadingOptionKey,
                Object,
            >,
            dict: *mut *mut Foundation::NSDictionary<
                AppKit::NSAttributedStringDocumentAttributeKey,
                Object,
            >,
        ) -> Result<(), Id<NSError, Shared>>;

        #[cfg(all(
            feature = "Foundation_NSData",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError"
        ))]
        #[method(readFromData:options:documentAttributes:error:_)]
        pub unsafe fn readFromData_options_documentAttributes_error(
            &self,
            data: &Foundation::NSData,
            opts: &Foundation::NSDictionary<
                AppKit::NSAttributedStringDocumentReadingOptionKey,
                Object,
            >,
            dict: *mut *mut Foundation::NSDictionary<
                AppKit::NSAttributedStringDocumentAttributeKey,
                Object,
            >,
        ) -> Result<(), Id<NSError, Shared>>;
    }
);

extern_methods!(
    /// NSAttributedStringKitAdditions
    #[cfg(feature = "Foundation_NSAttributedString")]
    unsafe impl NSAttributedString {
        #[cfg(feature = "Foundation_NSDictionary")]
        #[method_id(@__retain_semantics Other fontAttributesInRange:)]
        pub unsafe fn fontAttributesInRange(
            &self,
            range: NSRange,
        ) -> Id<Foundation::NSDictionary<Foundation::NSAttributedStringKey, Object>, Shared>;

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method_id(@__retain_semantics Other rulerAttributesInRange:)]
        pub unsafe fn rulerAttributesInRange(
            &self,
            range: NSRange,
        ) -> Id<Foundation::NSDictionary<Foundation::NSAttributedStringKey, Object>, Shared>;

        #[method(containsAttachmentsInRange:)]
        pub unsafe fn containsAttachmentsInRange(&self, range: NSRange) -> bool;

        #[method(lineBreakBeforeIndex:withinRange:)]
        pub unsafe fn lineBreakBeforeIndex_withinRange(
            &self,
            location: NSUInteger,
            aRange: NSRange,
        ) -> NSUInteger;

        #[method(lineBreakByHyphenatingBeforeIndex:withinRange:)]
        pub unsafe fn lineBreakByHyphenatingBeforeIndex_withinRange(
            &self,
            location: NSUInteger,
            aRange: NSRange,
        ) -> NSUInteger;

        #[method(doubleClickAtIndex:)]
        pub unsafe fn doubleClickAtIndex(&self, location: NSUInteger) -> NSRange;

        #[method(nextWordFromIndex:forward:)]
        pub unsafe fn nextWordFromIndex_forward(
            &self,
            location: NSUInteger,
            isForward: bool,
        ) -> NSUInteger;

        #[cfg(feature = "AppKit_NSTextBlock")]
        #[method(rangeOfTextBlock:atIndex:)]
        pub unsafe fn rangeOfTextBlock_atIndex(
            &self,
            block: &AppKit::NSTextBlock,
            location: NSUInteger,
        ) -> NSRange;

        #[cfg(feature = "AppKit_NSTextTable")]
        #[method(rangeOfTextTable:atIndex:)]
        pub unsafe fn rangeOfTextTable_atIndex(
            &self,
            table: &AppKit::NSTextTable,
            location: NSUInteger,
        ) -> NSRange;

        #[cfg(feature = "AppKit_NSTextList")]
        #[method(rangeOfTextList:atIndex:)]
        pub unsafe fn rangeOfTextList_atIndex(
            &self,
            list: &AppKit::NSTextList,
            location: NSUInteger,
        ) -> NSRange;

        #[cfg(feature = "AppKit_NSTextList")]
        #[method(itemNumberInTextList:atIndex:)]
        pub unsafe fn itemNumberInTextList_atIndex(
            &self,
            list: &AppKit::NSTextList,
            location: NSUInteger,
        ) -> NSInteger;
    }
);

extern_methods!(
    /// NSAttributedStringPasteboardAdditions
    #[cfg(feature = "Foundation_NSAttributedString")]
    unsafe impl NSAttributedString {
        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other textTypes)]
        pub unsafe fn textTypes() -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other textUnfilteredTypes)]
        pub unsafe fn textUnfilteredTypes() -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;
    }
);

extern_methods!(
    /// NSMutableAttributedStringKitAdditions
    #[cfg(feature = "Foundation_NSMutableAttributedString")]
    unsafe impl NSMutableAttributedString {
        #[method(superscriptRange:)]
        pub unsafe fn superscriptRange(&self, range: NSRange);

        #[method(subscriptRange:)]
        pub unsafe fn subscriptRange(&self, range: NSRange);

        #[method(unscriptRange:)]
        pub unsafe fn unscriptRange(&self, range: NSRange);

        #[method(applyFontTraits:range:)]
        pub unsafe fn applyFontTraits_range(&self, traitMask: NSFontTraitMask, range: NSRange);

        #[method(setAlignment:range:)]
        pub unsafe fn setAlignment_range(&self, alignment: NSTextAlignment, range: NSRange);

        #[method(setBaseWritingDirection:range:)]
        pub unsafe fn setBaseWritingDirection_range(
            &self,
            writingDirection: NSWritingDirection,
            range: NSRange,
        );
    }
);

extern_static!(NSUnderlinePatternSolid: NSUnderlineStyle = NSUnderlineStylePatternSolid);

extern_static!(NSUnderlinePatternDot: NSUnderlineStyle = NSUnderlineStylePatternDot);

extern_static!(NSUnderlinePatternDash: NSUnderlineStyle = NSUnderlineStylePatternDash);

extern_static!(NSUnderlinePatternDashDot: NSUnderlineStyle = NSUnderlineStylePatternDashDot);

extern_static!(NSUnderlinePatternDashDotDot: NSUnderlineStyle = NSUnderlineStylePatternDashDotDot);

extern_static!(NSUnderlineByWord: NSUnderlineStyle = NSUnderlineStyleByWord);

extern_static!(NSCharacterShapeAttributeName: &'static Foundation::NSAttributedStringKey);

extern_static!(NSUsesScreenFontsDocumentAttribute: &'static Foundation::NSAttributedStringKey);

extern_enum!(
    #[underlying(c_uint)]
    pub enum {
        NSNoUnderlineStyle = 0,
        NSSingleUnderlineStyle = 1,
    }
);

extern_static!(NSUnderlineStrikethroughMask: NSUInteger);

extern_static!(NSUnderlineByWordMask: NSUInteger);

extern_methods!(
    /// NSDeprecatedKitAdditions
    #[cfg(feature = "Foundation_NSAttributedString")]
    unsafe impl NSAttributedString {
        #[method(containsAttachments)]
        pub unsafe fn containsAttachments(&self) -> bool;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other textFileTypes)]
        pub unsafe fn textFileTypes() -> Id<Foundation::NSArray, Shared>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other textPasteboardTypes)]
        pub unsafe fn textPasteboardTypes() -> Id<Foundation::NSArray, Shared>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other textUnfilteredFileTypes)]
        pub unsafe fn textUnfilteredFileTypes() -> Id<Foundation::NSArray, Shared>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other textUnfilteredPasteboardTypes)]
        pub unsafe fn textUnfilteredPasteboardTypes() -> Id<Foundation::NSArray, Shared>;

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSURL"))]
        #[method_id(@__retain_semantics Init initWithURL:documentAttributes:)]
        pub unsafe fn initWithURL_documentAttributes(
            this: Option<Allocated<Self>>,
            url: &Foundation::NSURL,
            dict: *mut *mut Foundation::NSDictionary,
        ) -> Option<Id<Self, Shared>>;

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Init initWithPath:documentAttributes:)]
        pub unsafe fn initWithPath_documentAttributes(
            this: Option<Allocated<Self>>,
            path: &Foundation::NSString,
            dict: *mut *mut Foundation::NSDictionary,
        ) -> Option<Id<Self, Shared>>;

        #[cfg(feature = "Foundation_NSURL")]
        #[method_id(@__retain_semantics Other URLAtIndex:effectiveRange:)]
        pub unsafe fn URLAtIndex_effectiveRange(
            &self,
            location: NSUInteger,
            effectiveRange: NSRangePointer,
        ) -> Option<Id<Foundation::NSURL, Shared>>;
    }
);

extern_methods!(
    /// NSDeprecatedKitAdditions
    #[cfg(feature = "Foundation_NSMutableAttributedString")]
    unsafe impl NSMutableAttributedString {
        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSURL"))]
        #[method(readFromURL:options:documentAttributes:)]
        pub unsafe fn readFromURL_options_documentAttributes(
            &self,
            url: &Foundation::NSURL,
            options: &Foundation::NSDictionary,
            dict: *mut *mut Foundation::NSDictionary,
        ) -> bool;

        #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSDictionary"))]
        #[method(readFromData:options:documentAttributes:)]
        pub unsafe fn readFromData_options_documentAttributes(
            &self,
            data: &Foundation::NSData,
            options: &Foundation::NSDictionary,
            dict: *mut *mut Foundation::NSDictionary,
        ) -> bool;
    }
);
