//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit;
use crate::CoreData;
use crate::Foundation;

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSPrinterTableStatus {
        NSPrinterTableOK = 0,
        NSPrinterTableNotFound = 1,
        NSPrinterTableError = 2,
    }
);

typed_extensible_enum!(
    pub type NSPrinterTypeName = Foundation::NSString;
);

typed_extensible_enum!(
    pub type NSPrinterPaperName = Foundation::NSString;
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSPrinter;

    unsafe impl ClassType for NSPrinter {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSPrinter")]
    unsafe impl NSPrinter {
        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other printerNames)]
        pub unsafe fn printerNames() -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other printerTypes)]
        pub unsafe fn printerTypes() -> Id<Foundation::NSArray<AppKit::NSPrinterTypeName>, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other printerWithName:)]
        pub unsafe fn printerWithName(
            name: &Foundation::NSString,
        ) -> Option<Id<AppKit::NSPrinter, Shared>>;

        #[method_id(@__retain_semantics Other printerWithType:)]
        pub unsafe fn printerWithType(
            type_: &AppKit::NSPrinterTypeName,
        ) -> Option<Id<AppKit::NSPrinter, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other name)]
        pub unsafe fn name(&self) -> Id<Foundation::NSString, Shared>;

        #[method_id(@__retain_semantics Other type)]
        pub unsafe fn type_(&self) -> Id<AppKit::NSPrinterTypeName, Shared>;

        #[method(languageLevel)]
        pub unsafe fn languageLevel(&self) -> NSInteger;

        #[method(pageSizeForPaper:)]
        pub unsafe fn pageSizeForPaper(&self, paperName: &AppKit::NSPrinterPaperName) -> NSSize;

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method_id(@__retain_semantics Other deviceDescription)]
        pub unsafe fn deviceDescription(
            &self,
        ) -> Id<Foundation::NSDictionary<AppKit::NSDeviceDescriptionKey, Object>, Shared>;
    }
);

extern_methods!(
    /// NSDeprecated
    #[cfg(feature = "AppKit_NSPrinter")]
    unsafe impl NSPrinter {
        #[cfg(feature = "Foundation_NSString")]
        #[method(statusForTable:)]
        pub unsafe fn statusForTable(
            &self,
            tableName: &Foundation::NSString,
        ) -> NSPrinterTableStatus;

        #[cfg(feature = "Foundation_NSString")]
        #[method(isKey:inTable:)]
        pub unsafe fn isKey_inTable(
            &self,
            key: Option<&Foundation::NSString>,
            table: &Foundation::NSString,
        ) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method(booleanForKey:inTable:)]
        pub unsafe fn booleanForKey_inTable(
            &self,
            key: Option<&Foundation::NSString>,
            table: &Foundation::NSString,
        ) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method(floatForKey:inTable:)]
        pub unsafe fn floatForKey_inTable(
            &self,
            key: Option<&Foundation::NSString>,
            table: &Foundation::NSString,
        ) -> c_float;

        #[cfg(feature = "Foundation_NSString")]
        #[method(intForKey:inTable:)]
        pub unsafe fn intForKey_inTable(
            &self,
            key: Option<&Foundation::NSString>,
            table: &Foundation::NSString,
        ) -> c_int;

        #[cfg(feature = "Foundation_NSString")]
        #[method(rectForKey:inTable:)]
        pub unsafe fn rectForKey_inTable(
            &self,
            key: Option<&Foundation::NSString>,
            table: &Foundation::NSString,
        ) -> NSRect;

        #[cfg(feature = "Foundation_NSString")]
        #[method(sizeForKey:inTable:)]
        pub unsafe fn sizeForKey_inTable(
            &self,
            key: Option<&Foundation::NSString>,
            table: &Foundation::NSString,
        ) -> NSSize;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other stringForKey:inTable:)]
        pub unsafe fn stringForKey_inTable(
            &self,
            key: Option<&Foundation::NSString>,
            table: &Foundation::NSString,
        ) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other stringListForKey:inTable:)]
        pub unsafe fn stringListForKey_inTable(
            &self,
            key: Option<&Foundation::NSString>,
            table: &Foundation::NSString,
        ) -> Option<Id<Foundation::NSArray, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(imageRectForPaper:)]
        pub unsafe fn imageRectForPaper(&self, paperName: Option<&Foundation::NSString>) -> NSRect;

        #[method(acceptsBinary)]
        pub unsafe fn acceptsBinary(&self) -> bool;

        #[method(isColor)]
        pub unsafe fn isColor(&self) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method(isFontAvailable:)]
        pub unsafe fn isFontAvailable(&self, faceName: Option<&Foundation::NSString>) -> bool;

        #[method(isOutputStackInReverseOrder)]
        pub unsafe fn isOutputStackInReverseOrder(&self) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other printerWithName:domain:includeUnavailable:)]
        pub unsafe fn printerWithName_domain_includeUnavailable(
            name: &Foundation::NSString,
            domain: Option<&Foundation::NSString>,
            flag: bool,
        ) -> Option<Id<AppKit::NSPrinter, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other domain)]
        pub unsafe fn domain(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other host)]
        pub unsafe fn host(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other note)]
        pub unsafe fn note(&self) -> Id<Foundation::NSString, Shared>;
    }
);
