//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit;
use crate::CoreData;
use crate::Foundation;

typed_extensible_enum!(
    pub type NSSharingServiceName = Foundation::NSString;
);

extern_static!(NSSharingServiceNameComposeEmail: &'static AppKit::NSSharingServiceName);

extern_static!(NSSharingServiceNameComposeMessage: &'static AppKit::NSSharingServiceName);

extern_static!(NSSharingServiceNameSendViaAirDrop: &'static AppKit::NSSharingServiceName);

extern_static!(NSSharingServiceNameAddToSafariReadingList: &'static AppKit::NSSharingServiceName);

extern_static!(NSSharingServiceNameAddToIPhoto: &'static AppKit::NSSharingServiceName);

extern_static!(NSSharingServiceNameAddToAperture: &'static AppKit::NSSharingServiceName);

extern_static!(NSSharingServiceNameUseAsDesktopPicture: &'static AppKit::NSSharingServiceName);

extern_static!(NSSharingServiceNamePostOnFacebook: &'static AppKit::NSSharingServiceName);

extern_static!(NSSharingServiceNamePostOnTwitter: &'static AppKit::NSSharingServiceName);

extern_static!(NSSharingServiceNamePostOnSinaWeibo: &'static AppKit::NSSharingServiceName);

extern_static!(NSSharingServiceNamePostOnTencentWeibo: &'static AppKit::NSSharingServiceName);

extern_static!(NSSharingServiceNamePostOnLinkedIn: &'static AppKit::NSSharingServiceName);

extern_static!(NSSharingServiceNameUseAsTwitterProfileImage: &'static AppKit::NSSharingServiceName);

extern_static!(
    NSSharingServiceNameUseAsFacebookProfileImage: &'static AppKit::NSSharingServiceName
);

extern_static!(
    NSSharingServiceNameUseAsLinkedInProfileImage: &'static AppKit::NSSharingServiceName
);

extern_static!(NSSharingServiceNamePostImageOnFlickr: &'static AppKit::NSSharingServiceName);

extern_static!(NSSharingServiceNamePostVideoOnVimeo: &'static AppKit::NSSharingServiceName);

extern_static!(NSSharingServiceNamePostVideoOnYouku: &'static AppKit::NSSharingServiceName);

extern_static!(NSSharingServiceNamePostVideoOnTudou: &'static AppKit::NSSharingServiceName);

extern_static!(NSSharingServiceNameCloudSharing: &'static AppKit::NSSharingServiceName);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSSharingService;

    unsafe impl ClassType for NSSharingService {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSSharingService")]
    unsafe impl NSSharingService {
        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(&self) -> Option<Id<AppKit::NSSharingServiceDelegate, Shared>>;

        #[method(setDelegate:)]
        pub unsafe fn setDelegate(&self, delegate: Option<&AppKit::NSSharingServiceDelegate>);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other title)]
        pub unsafe fn title(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "AppKit_NSImage")]
        #[method_id(@__retain_semantics Other image)]
        pub unsafe fn image(&self) -> Id<AppKit::NSImage, Shared>;

        #[cfg(feature = "AppKit_NSImage")]
        #[method_id(@__retain_semantics Other alternateImage)]
        pub unsafe fn alternateImage(&self) -> Option<Id<AppKit::NSImage, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other menuItemTitle)]
        pub unsafe fn menuItemTitle(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setMenuItemTitle:)]
        pub unsafe fn setMenuItemTitle(&self, menuItemTitle: &Foundation::NSString);

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other recipients)]
        pub unsafe fn recipients(
            &self,
        ) -> Option<Id<Foundation::NSArray<Foundation::NSString>, Shared>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method(setRecipients:)]
        pub unsafe fn setRecipients(
            &self,
            recipients: Option<&Foundation::NSArray<Foundation::NSString>>,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other subject)]
        pub unsafe fn subject(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setSubject:)]
        pub unsafe fn setSubject(&self, subject: Option<&Foundation::NSString>);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other messageBody)]
        pub unsafe fn messageBody(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "Foundation_NSURL")]
        #[method_id(@__retain_semantics Other permanentLink)]
        pub unsafe fn permanentLink(&self) -> Option<Id<Foundation::NSURL, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other accountName)]
        pub unsafe fn accountName(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSURL"))]
        #[method_id(@__retain_semantics Other attachmentFileURLs)]
        pub unsafe fn attachmentFileURLs(
            &self,
        ) -> Option<Id<Foundation::NSArray<Foundation::NSURL>, Shared>>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other sharingServicesForItems:)]
        pub unsafe fn sharingServicesForItems(
            items: &Foundation::NSArray,
        ) -> Id<Foundation::NSArray<AppKit::NSSharingService>, Shared>;

        #[method_id(@__retain_semantics Other sharingServiceNamed:)]
        pub unsafe fn sharingServiceNamed(
            serviceName: &AppKit::NSSharingServiceName,
        ) -> Option<Id<AppKit::NSSharingService, Shared>>;

        #[cfg(all(feature = "AppKit_NSImage", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Init initWithTitle:image:alternateImage:handler:)]
        pub unsafe fn initWithTitle_image_alternateImage_handler(
            this: Option<Allocated<Self>>,
            title: &Foundation::NSString,
            image: &AppKit::NSImage,
            alternateImage: Option<&AppKit::NSImage>,
            block: &Block<(), ()>,
        ) -> Id<Self, Shared>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self, Shared>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method(canPerformWithItems:)]
        pub unsafe fn canPerformWithItems(&self, items: Option<&Foundation::NSArray>) -> bool;

        #[cfg(feature = "Foundation_NSArray")]
        #[method(performWithItems:)]
        pub unsafe fn performWithItems(&self, items: &Foundation::NSArray);
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSSharingContentScope {
        NSSharingContentScopeItem = 0,
        NSSharingContentScopePartial = 1,
        NSSharingContentScopeFull = 2,
    }
);

extern_protocol!(
    pub struct NSSharingServiceDelegate;

    unsafe impl ProtocolType for NSSharingServiceDelegate {
        #[optional]
        #[method(sharingService:willShareItems:)]
        pub unsafe fn sharingService_willShareItems(
            &self,
            sharingService: &AppKit::NSSharingService,
            items: &Foundation::NSArray,
        );

        #[optional]
        #[method(sharingService:didFailToShareItems:error:)]
        pub unsafe fn sharingService_didFailToShareItems_error(
            &self,
            sharingService: &AppKit::NSSharingService,
            items: &Foundation::NSArray,
            error: &Foundation::NSError,
        );

        #[optional]
        #[method(sharingService:didShareItems:)]
        pub unsafe fn sharingService_didShareItems(
            &self,
            sharingService: &AppKit::NSSharingService,
            items: &Foundation::NSArray,
        );

        #[optional]
        #[method(sharingService:sourceFrameOnScreenForShareItem:)]
        pub unsafe fn sharingService_sourceFrameOnScreenForShareItem(
            &self,
            sharingService: &AppKit::NSSharingService,
            item: &Object,
        ) -> Foundation::NSRect;

        #[optional]
        #[method_id(@__retain_semantics Other sharingService:transitionImageForShareItem:contentRect:)]
        pub unsafe fn sharingService_transitionImageForShareItem_contentRect(
            &self,
            sharingService: &AppKit::NSSharingService,
            item: &Object,
            contentRect: NonNull<Foundation::NSRect>,
        ) -> Option<Id<AppKit::NSImage, Shared>>;

        #[optional]
        #[method_id(@__retain_semantics Other sharingService:sourceWindowForShareItems:sharingContentScope:)]
        pub unsafe fn sharingService_sourceWindowForShareItems_sharingContentScope(
            &self,
            sharingService: &AppKit::NSSharingService,
            items: &Foundation::NSArray,
            sharingContentScope: NonNull<AppKit::NSSharingContentScope>,
        ) -> Option<Id<AppKit::NSWindow, Shared>>;

        #[optional]
        #[method_id(@__retain_semantics Other anchoringViewForSharingService:showRelativeToRect:preferredEdge:)]
        pub unsafe fn anchoringViewForSharingService_showRelativeToRect_preferredEdge(
            &self,
            sharingService: &AppKit::NSSharingService,
            positioningRect: NonNull<Foundation::NSRect>,
            preferredEdge: NonNull<Foundation::NSRectEdge>,
        ) -> Option<Id<AppKit::NSView, Shared>>;
    }
);

ns_options!(
    #[underlying(NSUInteger)]
    pub enum NSCloudKitSharingServiceOptions {
        NSCloudKitSharingServiceStandard = 0,
        NSCloudKitSharingServiceAllowPublic = 1 << 0,
        NSCloudKitSharingServiceAllowPrivate = 1 << 1,
        NSCloudKitSharingServiceAllowReadOnly = 1 << 4,
        NSCloudKitSharingServiceAllowReadWrite = 1 << 5,
    }
);

extern_protocol!(
    pub struct NSCloudSharingServiceDelegate;

    unsafe impl ProtocolType for NSCloudSharingServiceDelegate {
        #[optional]
        #[method(sharingService:didCompleteForItems:error:)]
        pub unsafe fn sharingService_didCompleteForItems_error(
            &self,
            sharingService: &AppKit::NSSharingService,
            items: &Foundation::NSArray,
            error: Option<&Foundation::NSError>,
        );

        #[optional]
        #[method(optionsForSharingService:shareProvider:)]
        pub unsafe fn optionsForSharingService_shareProvider(
            &self,
            cloudKitSharingService: &AppKit::NSSharingService,
            provider: &Foundation::NSItemProvider,
        ) -> AppKit::NSCloudKitSharingServiceOptions;
    }
);

extern_methods!(
    /// NSCloudKitSharing
    #[cfg(feature = "Foundation_NSItemProvider")]
    unsafe impl Foundation::NSItemProvider {}
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSSharingServicePicker;

    unsafe impl ClassType for NSSharingServicePicker {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSSharingServicePicker")]
    unsafe impl NSSharingServicePicker {
        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(&self)
            -> Option<Id<AppKit::NSSharingServicePickerDelegate, Shared>>;

        #[method(setDelegate:)]
        pub unsafe fn setDelegate(&self, delegate: Option<&AppKit::NSSharingServicePickerDelegate>);

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Init initWithItems:)]
        pub unsafe fn initWithItems(
            this: Option<Allocated<Self>>,
            items: &Foundation::NSArray,
        ) -> Id<Self, Shared>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self, Shared>;

        #[cfg(feature = "AppKit_NSView")]
        #[method(showRelativeToRect:ofView:preferredEdge:)]
        pub unsafe fn showRelativeToRect_ofView_preferredEdge(
            &self,
            rect: Foundation::NSRect,
            view: &AppKit::NSView,
            preferredEdge: Foundation::NSRectEdge,
        );
    }
);

extern_protocol!(
    pub struct NSSharingServicePickerDelegate;

    unsafe impl ProtocolType for NSSharingServicePickerDelegate {
        #[optional]
        #[method_id(@__retain_semantics Other sharingServicePicker:sharingServicesForItems:proposedSharingServices:)]
        pub unsafe fn sharingServicePicker_sharingServicesForItems_proposedSharingServices(
            &self,
            sharingServicePicker: &AppKit::NSSharingServicePicker,
            items: &Foundation::NSArray,
            proposedServices: &Foundation::NSArray<AppKit::NSSharingService>,
        ) -> Id<Foundation::NSArray<AppKit::NSSharingService>, Shared>;

        #[optional]
        #[method_id(@__retain_semantics Other sharingServicePicker:delegateForSharingService:)]
        pub unsafe fn sharingServicePicker_delegateForSharingService(
            &self,
            sharingServicePicker: &AppKit::NSSharingServicePicker,
            sharingService: &AppKit::NSSharingService,
        ) -> Option<Id<AppKit::NSSharingServiceDelegate, Shared>>;

        #[optional]
        #[method(sharingServicePicker:didChooseSharingService:)]
        pub unsafe fn sharingServicePicker_didChooseSharingService(
            &self,
            sharingServicePicker: &AppKit::NSSharingServicePicker,
            service: Option<&AppKit::NSSharingService>,
        );
    }
);
