//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit;
use crate::CoreData;
use crate::Foundation;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSPasteboardItem;

    unsafe impl ClassType for NSPasteboardItem {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSPasteboardItem")]
    unsafe impl NSPasteboardItem {
        #[cfg(all(feature = "AppKit_NSPasteboardType", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Other types)]
        pub unsafe fn types(&self) -> Id<Foundation::NSArray<AppKit::NSPasteboardType>, Shared>;

        #[cfg(all(feature = "AppKit_NSPasteboardType", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Other availableTypeFromArray:)]
        pub unsafe fn availableTypeFromArray(
            &self,
            types: &Foundation::NSArray<AppKit::NSPasteboardType>,
        ) -> Option<Id<AppKit::NSPasteboardType, Shared>>;

        #[cfg(all(
            feature = "AppKit_NSPasteboardItemDataProvider",
            feature = "AppKit_NSPasteboardType",
            feature = "Foundation_NSArray"
        ))]
        #[method(setDataProvider:forTypes:)]
        pub unsafe fn setDataProvider_forTypes(
            &self,
            dataProvider: &AppKit::NSPasteboardItemDataProvider,
            types: &Foundation::NSArray<AppKit::NSPasteboardType>,
        ) -> bool;

        #[cfg(all(feature = "AppKit_NSPasteboardType", feature = "Foundation_NSData"))]
        #[method(setData:forType:)]
        pub unsafe fn setData_forType(
            &self,
            data: &Foundation::NSData,
            type_: &AppKit::NSPasteboardType,
        ) -> bool;

        #[cfg(all(feature = "AppKit_NSPasteboardType", feature = "Foundation_NSString"))]
        #[method(setString:forType:)]
        pub unsafe fn setString_forType(
            &self,
            string: &Foundation::NSString,
            type_: &AppKit::NSPasteboardType,
        ) -> bool;

        #[cfg(feature = "AppKit_NSPasteboardType")]
        #[method(setPropertyList:forType:)]
        pub unsafe fn setPropertyList_forType(
            &self,
            propertyList: &Object,
            type_: &AppKit::NSPasteboardType,
        ) -> bool;

        #[cfg(all(feature = "AppKit_NSPasteboardType", feature = "Foundation_NSData"))]
        #[method_id(@__retain_semantics Other dataForType:)]
        pub unsafe fn dataForType(
            &self,
            type_: &AppKit::NSPasteboardType,
        ) -> Option<Id<Foundation::NSData, Shared>>;

        #[cfg(all(feature = "AppKit_NSPasteboardType", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other stringForType:)]
        pub unsafe fn stringForType(
            &self,
            type_: &AppKit::NSPasteboardType,
        ) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "AppKit_NSPasteboardType")]
        #[method_id(@__retain_semantics Other propertyListForType:)]
        pub unsafe fn propertyListForType(
            &self,
            type_: &AppKit::NSPasteboardType,
        ) -> Option<Id<Object, Shared>>;
    }
);

extern_protocol!(
    pub struct NSPasteboardItemDataProvider;

    unsafe impl ProtocolType for NSPasteboardItemDataProvider {
        #[method(pasteboard:item:provideDataForType:)]
        pub unsafe fn pasteboard_item_provideDataForType(
            &self,
            pasteboard: Option<&AppKit::NSPasteboard>,
            item: &AppKit::NSPasteboardItem,
            type_: &AppKit::NSPasteboardType,
        );

        #[optional]
        #[method(pasteboardFinishedWithDataProvider:)]
        pub unsafe fn pasteboardFinishedWithDataProvider(&self, pasteboard: &AppKit::NSPasteboard);
    }
);
