//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit;
use crate::CoreData;
use crate::Foundation;

extern_protocol!(
    pub struct NSTextInput;

    unsafe impl ProtocolType for NSTextInput {
        #[method(insertText:)]
        pub unsafe fn insertText(&self, string: Option<&Object>);

        #[method(doCommandBySelector:)]
        pub unsafe fn doCommandBySelector(&self, selector: Option<Sel>);

        #[method(setMarkedText:selectedRange:)]
        pub unsafe fn setMarkedText_selectedRange(
            &self,
            string: Option<&Object>,
            selRange: Foundation::NSRange,
        );

        #[method(unmarkText)]
        pub unsafe fn unmarkText(&self);

        #[method(hasMarkedText)]
        pub unsafe fn hasMarkedText(&self) -> bool;

        #[method(conversationIdentifier)]
        pub unsafe fn conversationIdentifier(&self) -> NSInteger;

        #[method_id(@__retain_semantics Other attributedSubstringFromRange:)]
        pub unsafe fn attributedSubstringFromRange(
            &self,
            range: Foundation::NSRange,
        ) -> Option<Id<Foundation::NSAttributedString, Shared>>;

        #[method(markedRange)]
        pub unsafe fn markedRange(&self) -> Foundation::NSRange;

        #[method(selectedRange)]
        pub unsafe fn selectedRange(&self) -> Foundation::NSRange;

        #[method(firstRectForCharacterRange:)]
        pub unsafe fn firstRectForCharacterRange(
            &self,
            range: Foundation::NSRange,
        ) -> Foundation::NSRect;

        #[method(characterIndexForPoint:)]
        pub unsafe fn characterIndexForPoint(&self, point: Foundation::NSPoint) -> NSUInteger;

        #[method_id(@__retain_semantics Other validAttributesForMarkedText)]
        pub unsafe fn validAttributesForMarkedText(
            &self,
        ) -> Option<Id<Foundation::NSArray, Shared>>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSInputManager;

    unsafe impl ClassType for NSInputManager {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSInputManager")]
    unsafe impl NSInputManager {
        #[method_id(@__retain_semantics Other currentInputManager)]
        pub unsafe fn currentInputManager() -> Option<Id<AppKit::NSInputManager, Shared>>;

        #[method(cycleToNextInputLanguage:)]
        pub unsafe fn cycleToNextInputLanguage(sender: Option<&Object>);

        #[method(cycleToNextInputServerInLanguage:)]
        pub unsafe fn cycleToNextInputServerInLanguage(sender: Option<&Object>);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Init initWithName:host:)]
        pub unsafe fn initWithName_host(
            this: Option<Allocated<Self>>,
            inputServerName: Option<&Foundation::NSString>,
            hostName: Option<&Foundation::NSString>,
        ) -> Option<Id<AppKit::NSInputManager, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other localizedInputManagerName)]
        pub unsafe fn localizedInputManagerName(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[method(markedTextAbandoned:)]
        pub unsafe fn markedTextAbandoned(&self, cli: Option<&Object>);

        #[method(markedTextSelectionChanged:client:)]
        pub unsafe fn markedTextSelectionChanged_client(
            &self,
            newSel: Foundation::NSRange,
            cli: Option<&Object>,
        );

        #[method(wantsToInterpretAllKeystrokes)]
        pub unsafe fn wantsToInterpretAllKeystrokes(&self) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other language)]
        pub unsafe fn language(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "AppKit_NSImage")]
        #[method_id(@__retain_semantics Other image)]
        pub unsafe fn image(&self) -> Option<Id<AppKit::NSImage, Shared>>;

        #[cfg(feature = "AppKit_NSInputServer")]
        #[method_id(@__retain_semantics Other server)]
        pub unsafe fn server(&self) -> Option<Id<AppKit::NSInputServer, Shared>>;

        #[method(wantsToHandleMouseEvents)]
        pub unsafe fn wantsToHandleMouseEvents(&self) -> bool;

        #[cfg(feature = "AppKit_NSEvent")]
        #[method(handleMouseEvent:)]
        pub unsafe fn handleMouseEvent(&self, mouseEvent: Option<&AppKit::NSEvent>) -> bool;

        #[method(wantsToDelayTextChangeNotifications)]
        pub unsafe fn wantsToDelayTextChangeNotifications(&self) -> bool;
    }
);
