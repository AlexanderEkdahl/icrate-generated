//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit;
use crate::CoreData;
use crate::Foundation;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSTreeNode;

    unsafe impl ClassType for NSTreeNode {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSTreeNode")]
    unsafe impl NSTreeNode {
        #[method_id(@__retain_semantics Other treeNodeWithRepresentedObject:)]
        pub unsafe fn treeNodeWithRepresentedObject(
            modelObject: Option<&Object>,
        ) -> Id<Self, Shared>;

        #[method_id(@__retain_semantics Init initWithRepresentedObject:)]
        pub unsafe fn initWithRepresentedObject(
            this: Option<Allocated<Self>>,
            modelObject: Option<&Object>,
        ) -> Id<Self, Shared>;

        #[method_id(@__retain_semantics Other representedObject)]
        pub unsafe fn representedObject(&self) -> Option<Id<Object, Shared>>;

        #[cfg(feature = "Foundation_NSIndexPath")]
        #[method_id(@__retain_semantics Other indexPath)]
        pub unsafe fn indexPath(&self) -> Id<Foundation::NSIndexPath, Shared>;

        #[method(isLeaf)]
        pub unsafe fn isLeaf(&self) -> bool;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other childNodes)]
        pub unsafe fn childNodes(
            &self,
        ) -> Option<Id<Foundation::NSArray<AppKit::NSTreeNode>, Shared>>;

        #[cfg(feature = "Foundation_NSMutableArray")]
        #[method_id(@__retain_semantics Other mutableChildNodes)]
        pub unsafe fn mutableChildNodes(
            &self,
        ) -> Id<Foundation::NSMutableArray<AppKit::NSTreeNode>, Owned>;

        #[cfg(feature = "Foundation_NSIndexPath")]
        #[method_id(@__retain_semantics Other descendantNodeAtIndexPath:)]
        pub unsafe fn descendantNodeAtIndexPath(
            &self,
            indexPath: &Foundation::NSIndexPath,
        ) -> Option<Id<AppKit::NSTreeNode, Shared>>;

        #[method_id(@__retain_semantics Other parentNode)]
        pub unsafe fn parentNode(&self) -> Option<Id<AppKit::NSTreeNode, Shared>>;

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSSortDescriptor"
        ))]
        #[method(sortWithSortDescriptors:recursively:)]
        pub unsafe fn sortWithSortDescriptors_recursively(
            &self,
            sortDescriptors: &Foundation::NSArray<Foundation::NSSortDescriptor>,
            recursively: bool,
        );
    }
);
