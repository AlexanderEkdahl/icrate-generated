//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit;
use crate::CoreData;
use crate::Foundation;

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSEventType {
        NSEventTypeLeftMouseDown = 1,
        NSEventTypeLeftMouseUp = 2,
        NSEventTypeRightMouseDown = 3,
        NSEventTypeRightMouseUp = 4,
        NSEventTypeMouseMoved = 5,
        NSEventTypeLeftMouseDragged = 6,
        NSEventTypeRightMouseDragged = 7,
        NSEventTypeMouseEntered = 8,
        NSEventTypeMouseExited = 9,
        NSEventTypeKeyDown = 10,
        NSEventTypeKeyUp = 11,
        NSEventTypeFlagsChanged = 12,
        NSEventTypeAppKitDefined = 13,
        NSEventTypeSystemDefined = 14,
        NSEventTypeApplicationDefined = 15,
        NSEventTypePeriodic = 16,
        NSEventTypeCursorUpdate = 17,
        NSEventTypeScrollWheel = 22,
        NSEventTypeTabletPoint = 23,
        NSEventTypeTabletProximity = 24,
        NSEventTypeOtherMouseDown = 25,
        NSEventTypeOtherMouseUp = 26,
        NSEventTypeOtherMouseDragged = 27,
        NSEventTypeGesture = 29,
        NSEventTypeMagnify = 30,
        NSEventTypeSwipe = 31,
        NSEventTypeRotate = 18,
        NSEventTypeBeginGesture = 19,
        NSEventTypeEndGesture = 20,
        NSEventTypeSmartMagnify = 32,
        NSEventTypeQuickLook = 33,
        NSEventTypePressure = 34,
        NSEventTypeDirectTouch = 37,
        NSEventTypeChangeMode = 38,
    }
);

extern_static!(NSLeftMouseDown: AppKit::NSEventType = NSEventTypeLeftMouseDown);

extern_static!(NSLeftMouseUp: AppKit::NSEventType = NSEventTypeLeftMouseUp);

extern_static!(NSRightMouseDown: AppKit::NSEventType = NSEventTypeRightMouseDown);

extern_static!(NSRightMouseUp: AppKit::NSEventType = NSEventTypeRightMouseUp);

extern_static!(NSMouseMoved: AppKit::NSEventType = NSEventTypeMouseMoved);

extern_static!(NSLeftMouseDragged: AppKit::NSEventType = NSEventTypeLeftMouseDragged);

extern_static!(NSRightMouseDragged: AppKit::NSEventType = NSEventTypeRightMouseDragged);

extern_static!(NSMouseEntered: AppKit::NSEventType = NSEventTypeMouseEntered);

extern_static!(NSMouseExited: AppKit::NSEventType = NSEventTypeMouseExited);

extern_static!(NSKeyDown: AppKit::NSEventType = NSEventTypeKeyDown);

extern_static!(NSKeyUp: AppKit::NSEventType = NSEventTypeKeyUp);

extern_static!(NSFlagsChanged: AppKit::NSEventType = NSEventTypeFlagsChanged);

extern_static!(NSAppKitDefined: AppKit::NSEventType = NSEventTypeAppKitDefined);

extern_static!(NSSystemDefined: AppKit::NSEventType = NSEventTypeSystemDefined);

extern_static!(NSApplicationDefined: AppKit::NSEventType = NSEventTypeApplicationDefined);

extern_static!(NSPeriodic: AppKit::NSEventType = NSEventTypePeriodic);

extern_static!(NSCursorUpdate: AppKit::NSEventType = NSEventTypeCursorUpdate);

extern_static!(NSScrollWheel: AppKit::NSEventType = NSEventTypeScrollWheel);

extern_static!(NSTabletPoint: AppKit::NSEventType = NSEventTypeTabletPoint);

extern_static!(NSTabletProximity: AppKit::NSEventType = NSEventTypeTabletProximity);

extern_static!(NSOtherMouseDown: AppKit::NSEventType = NSEventTypeOtherMouseDown);

extern_static!(NSOtherMouseUp: AppKit::NSEventType = NSEventTypeOtherMouseUp);

extern_static!(NSOtherMouseDragged: AppKit::NSEventType = NSEventTypeOtherMouseDragged);

ns_options!(
    #[underlying(c_ulonglong)]
    pub enum NSEventMask {
        NSEventMaskLeftMouseDown = 1 << NSEventTypeLeftMouseDown,
        NSEventMaskLeftMouseUp = 1 << NSEventTypeLeftMouseUp,
        NSEventMaskRightMouseDown = 1 << NSEventTypeRightMouseDown,
        NSEventMaskRightMouseUp = 1 << NSEventTypeRightMouseUp,
        NSEventMaskMouseMoved = 1 << NSEventTypeMouseMoved,
        NSEventMaskLeftMouseDragged = 1 << NSEventTypeLeftMouseDragged,
        NSEventMaskRightMouseDragged = 1 << NSEventTypeRightMouseDragged,
        NSEventMaskMouseEntered = 1 << NSEventTypeMouseEntered,
        NSEventMaskMouseExited = 1 << NSEventTypeMouseExited,
        NSEventMaskKeyDown = 1 << NSEventTypeKeyDown,
        NSEventMaskKeyUp = 1 << NSEventTypeKeyUp,
        NSEventMaskFlagsChanged = 1 << NSEventTypeFlagsChanged,
        NSEventMaskAppKitDefined = 1 << NSEventTypeAppKitDefined,
        NSEventMaskSystemDefined = 1 << NSEventTypeSystemDefined,
        NSEventMaskApplicationDefined = 1 << NSEventTypeApplicationDefined,
        NSEventMaskPeriodic = 1 << NSEventTypePeriodic,
        NSEventMaskCursorUpdate = 1 << NSEventTypeCursorUpdate,
        NSEventMaskScrollWheel = 1 << NSEventTypeScrollWheel,
        NSEventMaskTabletPoint = 1 << NSEventTypeTabletPoint,
        NSEventMaskTabletProximity = 1 << NSEventTypeTabletProximity,
        NSEventMaskOtherMouseDown = 1 << NSEventTypeOtherMouseDown,
        NSEventMaskOtherMouseUp = 1 << NSEventTypeOtherMouseUp,
        NSEventMaskOtherMouseDragged = 1 << NSEventTypeOtherMouseDragged,
        NSEventMaskGesture = 1 << NSEventTypeGesture,
        NSEventMaskMagnify = 1 << NSEventTypeMagnify,
        NSEventMaskSwipe = 1 << NSEventTypeSwipe,
        NSEventMaskRotate = 1 << NSEventTypeRotate,
        NSEventMaskBeginGesture = 1 << NSEventTypeBeginGesture,
        NSEventMaskEndGesture = 1 << NSEventTypeEndGesture,
        NSEventMaskSmartMagnify = 1 << NSEventTypeSmartMagnify,
        NSEventMaskPressure = 1 << NSEventTypePressure,
        NSEventMaskDirectTouch = 1 << NSEventTypeDirectTouch,
        NSEventMaskChangeMode = 1 << NSEventTypeChangeMode,
        NSEventMaskAny = NSUIntegerMax as _,
    }
);

extern_static!(NSLeftMouseDownMask: AppKit::NSEventMask = NSEventMaskLeftMouseDown);

extern_static!(NSLeftMouseUpMask: AppKit::NSEventMask = NSEventMaskLeftMouseUp);

extern_static!(NSRightMouseDownMask: AppKit::NSEventMask = NSEventMaskRightMouseDown);

extern_static!(NSRightMouseUpMask: AppKit::NSEventMask = NSEventMaskRightMouseUp);

extern_static!(NSMouseMovedMask: AppKit::NSEventMask = NSEventMaskMouseMoved);

extern_static!(NSLeftMouseDraggedMask: AppKit::NSEventMask = NSEventMaskLeftMouseDragged);

extern_static!(NSRightMouseDraggedMask: AppKit::NSEventMask = NSEventMaskRightMouseDragged);

extern_static!(NSMouseEnteredMask: AppKit::NSEventMask = NSEventMaskMouseEntered);

extern_static!(NSMouseExitedMask: AppKit::NSEventMask = NSEventMaskMouseExited);

extern_static!(NSKeyDownMask: AppKit::NSEventMask = NSEventMaskKeyDown);

extern_static!(NSKeyUpMask: AppKit::NSEventMask = NSEventMaskKeyUp);

extern_static!(NSFlagsChangedMask: AppKit::NSEventMask = NSEventMaskFlagsChanged);

extern_static!(NSAppKitDefinedMask: AppKit::NSEventMask = NSEventMaskAppKitDefined);

extern_static!(NSSystemDefinedMask: AppKit::NSEventMask = NSEventMaskSystemDefined);

extern_static!(NSApplicationDefinedMask: AppKit::NSEventMask = NSEventMaskApplicationDefined);

extern_static!(NSPeriodicMask: AppKit::NSEventMask = NSEventMaskPeriodic);

extern_static!(NSCursorUpdateMask: AppKit::NSEventMask = NSEventMaskCursorUpdate);

extern_static!(NSScrollWheelMask: AppKit::NSEventMask = NSEventMaskScrollWheel);

extern_static!(NSTabletPointMask: AppKit::NSEventMask = NSEventMaskTabletPoint);

extern_static!(NSTabletProximityMask: AppKit::NSEventMask = NSEventMaskTabletProximity);

extern_static!(NSOtherMouseDownMask: AppKit::NSEventMask = NSEventMaskOtherMouseDown);

extern_static!(NSOtherMouseUpMask: AppKit::NSEventMask = NSEventMaskOtherMouseUp);

extern_static!(NSOtherMouseDraggedMask: AppKit::NSEventMask = NSEventMaskOtherMouseDragged);

inline_fn!(
    pub unsafe fn NSEventMaskFromType(type_: AppKit::NSEventType) -> AppKit::NSEventMask {
        todo!()
    }
);

ns_options!(
    #[underlying(NSUInteger)]
    pub enum NSEventModifierFlags {
        NSEventModifierFlagCapsLock = 1 << 16,
        NSEventModifierFlagShift = 1 << 17,
        NSEventModifierFlagControl = 1 << 18,
        NSEventModifierFlagOption = 1 << 19,
        NSEventModifierFlagCommand = 1 << 20,
        NSEventModifierFlagNumericPad = 1 << 21,
        NSEventModifierFlagHelp = 1 << 22,
        NSEventModifierFlagFunction = 1 << 23,
        NSEventModifierFlagDeviceIndependentFlagsMask = 0xffff0000,
    }
);

extern_static!(NSAlphaShiftKeyMask: AppKit::NSEventModifierFlags = NSEventModifierFlagCapsLock);

extern_static!(NSShiftKeyMask: AppKit::NSEventModifierFlags = NSEventModifierFlagShift);

extern_static!(NSControlKeyMask: AppKit::NSEventModifierFlags = NSEventModifierFlagControl);

extern_static!(NSAlternateKeyMask: AppKit::NSEventModifierFlags = NSEventModifierFlagOption);

extern_static!(NSCommandKeyMask: AppKit::NSEventModifierFlags = NSEventModifierFlagCommand);

extern_static!(NSNumericPadKeyMask: AppKit::NSEventModifierFlags = NSEventModifierFlagNumericPad);

extern_static!(NSHelpKeyMask: AppKit::NSEventModifierFlags = NSEventModifierFlagHelp);

extern_static!(NSFunctionKeyMask: AppKit::NSEventModifierFlags = NSEventModifierFlagFunction);

extern_static!(
    NSDeviceIndependentModifierFlagsMask: AppKit::NSEventModifierFlags =
        NSEventModifierFlagDeviceIndependentFlagsMask
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSPointingDeviceType {
        NSPointingDeviceTypeUnknown = 0,
        NSPointingDeviceTypePen = 1,
        NSPointingDeviceTypeCursor = 2,
        NSPointingDeviceTypeEraser = 3,
    }
);

extern_static!(NSUnknownPointingDevice: AppKit::NSPointingDeviceType = NSPointingDeviceTypeUnknown);

extern_static!(NSPenPointingDevice: AppKit::NSPointingDeviceType = NSPointingDeviceTypePen);

extern_static!(NSCursorPointingDevice: AppKit::NSPointingDeviceType = NSPointingDeviceTypeCursor);

extern_static!(NSEraserPointingDevice: AppKit::NSPointingDeviceType = NSPointingDeviceTypeEraser);

ns_options!(
    #[underlying(NSUInteger)]
    pub enum NSEventButtonMask {
        NSEventButtonMaskPenTip = 1,
        NSEventButtonMaskPenLowerSide = 2,
        NSEventButtonMaskPenUpperSide = 4,
    }
);

extern_static!(NSPenTipMask: AppKit::NSEventButtonMask = NSEventButtonMaskPenTip);

extern_static!(NSPenLowerSideMask: AppKit::NSEventButtonMask = NSEventButtonMaskPenLowerSide);

extern_static!(NSPenUpperSideMask: AppKit::NSEventButtonMask = NSEventButtonMaskPenUpperSide);

ns_options!(
    #[underlying(NSUInteger)]
    pub enum NSEventPhase {
        NSEventPhaseNone = 0,
        NSEventPhaseBegan = 0x1 << 0,
        NSEventPhaseStationary = 0x1 << 1,
        NSEventPhaseChanged = 0x1 << 2,
        NSEventPhaseEnded = 0x1 << 3,
        NSEventPhaseCancelled = 0x1 << 4,
        NSEventPhaseMayBegin = 0x1 << 5,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSEventGestureAxis {
        NSEventGestureAxisNone = 0,
        NSEventGestureAxisHorizontal = 1,
        NSEventGestureAxisVertical = 2,
    }
);

ns_options!(
    #[underlying(NSUInteger)]
    pub enum NSEventSwipeTrackingOptions {
        NSEventSwipeTrackingLockDirection = 0x1 << 0,
        NSEventSwipeTrackingClampGestureAmount = 0x1 << 1,
    }
);

ns_enum!(
    #[underlying(c_short)]
    pub enum NSEventSubtype {
        NSEventSubtypeWindowExposed = 0,
        NSEventSubtypeApplicationActivated = 1,
        NSEventSubtypeApplicationDeactivated = 2,
        NSEventSubtypeWindowMoved = 4,
        NSEventSubtypeScreenChanged = 8,
        NSEventSubtypePowerOff = 1,
        NSEventSubtypeMouseEvent = 0,
        NSEventSubtypeTabletPoint = 1,
        NSEventSubtypeTabletProximity = 2,
        NSEventSubtypeTouch = 3,
    }
);

extern_static!(NSWindowExposedEventType: AppKit::NSEventSubtype = NSEventSubtypeWindowExposed);

extern_static!(
    NSApplicationActivatedEventType: AppKit::NSEventSubtype = NSEventSubtypeApplicationActivated
);

extern_static!(
    NSApplicationDeactivatedEventType: AppKit::NSEventSubtype =
        NSEventSubtypeApplicationDeactivated
);

extern_static!(NSWindowMovedEventType: AppKit::NSEventSubtype = NSEventSubtypeWindowMoved);

extern_static!(NSScreenChangedEventType: AppKit::NSEventSubtype = NSEventSubtypeScreenChanged);

extern_static!(NSAWTEventType: AppKit::NSEventSubtype = 16);

extern_static!(NSPowerOffEventType: AppKit::NSEventSubtype = NSEventSubtypePowerOff);

extern_static!(NSMouseEventSubtype: AppKit::NSEventSubtype = NSEventSubtypeMouseEvent);

extern_static!(NSTabletPointEventSubtype: AppKit::NSEventSubtype = NSEventSubtypeTabletPoint);

extern_static!(
    NSTabletProximityEventSubtype: AppKit::NSEventSubtype = NSEventSubtypeTabletProximity
);

extern_static!(NSTouchEventSubtype: AppKit::NSEventSubtype = NSEventSubtypeTouch);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSPressureBehavior {
        NSPressureBehaviorUnknown = -1,
        NSPressureBehaviorPrimaryDefault = 0,
        NSPressureBehaviorPrimaryClick = 1,
        NSPressureBehaviorPrimaryGeneric = 2,
        NSPressureBehaviorPrimaryAccelerator = 3,
        NSPressureBehaviorPrimaryDeepClick = 5,
        NSPressureBehaviorPrimaryDeepDrag = 6,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSEvent;

    unsafe impl ClassType for NSEvent {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSEvent")]
    unsafe impl NSEvent {
        #[method(type)]
        pub unsafe fn type_(&self) -> AppKit::NSEventType;

        #[method(timestamp)]
        pub unsafe fn timestamp(&self) -> Foundation::NSTimeInterval;

        #[cfg(feature = "AppKit_NSWindow")]
        #[method_id(@__retain_semantics Other window)]
        pub unsafe fn window(&self) -> Option<Id<AppKit::NSWindow, Shared>>;

        #[method(windowNumber)]
        pub unsafe fn windowNumber(&self) -> NSInteger;

        #[cfg(feature = "AppKit_NSGraphicsContext")]
        #[method_id(@__retain_semantics Other context)]
        pub unsafe fn context(&self) -> Option<Id<AppKit::NSGraphicsContext, Shared>>;

        #[method(clickCount)]
        pub unsafe fn clickCount(&self) -> NSInteger;

        #[method(buttonNumber)]
        pub unsafe fn buttonNumber(&self) -> NSInteger;

        #[method(eventNumber)]
        pub unsafe fn eventNumber(&self) -> NSInteger;

        #[method(pressure)]
        pub unsafe fn pressure(&self) -> c_float;

        #[method(locationInWindow)]
        pub unsafe fn locationInWindow(&self) -> Foundation::NSPoint;

        #[method(deltaX)]
        pub unsafe fn deltaX(&self) -> CoreGraphics::CGFloat;

        #[method(deltaY)]
        pub unsafe fn deltaY(&self) -> CoreGraphics::CGFloat;

        #[method(deltaZ)]
        pub unsafe fn deltaZ(&self) -> CoreGraphics::CGFloat;

        #[method(hasPreciseScrollingDeltas)]
        pub unsafe fn hasPreciseScrollingDeltas(&self) -> bool;

        #[method(scrollingDeltaX)]
        pub unsafe fn scrollingDeltaX(&self) -> CoreGraphics::CGFloat;

        #[method(scrollingDeltaY)]
        pub unsafe fn scrollingDeltaY(&self) -> CoreGraphics::CGFloat;

        #[method(momentumPhase)]
        pub unsafe fn momentumPhase(&self) -> AppKit::NSEventPhase;

        #[method(isDirectionInvertedFromDevice)]
        pub unsafe fn isDirectionInvertedFromDevice(&self) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other characters)]
        pub unsafe fn characters(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other charactersIgnoringModifiers)]
        pub unsafe fn charactersIgnoringModifiers(
            &self,
        ) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other charactersByApplyingModifiers:)]
        pub unsafe fn charactersByApplyingModifiers(
            &self,
            modifiers: AppKit::NSEventModifierFlags,
        ) -> Option<Id<Foundation::NSString, Shared>>;

        #[method(isARepeat)]
        pub unsafe fn isARepeat(&self) -> bool;

        #[method(keyCode)]
        pub unsafe fn keyCode(&self) -> c_ushort;

        #[method(trackingNumber)]
        pub unsafe fn trackingNumber(&self) -> NSInteger;

        #[method(userData)]
        pub unsafe fn userData(&self) -> *mut c_void;

        #[cfg(feature = "AppKit_NSTrackingArea")]
        #[method_id(@__retain_semantics Other trackingArea)]
        pub unsafe fn trackingArea(&self) -> Option<Id<AppKit::NSTrackingArea, Shared>>;

        #[method(subtype)]
        pub unsafe fn subtype(&self) -> AppKit::NSEventSubtype;

        #[method(data1)]
        pub unsafe fn data1(&self) -> NSInteger;

        #[method(data2)]
        pub unsafe fn data2(&self) -> NSInteger;

        #[method(eventRef)]
        pub unsafe fn eventRef(&self) -> *mut c_void;

        #[method_id(@__retain_semantics Other eventWithEventRef:)]
        pub unsafe fn eventWithEventRef(
            eventRef: NonNull<c_void>,
        ) -> Option<Id<AppKit::NSEvent, Shared>>;

        #[method(isMouseCoalescingEnabled)]
        pub unsafe fn isMouseCoalescingEnabled() -> bool;

        #[method(setMouseCoalescingEnabled:)]
        pub unsafe fn setMouseCoalescingEnabled(mouseCoalescingEnabled: bool);

        #[method(magnification)]
        pub unsafe fn magnification(&self) -> CoreGraphics::CGFloat;

        #[method(deviceID)]
        pub unsafe fn deviceID(&self) -> NSUInteger;

        #[method(rotation)]
        pub unsafe fn rotation(&self) -> c_float;

        #[method(absoluteX)]
        pub unsafe fn absoluteX(&self) -> NSInteger;

        #[method(absoluteY)]
        pub unsafe fn absoluteY(&self) -> NSInteger;

        #[method(absoluteZ)]
        pub unsafe fn absoluteZ(&self) -> NSInteger;

        #[method(buttonMask)]
        pub unsafe fn buttonMask(&self) -> AppKit::NSEventButtonMask;

        #[method(tilt)]
        pub unsafe fn tilt(&self) -> Foundation::NSPoint;

        #[method(tangentialPressure)]
        pub unsafe fn tangentialPressure(&self) -> c_float;

        #[method_id(@__retain_semantics Other vendorDefined)]
        pub unsafe fn vendorDefined(&self) -> Id<Object, Shared>;

        #[method(vendorID)]
        pub unsafe fn vendorID(&self) -> NSUInteger;

        #[method(tabletID)]
        pub unsafe fn tabletID(&self) -> NSUInteger;

        #[method(pointingDeviceID)]
        pub unsafe fn pointingDeviceID(&self) -> NSUInteger;

        #[method(systemTabletID)]
        pub unsafe fn systemTabletID(&self) -> NSUInteger;

        #[method(vendorPointingDeviceType)]
        pub unsafe fn vendorPointingDeviceType(&self) -> NSUInteger;

        #[method(pointingDeviceSerialNumber)]
        pub unsafe fn pointingDeviceSerialNumber(&self) -> NSUInteger;

        #[method(uniqueID)]
        pub unsafe fn uniqueID(&self) -> c_ulonglong;

        #[method(capabilityMask)]
        pub unsafe fn capabilityMask(&self) -> NSUInteger;

        #[method(pointingDeviceType)]
        pub unsafe fn pointingDeviceType(&self) -> AppKit::NSPointingDeviceType;

        #[method(isEnteringProximity)]
        pub unsafe fn isEnteringProximity(&self) -> bool;

        #[cfg(all(
            feature = "AppKit_NSTouch",
            feature = "AppKit_NSView",
            feature = "Foundation_NSSet"
        ))]
        #[method_id(@__retain_semantics Other touchesMatchingPhase:inView:)]
        pub unsafe fn touchesMatchingPhase_inView(
            &self,
            phase: AppKit::NSTouchPhase,
            view: Option<&AppKit::NSView>,
        ) -> Id<Foundation::NSSet<AppKit::NSTouch>, Shared>;

        #[cfg(all(feature = "AppKit_NSTouch", feature = "Foundation_NSSet"))]
        #[method_id(@__retain_semantics Other allTouches)]
        pub unsafe fn allTouches(&self) -> Id<Foundation::NSSet<AppKit::NSTouch>, Shared>;

        #[cfg(all(
            feature = "AppKit_NSTouch",
            feature = "AppKit_NSView",
            feature = "Foundation_NSSet"
        ))]
        #[method_id(@__retain_semantics Other touchesForView:)]
        pub unsafe fn touchesForView(
            &self,
            view: &AppKit::NSView,
        ) -> Id<Foundation::NSSet<AppKit::NSTouch>, Shared>;

        #[cfg(all(feature = "AppKit_NSTouch", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Other coalescedTouchesForTouch:)]
        pub unsafe fn coalescedTouchesForTouch(
            &self,
            touch: &AppKit::NSTouch,
        ) -> Id<Foundation::NSArray<AppKit::NSTouch>, Shared>;

        #[method(phase)]
        pub unsafe fn phase(&self) -> AppKit::NSEventPhase;

        #[method(stage)]
        pub unsafe fn stage(&self) -> NSInteger;

        #[method(stageTransition)]
        pub unsafe fn stageTransition(&self) -> CoreGraphics::CGFloat;

        #[method(associatedEventsMask)]
        pub unsafe fn associatedEventsMask(&self) -> AppKit::NSEventMask;

        #[method(pressureBehavior)]
        pub unsafe fn pressureBehavior(&self) -> AppKit::NSPressureBehavior;

        #[method(isSwipeTrackingFromScrollEventsEnabled)]
        pub unsafe fn isSwipeTrackingFromScrollEventsEnabled() -> bool;

        #[method(trackSwipeEventWithOptions:dampenAmountThresholdMin:max:usingHandler:)]
        pub unsafe fn trackSwipeEventWithOptions_dampenAmountThresholdMin_max_usingHandler(
            &self,
            options: AppKit::NSEventSwipeTrackingOptions,
            minDampenThreshold: CoreGraphics::CGFloat,
            maxDampenThreshold: CoreGraphics::CGFloat,
            trackingHandler: &Block<
                (
                    CoreGraphics::CGFloat,
                    AppKit::NSEventPhase,
                    Bool,
                    NonNull<Bool>,
                ),
                (),
            >,
        );

        #[method(startPeriodicEventsAfterDelay:withPeriod:)]
        pub unsafe fn startPeriodicEventsAfterDelay_withPeriod(
            delay: Foundation::NSTimeInterval,
            period: Foundation::NSTimeInterval,
        );

        #[method(stopPeriodicEvents)]
        pub unsafe fn stopPeriodicEvents();

        #[cfg(feature = "AppKit_NSGraphicsContext")]
        #[method_id(@__retain_semantics Other mouseEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:clickCount:pressure:)]
        pub unsafe fn mouseEventWithType_location_modifierFlags_timestamp_windowNumber_context_eventNumber_clickCount_pressure(
            type_: AppKit::NSEventType,
            location: Foundation::NSPoint,
            flags: AppKit::NSEventModifierFlags,
            time: Foundation::NSTimeInterval,
            wNum: NSInteger,
            unusedPassNil: Option<&AppKit::NSGraphicsContext>,
            eNum: NSInteger,
            cNum: NSInteger,
            pressure: c_float,
        ) -> Option<Id<AppKit::NSEvent, Shared>>;

        #[cfg(all(feature = "AppKit_NSGraphicsContext", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other keyEventWithType:location:modifierFlags:timestamp:windowNumber:context:characters:charactersIgnoringModifiers:isARepeat:keyCode:)]
        pub unsafe fn keyEventWithType_location_modifierFlags_timestamp_windowNumber_context_characters_charactersIgnoringModifiers_isARepeat_keyCode(
            type_: AppKit::NSEventType,
            location: Foundation::NSPoint,
            flags: AppKit::NSEventModifierFlags,
            time: Foundation::NSTimeInterval,
            wNum: NSInteger,
            unusedPassNil: Option<&AppKit::NSGraphicsContext>,
            keys: &Foundation::NSString,
            ukeys: &Foundation::NSString,
            flag: bool,
            code: c_ushort,
        ) -> Option<Id<AppKit::NSEvent, Shared>>;

        #[cfg(feature = "AppKit_NSGraphicsContext")]
        #[method_id(@__retain_semantics Other enterExitEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:trackingNumber:userData:)]
        pub unsafe fn enterExitEventWithType_location_modifierFlags_timestamp_windowNumber_context_eventNumber_trackingNumber_userData(
            type_: AppKit::NSEventType,
            location: Foundation::NSPoint,
            flags: AppKit::NSEventModifierFlags,
            time: Foundation::NSTimeInterval,
            wNum: NSInteger,
            unusedPassNil: Option<&AppKit::NSGraphicsContext>,
            eNum: NSInteger,
            tNum: NSInteger,
            data: *mut c_void,
        ) -> Option<Id<AppKit::NSEvent, Shared>>;

        #[cfg(feature = "AppKit_NSGraphicsContext")]
        #[method_id(@__retain_semantics Other otherEventWithType:location:modifierFlags:timestamp:windowNumber:context:subtype:data1:data2:)]
        pub unsafe fn otherEventWithType_location_modifierFlags_timestamp_windowNumber_context_subtype_data1_data2(
            type_: AppKit::NSEventType,
            location: Foundation::NSPoint,
            flags: AppKit::NSEventModifierFlags,
            time: Foundation::NSTimeInterval,
            wNum: NSInteger,
            unusedPassNil: Option<&AppKit::NSGraphicsContext>,
            subtype: c_short,
            d1: NSInteger,
            d2: NSInteger,
        ) -> Option<Id<AppKit::NSEvent, Shared>>;

        #[method(mouseLocation)]
        pub unsafe fn mouseLocation() -> Foundation::NSPoint;

        #[method(pressedMouseButtons)]
        pub unsafe fn pressedMouseButtons() -> NSUInteger;

        #[method(doubleClickInterval)]
        pub unsafe fn doubleClickInterval() -> Foundation::NSTimeInterval;

        #[method(keyRepeatDelay)]
        pub unsafe fn keyRepeatDelay() -> Foundation::NSTimeInterval;

        #[method(keyRepeatInterval)]
        pub unsafe fn keyRepeatInterval() -> Foundation::NSTimeInterval;

        #[method_id(@__retain_semantics Other addGlobalMonitorForEventsMatchingMask:handler:)]
        pub unsafe fn addGlobalMonitorForEventsMatchingMask_handler(
            mask: AppKit::NSEventMask,
            block: &Block<(NonNull<AppKit::NSEvent>,), ()>,
        ) -> Option<Id<Object, Shared>>;

        #[method_id(@__retain_semantics Other addLocalMonitorForEventsMatchingMask:handler:)]
        pub unsafe fn addLocalMonitorForEventsMatchingMask_handler(
            mask: AppKit::NSEventMask,
            block: &Block<(NonNull<AppKit::NSEvent>,), *mut AppKit::NSEvent>,
        ) -> Option<Id<Object, Shared>>;

        #[method(removeMonitor:)]
        pub unsafe fn removeMonitor(eventMonitor: &Object);
    }
);

extern_enum!(
    #[underlying(c_uint)]
    pub enum {
        NSUpArrowFunctionKey = 0xF700,
        NSDownArrowFunctionKey = 0xF701,
        NSLeftArrowFunctionKey = 0xF702,
        NSRightArrowFunctionKey = 0xF703,
        NSF1FunctionKey = 0xF704,
        NSF2FunctionKey = 0xF705,
        NSF3FunctionKey = 0xF706,
        NSF4FunctionKey = 0xF707,
        NSF5FunctionKey = 0xF708,
        NSF6FunctionKey = 0xF709,
        NSF7FunctionKey = 0xF70A,
        NSF8FunctionKey = 0xF70B,
        NSF9FunctionKey = 0xF70C,
        NSF10FunctionKey = 0xF70D,
        NSF11FunctionKey = 0xF70E,
        NSF12FunctionKey = 0xF70F,
        NSF13FunctionKey = 0xF710,
        NSF14FunctionKey = 0xF711,
        NSF15FunctionKey = 0xF712,
        NSF16FunctionKey = 0xF713,
        NSF17FunctionKey = 0xF714,
        NSF18FunctionKey = 0xF715,
        NSF19FunctionKey = 0xF716,
        NSF20FunctionKey = 0xF717,
        NSF21FunctionKey = 0xF718,
        NSF22FunctionKey = 0xF719,
        NSF23FunctionKey = 0xF71A,
        NSF24FunctionKey = 0xF71B,
        NSF25FunctionKey = 0xF71C,
        NSF26FunctionKey = 0xF71D,
        NSF27FunctionKey = 0xF71E,
        NSF28FunctionKey = 0xF71F,
        NSF29FunctionKey = 0xF720,
        NSF30FunctionKey = 0xF721,
        NSF31FunctionKey = 0xF722,
        NSF32FunctionKey = 0xF723,
        NSF33FunctionKey = 0xF724,
        NSF34FunctionKey = 0xF725,
        NSF35FunctionKey = 0xF726,
        NSInsertFunctionKey = 0xF727,
        NSDeleteFunctionKey = 0xF728,
        NSHomeFunctionKey = 0xF729,
        NSBeginFunctionKey = 0xF72A,
        NSEndFunctionKey = 0xF72B,
        NSPageUpFunctionKey = 0xF72C,
        NSPageDownFunctionKey = 0xF72D,
        NSPrintScreenFunctionKey = 0xF72E,
        NSScrollLockFunctionKey = 0xF72F,
        NSPauseFunctionKey = 0xF730,
        NSSysReqFunctionKey = 0xF731,
        NSBreakFunctionKey = 0xF732,
        NSResetFunctionKey = 0xF733,
        NSStopFunctionKey = 0xF734,
        NSMenuFunctionKey = 0xF735,
        NSUserFunctionKey = 0xF736,
        NSSystemFunctionKey = 0xF737,
        NSPrintFunctionKey = 0xF738,
        NSClearLineFunctionKey = 0xF739,
        NSClearDisplayFunctionKey = 0xF73A,
        NSInsertLineFunctionKey = 0xF73B,
        NSDeleteLineFunctionKey = 0xF73C,
        NSInsertCharFunctionKey = 0xF73D,
        NSDeleteCharFunctionKey = 0xF73E,
        NSPrevFunctionKey = 0xF73F,
        NSNextFunctionKey = 0xF740,
        NSSelectFunctionKey = 0xF741,
        NSExecuteFunctionKey = 0xF742,
        NSUndoFunctionKey = 0xF743,
        NSRedoFunctionKey = 0xF744,
        NSFindFunctionKey = 0xF745,
        NSHelpFunctionKey = 0xF746,
        NSModeSwitchFunctionKey = 0xF747,
    }
);
