//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit;
use crate::CoreData;
use crate::Foundation;

typed_enum!(
    pub type NSSpeechSynthesizerVoiceName = Foundation::NSString;
);

typed_enum!(
    pub type NSVoiceAttributeKey = Foundation::NSString;
);

extern_static!(NSVoiceName: &'static AppKit::NSVoiceAttributeKey);

extern_static!(NSVoiceIdentifier: &'static AppKit::NSVoiceAttributeKey);

extern_static!(NSVoiceAge: &'static AppKit::NSVoiceAttributeKey);

extern_static!(NSVoiceGender: &'static AppKit::NSVoiceAttributeKey);

extern_static!(NSVoiceDemoText: &'static AppKit::NSVoiceAttributeKey);

extern_static!(NSVoiceLocaleIdentifier: &'static AppKit::NSVoiceAttributeKey);

extern_static!(NSVoiceSupportedCharacters: &'static AppKit::NSVoiceAttributeKey);

extern_static!(NSVoiceIndividuallySpokenCharacters: &'static AppKit::NSVoiceAttributeKey);

typed_enum!(
    pub type NSSpeechDictionaryKey = Foundation::NSString;
);

extern_static!(NSSpeechDictionaryLocaleIdentifier: &'static AppKit::NSSpeechDictionaryKey);

extern_static!(NSSpeechDictionaryModificationDate: &'static AppKit::NSSpeechDictionaryKey);

extern_static!(NSSpeechDictionaryPronunciations: &'static AppKit::NSSpeechDictionaryKey);

extern_static!(NSSpeechDictionaryAbbreviations: &'static AppKit::NSSpeechDictionaryKey);

extern_static!(NSSpeechDictionaryEntrySpelling: &'static AppKit::NSSpeechDictionaryKey);

extern_static!(NSSpeechDictionaryEntryPhonemes: &'static AppKit::NSSpeechDictionaryKey);

typed_enum!(
    pub type NSVoiceGenderName = Foundation::NSString;
);

extern_static!(NSVoiceGenderNeuter: &'static AppKit::NSVoiceGenderName);

extern_static!(NSVoiceGenderMale: &'static AppKit::NSVoiceGenderName);

extern_static!(NSVoiceGenderFemale: &'static AppKit::NSVoiceGenderName);

extern_static!(NSVoiceGenderNeutral: &'static AppKit::NSVoiceGenderName);

typed_enum!(
    pub type NSSpeechPropertyKey = Foundation::NSString;
);

extern_static!(NSSpeechStatusProperty: &'static AppKit::NSSpeechPropertyKey);

extern_static!(NSSpeechErrorsProperty: &'static AppKit::NSSpeechPropertyKey);

extern_static!(NSSpeechInputModeProperty: &'static AppKit::NSSpeechPropertyKey);

extern_static!(NSSpeechCharacterModeProperty: &'static AppKit::NSSpeechPropertyKey);

extern_static!(NSSpeechNumberModeProperty: &'static AppKit::NSSpeechPropertyKey);

extern_static!(NSSpeechRateProperty: &'static AppKit::NSSpeechPropertyKey);

extern_static!(NSSpeechPitchBaseProperty: &'static AppKit::NSSpeechPropertyKey);

extern_static!(NSSpeechPitchModProperty: &'static AppKit::NSSpeechPropertyKey);

extern_static!(NSSpeechVolumeProperty: &'static AppKit::NSSpeechPropertyKey);

extern_static!(NSSpeechSynthesizerInfoProperty: &'static AppKit::NSSpeechPropertyKey);

extern_static!(NSSpeechRecentSyncProperty: &'static AppKit::NSSpeechPropertyKey);

extern_static!(NSSpeechPhonemeSymbolsProperty: &'static AppKit::NSSpeechPropertyKey);

extern_static!(NSSpeechCurrentVoiceProperty: &'static AppKit::NSSpeechPropertyKey);

extern_static!(NSSpeechCommandDelimiterProperty: &'static AppKit::NSSpeechPropertyKey);

extern_static!(NSSpeechResetProperty: &'static AppKit::NSSpeechPropertyKey);

extern_static!(NSSpeechOutputToFileURLProperty: &'static AppKit::NSSpeechPropertyKey);

extern_static!(NSVoiceLanguage: &'static AppKit::NSVoiceAttributeKey);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSSpeechBoundary {
        NSSpeechImmediateBoundary = 0,
        NSSpeechWordBoundary = 1,
        NSSpeechSentenceBoundary = 2,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSSpeechSynthesizer;

    unsafe impl ClassType for NSSpeechSynthesizer {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSSpeechSynthesizer")]
    unsafe impl NSSpeechSynthesizer {
        #[method_id(@__retain_semantics Init initWithVoice:)]
        pub unsafe fn initWithVoice(
            this: Option<Allocated<Self>>,
            voice: Option<&AppKit::NSSpeechSynthesizerVoiceName>,
        ) -> Option<Id<Self, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(startSpeakingString:)]
        pub unsafe fn startSpeakingString(&self, string: &Foundation::NSString) -> bool;

        #[cfg(all(feature = "Foundation_NSString", feature = "Foundation_NSURL"))]
        #[method(startSpeakingString:toURL:)]
        pub unsafe fn startSpeakingString_toURL(
            &self,
            string: &Foundation::NSString,
            url: &Foundation::NSURL,
        ) -> bool;

        #[method(isSpeaking)]
        pub unsafe fn isSpeaking(&self) -> bool;

        #[method(stopSpeaking)]
        pub unsafe fn stopSpeaking(&self);

        #[method(stopSpeakingAtBoundary:)]
        pub unsafe fn stopSpeakingAtBoundary(&self, boundary: AppKit::NSSpeechBoundary);

        #[method(pauseSpeakingAtBoundary:)]
        pub unsafe fn pauseSpeakingAtBoundary(&self, boundary: AppKit::NSSpeechBoundary);

        #[method(continueSpeaking)]
        pub unsafe fn continueSpeaking(&self);

        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(&self) -> Option<Id<AppKit::NSSpeechSynthesizerDelegate, Shared>>;

        #[method(setDelegate:)]
        pub unsafe fn setDelegate(&self, delegate: Option<&AppKit::NSSpeechSynthesizerDelegate>);

        #[method_id(@__retain_semantics Other voice)]
        pub unsafe fn voice(&self) -> Option<Id<AppKit::NSSpeechSynthesizerVoiceName, Shared>>;

        #[method(setVoice:)]
        pub unsafe fn setVoice(&self, voice: Option<&AppKit::NSSpeechSynthesizerVoiceName>)
            -> bool;

        #[method(rate)]
        pub unsafe fn rate(&self) -> c_float;

        #[method(setRate:)]
        pub unsafe fn setRate(&self, rate: c_float);

        #[method(volume)]
        pub unsafe fn volume(&self) -> c_float;

        #[method(setVolume:)]
        pub unsafe fn setVolume(&self, volume: c_float);

        #[method(usesFeedbackWindow)]
        pub unsafe fn usesFeedbackWindow(&self) -> bool;

        #[method(setUsesFeedbackWindow:)]
        pub unsafe fn setUsesFeedbackWindow(&self, usesFeedbackWindow: bool);

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method(addSpeechDictionary:)]
        pub unsafe fn addSpeechDictionary(
            &self,
            speechDictionary: &Foundation::NSDictionary<AppKit::NSSpeechDictionaryKey, Object>,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other phonemesFromText:)]
        pub unsafe fn phonemesFromText(
            &self,
            text: &Foundation::NSString,
        ) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSError")]
        #[method_id(@__retain_semantics Other objectForProperty:error:_)]
        pub unsafe fn objectForProperty_error(
            &self,
            property: &AppKit::NSSpeechPropertyKey,
        ) -> Result<Id<Object, Shared>, Id<Foundation::NSError, Shared>>;

        #[cfg(feature = "Foundation_NSError")]
        #[method(setObject:forProperty:error:_)]
        pub unsafe fn setObject_forProperty_error(
            &self,
            object: Option<&Object>,
            property: &AppKit::NSSpeechPropertyKey,
        ) -> Result<(), Id<Foundation::NSError, Shared>>;

        #[method(isAnyApplicationSpeaking)]
        pub unsafe fn isAnyApplicationSpeaking() -> bool;

        #[method_id(@__retain_semantics Other defaultVoice)]
        pub unsafe fn defaultVoice() -> Id<AppKit::NSSpeechSynthesizerVoiceName, Shared>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other availableVoices)]
        pub unsafe fn availableVoices(
        ) -> Id<Foundation::NSArray<AppKit::NSSpeechSynthesizerVoiceName>, Shared>;

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method_id(@__retain_semantics Other attributesForVoice:)]
        pub unsafe fn attributesForVoice(
            voice: &AppKit::NSSpeechSynthesizerVoiceName,
        ) -> Id<Foundation::NSDictionary<AppKit::NSVoiceAttributeKey, Object>, Shared>;
    }
);

extern_protocol!(
    pub struct NSSpeechSynthesizerDelegate;

    unsafe impl ProtocolType for NSSpeechSynthesizerDelegate {
        #[optional]
        #[method(speechSynthesizer:didFinishSpeaking:)]
        pub unsafe fn speechSynthesizer_didFinishSpeaking(
            &self,
            sender: &AppKit::NSSpeechSynthesizer,
            finishedSpeaking: bool,
        );

        #[optional]
        #[method(speechSynthesizer:willSpeakWord:ofString:)]
        pub unsafe fn speechSynthesizer_willSpeakWord_ofString(
            &self,
            sender: &AppKit::NSSpeechSynthesizer,
            characterRange: Foundation::NSRange,
            string: &Foundation::NSString,
        );

        #[optional]
        #[method(speechSynthesizer:willSpeakPhoneme:)]
        pub unsafe fn speechSynthesizer_willSpeakPhoneme(
            &self,
            sender: &AppKit::NSSpeechSynthesizer,
            phonemeOpcode: c_short,
        );

        #[optional]
        #[method(speechSynthesizer:didEncounterErrorAtIndex:ofString:message:)]
        pub unsafe fn speechSynthesizer_didEncounterErrorAtIndex_ofString_message(
            &self,
            sender: &AppKit::NSSpeechSynthesizer,
            characterIndex: NSUInteger,
            string: &Foundation::NSString,
            message: &Foundation::NSString,
        );

        #[optional]
        #[method(speechSynthesizer:didEncounterSyncMessage:)]
        pub unsafe fn speechSynthesizer_didEncounterSyncMessage(
            &self,
            sender: &AppKit::NSSpeechSynthesizer,
            message: &Foundation::NSString,
        );
    }
);

typed_enum!(
    pub type NSSpeechMode = Foundation::NSString;
);

extern_static!(NSSpeechModeText: &'static AppKit::NSSpeechMode);

extern_static!(NSSpeechModePhoneme: &'static AppKit::NSSpeechMode);

extern_static!(NSSpeechModeNormal: &'static AppKit::NSSpeechMode);

extern_static!(NSSpeechModeLiteral: &'static AppKit::NSSpeechMode);

typed_enum!(
    pub type NSSpeechStatusKey = Foundation::NSString;
);

extern_static!(NSSpeechStatusOutputBusy: &'static AppKit::NSSpeechStatusKey);

extern_static!(NSSpeechStatusOutputPaused: &'static AppKit::NSSpeechStatusKey);

extern_static!(NSSpeechStatusNumberOfCharactersLeft: &'static AppKit::NSSpeechStatusKey);

extern_static!(NSSpeechStatusPhonemeCode: &'static AppKit::NSSpeechStatusKey);

typed_enum!(
    pub type NSSpeechErrorKey = Foundation::NSString;
);

extern_static!(NSSpeechErrorCount: &'static AppKit::NSSpeechErrorKey);

extern_static!(NSSpeechErrorOldestCode: &'static AppKit::NSSpeechErrorKey);

extern_static!(NSSpeechErrorOldestCharacterOffset: &'static AppKit::NSSpeechErrorKey);

extern_static!(NSSpeechErrorNewestCode: &'static AppKit::NSSpeechErrorKey);

extern_static!(NSSpeechErrorNewestCharacterOffset: &'static AppKit::NSSpeechErrorKey);

typed_enum!(
    pub type NSSpeechSynthesizerInfoKey = Foundation::NSString;
);

extern_static!(NSSpeechSynthesizerInfoIdentifier: &'static AppKit::NSSpeechSynthesizerInfoKey);

extern_static!(NSSpeechSynthesizerInfoVersion: &'static AppKit::NSSpeechSynthesizerInfoKey);

typed_enum!(
    pub type NSSpeechPhonemeInfoKey = Foundation::NSString;
);

extern_static!(NSSpeechPhonemeInfoOpcode: &'static AppKit::NSSpeechPhonemeInfoKey);

extern_static!(NSSpeechPhonemeInfoSymbol: &'static AppKit::NSSpeechPhonemeInfoKey);

extern_static!(NSSpeechPhonemeInfoExample: &'static AppKit::NSSpeechPhonemeInfoKey);

extern_static!(NSSpeechPhonemeInfoHiliteStart: &'static AppKit::NSSpeechPhonemeInfoKey);

extern_static!(NSSpeechPhonemeInfoHiliteEnd: &'static AppKit::NSSpeechPhonemeInfoKey);

typed_enum!(
    pub type NSSpeechCommandDelimiterKey = Foundation::NSString;
);

extern_static!(NSSpeechCommandPrefix: &'static AppKit::NSSpeechCommandDelimiterKey);

extern_static!(NSSpeechCommandSuffix: &'static AppKit::NSSpeechCommandDelimiterKey);
