//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit;
use crate::CoreData;
use crate::Foundation;

ns_options!(
    #[underlying(NSUInteger)]
    pub enum NSWorkspaceIconCreationOptions {
        NSExcludeQuickDrawElementsIconCreationOption = 1 << 1,
        NSExclude10_4ElementsIconCreationOption = 1 << 2,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSWorkspace;

    unsafe impl ClassType for NSWorkspace {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSWorkspace")]
    unsafe impl NSWorkspace {
        #[method_id(@__retain_semantics Other sharedWorkspace)]
        pub unsafe fn sharedWorkspace() -> Id<AppKit::NSWorkspace, Shared>;

        #[cfg(feature = "Foundation_NSNotificationCenter")]
        #[method_id(@__retain_semantics Other notificationCenter)]
        pub unsafe fn notificationCenter(&self) -> Id<Foundation::NSNotificationCenter, Shared>;

        #[cfg(feature = "Foundation_NSURL")]
        #[method(openURL:)]
        pub unsafe fn openURL(&self, url: &Foundation::NSURL) -> bool;

        #[cfg(all(
            feature = "AppKit_NSRunningApplication",
            feature = "AppKit_NSWorkspaceOpenConfiguration",
            feature = "Foundation_NSError",
            feature = "Foundation_NSURL"
        ))]
        #[method(openURL:configuration:completionHandler:)]
        pub unsafe fn openURL_configuration_completionHandler(
            &self,
            url: &Foundation::NSURL,
            configuration: &AppKit::NSWorkspaceOpenConfiguration,
            completionHandler: Option<
                &Block<(*mut AppKit::NSRunningApplication, *mut Foundation::NSError), ()>,
            >,
        );

        #[cfg(all(
            feature = "AppKit_NSRunningApplication",
            feature = "AppKit_NSWorkspaceOpenConfiguration",
            feature = "Foundation_NSArray",
            feature = "Foundation_NSError",
            feature = "Foundation_NSURL"
        ))]
        #[method(openURLs:withApplicationAtURL:configuration:completionHandler:)]
        pub unsafe fn openURLs_withApplicationAtURL_configuration_completionHandler(
            &self,
            urls: &Foundation::NSArray<Foundation::NSURL>,
            applicationURL: &Foundation::NSURL,
            configuration: &AppKit::NSWorkspaceOpenConfiguration,
            completionHandler: Option<
                &Block<(*mut AppKit::NSRunningApplication, *mut Foundation::NSError), ()>,
            >,
        );

        #[cfg(all(
            feature = "AppKit_NSRunningApplication",
            feature = "AppKit_NSWorkspaceOpenConfiguration",
            feature = "Foundation_NSError",
            feature = "Foundation_NSURL"
        ))]
        #[method(openApplicationAtURL:configuration:completionHandler:)]
        pub unsafe fn openApplicationAtURL_configuration_completionHandler(
            &self,
            applicationURL: &Foundation::NSURL,
            configuration: &AppKit::NSWorkspaceOpenConfiguration,
            completionHandler: Option<
                &Block<(*mut AppKit::NSRunningApplication, *mut Foundation::NSError), ()>,
            >,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[method(selectFile:inFileViewerRootedAtPath:)]
        pub unsafe fn selectFile_inFileViewerRootedAtPath(
            &self,
            fullPath: Option<&Foundation::NSString>,
            rootFullPath: &Foundation::NSString,
        ) -> bool;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSURL"))]
        #[method(activateFileViewerSelectingURLs:)]
        pub unsafe fn activateFileViewerSelectingURLs(
            &self,
            fileURLs: &Foundation::NSArray<Foundation::NSURL>,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[method(showSearchResultsForQueryString:)]
        pub unsafe fn showSearchResultsForQueryString(
            &self,
            queryString: &Foundation::NSString,
        ) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method(isFilePackageAtPath:)]
        pub unsafe fn isFilePackageAtPath(&self, fullPath: &Foundation::NSString) -> bool;

        #[cfg(all(feature = "AppKit_NSImage", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other iconForFile:)]
        pub unsafe fn iconForFile(
            &self,
            fullPath: &Foundation::NSString,
        ) -> Id<AppKit::NSImage, Shared>;

        #[cfg(all(
            feature = "AppKit_NSImage",
            feature = "Foundation_NSArray",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other iconForFiles:)]
        pub unsafe fn iconForFiles(
            &self,
            fullPaths: &Foundation::NSArray<Foundation::NSString>,
        ) -> Option<Id<AppKit::NSImage, Shared>>;

        #[cfg(all(feature = "AppKit_NSImage", feature = "Foundation_NSString"))]
        #[method(setIcon:forFile:options:)]
        pub unsafe fn setIcon_forFile_options(
            &self,
            image: Option<&AppKit::NSImage>,
            fullPath: &Foundation::NSString,
            options: NSWorkspaceIconCreationOptions,
        ) -> bool;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other fileLabels)]
        pub unsafe fn fileLabels(&self) -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[cfg(all(feature = "AppKit_NSColor", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Other fileLabelColors)]
        pub unsafe fn fileLabelColors(&self) -> Id<Foundation::NSArray<AppKit::NSColor>, Shared>;

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSURL"
        ))]
        #[method(recycleURLs:completionHandler:)]
        pub unsafe fn recycleURLs_completionHandler(
            &self,
            URLs: &Foundation::NSArray<Foundation::NSURL>,
            handler: Option<
                &Block<
                    (
                        NonNull<Foundation::NSDictionary<Foundation::NSURL, Foundation::NSURL>>,
                        *mut Foundation::NSError,
                    ),
                    (),
                >,
            >,
        );

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSURL"
        ))]
        #[method(duplicateURLs:completionHandler:)]
        pub unsafe fn duplicateURLs_completionHandler(
            &self,
            URLs: &Foundation::NSArray<Foundation::NSURL>,
            handler: Option<
                &Block<
                    (
                        NonNull<Foundation::NSDictionary<Foundation::NSURL, Foundation::NSURL>>,
                        *mut Foundation::NSError,
                    ),
                    (),
                >,
            >,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[method(getFileSystemInfoForPath:isRemovable:isWritable:isUnmountable:description:type:)]
        pub unsafe fn getFileSystemInfoForPath_isRemovable_isWritable_isUnmountable_description_type(
            &self,
            fullPath: &Foundation::NSString,
            removableFlag: *mut Bool,
            writableFlag: *mut Bool,
            unmountableFlag: *mut Bool,
            description: *mut *mut Foundation::NSString,
            fileSystemType: *mut *mut Foundation::NSString,
        ) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method(unmountAndEjectDeviceAtPath:)]
        pub unsafe fn unmountAndEjectDeviceAtPath(&self, path: &Foundation::NSString) -> bool;

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[method(unmountAndEjectDeviceAtURL:error:_)]
        pub unsafe fn unmountAndEjectDeviceAtURL_error(
            &self,
            url: &Foundation::NSURL,
        ) -> Result<(), Id<Foundation::NSError, Shared>>;

        #[method(extendPowerOffBy:)]
        pub unsafe fn extendPowerOffBy(&self, requested: NSInteger) -> NSInteger;

        #[method(hideOtherApplications)]
        pub unsafe fn hideOtherApplications(&self);

        #[cfg(all(feature = "Foundation_NSString", feature = "Foundation_NSURL"))]
        #[method_id(@__retain_semantics Other URLForApplicationWithBundleIdentifier:)]
        pub unsafe fn URLForApplicationWithBundleIdentifier(
            &self,
            bundleIdentifier: &Foundation::NSString,
        ) -> Option<Id<Foundation::NSURL, Shared>>;

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL"
        ))]
        #[method_id(@__retain_semantics Other URLsForApplicationsWithBundleIdentifier:)]
        pub unsafe fn URLsForApplicationsWithBundleIdentifier(
            &self,
            bundleIdentifier: &Foundation::NSString,
        ) -> Id<Foundation::NSArray<Foundation::NSURL>, Shared>;

        #[cfg(feature = "Foundation_NSURL")]
        #[method_id(@__retain_semantics Other URLForApplicationToOpenURL:)]
        pub unsafe fn URLForApplicationToOpenURL(
            &self,
            url: &Foundation::NSURL,
        ) -> Option<Id<Foundation::NSURL, Shared>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSURL"))]
        #[method_id(@__retain_semantics Other URLsForApplicationsToOpenURL:)]
        pub unsafe fn URLsForApplicationsToOpenURL(
            &self,
            url: &Foundation::NSURL,
        ) -> Id<Foundation::NSArray<Foundation::NSURL>, Shared>;

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[method(setDefaultApplicationAtURL:toOpenContentTypeOfFileAtURL:completionHandler:)]
        pub unsafe fn setDefaultApplicationAtURL_toOpenContentTypeOfFileAtURL_completionHandler(
            &self,
            applicationURL: &Foundation::NSURL,
            url: &Foundation::NSURL,
            completionHandler: Option<&Block<(*mut Foundation::NSError,), ()>>,
        );

        #[cfg(all(
            feature = "Foundation_NSError",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL"
        ))]
        #[method(setDefaultApplicationAtURL:toOpenURLsWithScheme:completionHandler:)]
        pub unsafe fn setDefaultApplicationAtURL_toOpenURLsWithScheme_completionHandler(
            &self,
            applicationURL: &Foundation::NSURL,
            urlScheme: &Foundation::NSString,
            completionHandler: Option<&Block<(*mut Foundation::NSError,), ()>>,
        );

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[method(setDefaultApplicationAtURL:toOpenFileAtURL:completionHandler:)]
        pub unsafe fn setDefaultApplicationAtURL_toOpenFileAtURL_completionHandler(
            &self,
            applicationURL: &Foundation::NSURL,
            url: &Foundation::NSURL,
            completionHandler: Option<&Block<(*mut Foundation::NSError,), ()>>,
        );

        #[cfg(feature = "AppKit_NSRunningApplication")]
        #[method_id(@__retain_semantics Other frontmostApplication)]
        pub unsafe fn frontmostApplication(
            &self,
        ) -> Option<Id<AppKit::NSRunningApplication, Shared>>;

        #[cfg(feature = "AppKit_NSRunningApplication")]
        #[method_id(@__retain_semantics Other menuBarOwningApplication)]
        pub unsafe fn menuBarOwningApplication(
            &self,
        ) -> Option<Id<AppKit::NSRunningApplication, Shared>>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSWorkspaceOpenConfiguration;

    unsafe impl ClassType for NSWorkspaceOpenConfiguration {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSWorkspaceOpenConfiguration")]
    unsafe impl NSWorkspaceOpenConfiguration {
        #[method_id(@__retain_semantics Other configuration)]
        pub unsafe fn configuration() -> Id<Self, Shared>;

        #[method(promptsUserIfNeeded)]
        pub unsafe fn promptsUserIfNeeded(&self) -> bool;

        #[method(setPromptsUserIfNeeded:)]
        pub unsafe fn setPromptsUserIfNeeded(&self, promptsUserIfNeeded: bool);

        #[method(addsToRecentItems)]
        pub unsafe fn addsToRecentItems(&self) -> bool;

        #[method(setAddsToRecentItems:)]
        pub unsafe fn setAddsToRecentItems(&self, addsToRecentItems: bool);

        #[method(activates)]
        pub unsafe fn activates(&self) -> bool;

        #[method(setActivates:)]
        pub unsafe fn setActivates(&self, activates: bool);

        #[method(hides)]
        pub unsafe fn hides(&self) -> bool;

        #[method(setHides:)]
        pub unsafe fn setHides(&self, hides: bool);

        #[method(hidesOthers)]
        pub unsafe fn hidesOthers(&self) -> bool;

        #[method(setHidesOthers:)]
        pub unsafe fn setHidesOthers(&self, hidesOthers: bool);

        #[method(isForPrinting)]
        pub unsafe fn isForPrinting(&self) -> bool;

        #[method(setForPrinting:)]
        pub unsafe fn setForPrinting(&self, forPrinting: bool);

        #[method(createsNewApplicationInstance)]
        pub unsafe fn createsNewApplicationInstance(&self) -> bool;

        #[method(setCreatesNewApplicationInstance:)]
        pub unsafe fn setCreatesNewApplicationInstance(&self, createsNewApplicationInstance: bool);

        #[method(allowsRunningApplicationSubstitution)]
        pub unsafe fn allowsRunningApplicationSubstitution(&self) -> bool;

        #[method(setAllowsRunningApplicationSubstitution:)]
        pub unsafe fn setAllowsRunningApplicationSubstitution(
            &self,
            allowsRunningApplicationSubstitution: bool,
        );

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other arguments)]
        pub unsafe fn arguments(&self) -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method(setArguments:)]
        pub unsafe fn setArguments(&self, arguments: &Foundation::NSArray<Foundation::NSString>);

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other environment)]
        pub unsafe fn environment(
            &self,
        ) -> Id<Foundation::NSDictionary<Foundation::NSString, Foundation::NSString>, Shared>;

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method(setEnvironment:)]
        pub unsafe fn setEnvironment(
            &self,
            environment: &Foundation::NSDictionary<Foundation::NSString, Foundation::NSString>,
        );

        #[cfg(feature = "Foundation_NSAppleEventDescriptor")]
        #[method_id(@__retain_semantics Other appleEvent)]
        pub unsafe fn appleEvent(&self) -> Option<Id<Foundation::NSAppleEventDescriptor, Shared>>;

        #[cfg(feature = "Foundation_NSAppleEventDescriptor")]
        #[method(setAppleEvent:)]
        pub unsafe fn setAppleEvent(&self, appleEvent: Option<&Foundation::NSAppleEventDescriptor>);

        #[method(requiresUniversalLinks)]
        pub unsafe fn requiresUniversalLinks(&self) -> bool;

        #[method(setRequiresUniversalLinks:)]
        pub unsafe fn setRequiresUniversalLinks(&self, requiresUniversalLinks: bool);
    }
);

typed_enum!(
    pub type NSWorkspaceDesktopImageOptionKey = Foundation::NSString;
);

extern_static!(
    NSWorkspaceDesktopImageScalingKey: &'static AppKit::NSWorkspaceDesktopImageOptionKey
);

extern_static!(
    NSWorkspaceDesktopImageAllowClippingKey: &'static AppKit::NSWorkspaceDesktopImageOptionKey
);

extern_static!(
    NSWorkspaceDesktopImageFillColorKey: &'static AppKit::NSWorkspaceDesktopImageOptionKey
);

extern_methods!(
    /// NSDesktopImages
    #[cfg(feature = "AppKit_NSWorkspace")]
    unsafe impl NSWorkspace {
        #[cfg(all(
            feature = "AppKit_NSScreen",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSURL"
        ))]
        #[method(setDesktopImageURL:forScreen:options:error:_)]
        pub unsafe fn setDesktopImageURL_forScreen_options_error(
            &self,
            url: &Foundation::NSURL,
            screen: &AppKit::NSScreen,
            options: &Foundation::NSDictionary<AppKit::NSWorkspaceDesktopImageOptionKey, Object>,
        ) -> Result<(), Id<Foundation::NSError, Shared>>;

        #[cfg(all(feature = "AppKit_NSScreen", feature = "Foundation_NSURL"))]
        #[method_id(@__retain_semantics Other desktopImageURLForScreen:)]
        pub unsafe fn desktopImageURLForScreen(
            &self,
            screen: &AppKit::NSScreen,
        ) -> Option<Id<Foundation::NSURL, Shared>>;

        #[cfg(all(feature = "AppKit_NSScreen", feature = "Foundation_NSDictionary"))]
        #[method_id(@__retain_semantics Other desktopImageOptionsForScreen:)]
        pub unsafe fn desktopImageOptionsForScreen(
            &self,
            screen: &AppKit::NSScreen,
        ) -> Option<
            Id<Foundation::NSDictionary<AppKit::NSWorkspaceDesktopImageOptionKey, Object>, Shared>,
        >;
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSWorkspaceAuthorizationType {
        NSWorkspaceAuthorizationTypeCreateSymbolicLink = 0,
        NSWorkspaceAuthorizationTypeSetAttributes = 1,
        NSWorkspaceAuthorizationTypeReplaceFile = 2,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSWorkspaceAuthorization;

    unsafe impl ClassType for NSWorkspaceAuthorization {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSWorkspaceAuthorization")]
    unsafe impl NSWorkspaceAuthorization {}
);

extern_methods!(
    /// NSWorkspaceAuthorization
    #[cfg(feature = "AppKit_NSWorkspace")]
    unsafe impl NSWorkspace {
        #[cfg(all(
            feature = "AppKit_NSWorkspaceAuthorization",
            feature = "Foundation_NSError"
        ))]
        #[method(requestAuthorizationOfType:completionHandler:)]
        pub unsafe fn requestAuthorizationOfType_completionHandler(
            &self,
            type_: NSWorkspaceAuthorizationType,
            completionHandler: &Block<
                (
                    *mut AppKit::NSWorkspaceAuthorization,
                    *mut Foundation::NSError,
                ),
                (),
            >,
        );
    }
);

extern_methods!(
    /// NSWorkspaceAuthorization
    #[cfg(feature = "Foundation_NSFileManager")]
    unsafe impl Foundation::NSFileManager {
        #[cfg(feature = "AppKit_NSWorkspaceAuthorization")]
        #[method_id(@__retain_semantics Other fileManagerWithAuthorization:)]
        pub unsafe fn fileManagerWithAuthorization(
            authorization: &AppKit::NSWorkspaceAuthorization,
        ) -> Id<Self, Shared>;
    }
);

extern_static!(NSWorkspaceApplicationKey: &'static Foundation::NSString);

extern_static!(
    NSWorkspaceWillLaunchApplicationNotification: &'static Foundation::NSNotificationName
);

extern_static!(
    NSWorkspaceDidLaunchApplicationNotification: &'static Foundation::NSNotificationName
);

extern_static!(
    NSWorkspaceDidTerminateApplicationNotification: &'static Foundation::NSNotificationName
);

extern_static!(NSWorkspaceDidHideApplicationNotification: &'static Foundation::NSNotificationName);

extern_static!(
    NSWorkspaceDidUnhideApplicationNotification: &'static Foundation::NSNotificationName
);

extern_static!(
    NSWorkspaceDidActivateApplicationNotification: &'static Foundation::NSNotificationName
);

extern_static!(
    NSWorkspaceDidDeactivateApplicationNotification: &'static Foundation::NSNotificationName
);

extern_static!(NSWorkspaceVolumeLocalizedNameKey: &'static Foundation::NSString);

extern_static!(NSWorkspaceVolumeURLKey: &'static Foundation::NSString);

extern_static!(NSWorkspaceVolumeOldLocalizedNameKey: &'static Foundation::NSString);

extern_static!(NSWorkspaceVolumeOldURLKey: &'static Foundation::NSString);

extern_static!(NSWorkspaceDidMountNotification: &'static Foundation::NSNotificationName);

extern_static!(NSWorkspaceDidUnmountNotification: &'static Foundation::NSNotificationName);

extern_static!(NSWorkspaceWillUnmountNotification: &'static Foundation::NSNotificationName);

extern_static!(NSWorkspaceDidRenameVolumeNotification: &'static Foundation::NSNotificationName);

extern_static!(NSWorkspaceWillPowerOffNotification: &'static Foundation::NSNotificationName);

extern_static!(NSWorkspaceWillSleepNotification: &'static Foundation::NSNotificationName);

extern_static!(NSWorkspaceDidWakeNotification: &'static Foundation::NSNotificationName);

extern_static!(NSWorkspaceScreensDidSleepNotification: &'static Foundation::NSNotificationName);

extern_static!(NSWorkspaceScreensDidWakeNotification: &'static Foundation::NSNotificationName);

extern_static!(
    NSWorkspaceSessionDidBecomeActiveNotification: &'static Foundation::NSNotificationName
);

extern_static!(
    NSWorkspaceSessionDidResignActiveNotification: &'static Foundation::NSNotificationName
);

extern_static!(NSWorkspaceDidChangeFileLabelsNotification: &'static Foundation::NSNotificationName);

extern_static!(
    NSWorkspaceActiveSpaceDidChangeNotification: &'static Foundation::NSNotificationName
);

typed_enum!(
    pub type NSWorkspaceFileOperationName = Foundation::NSString;
);

ns_options!(
    #[underlying(NSUInteger)]
    pub enum NSWorkspaceLaunchOptions {
        NSWorkspaceLaunchAndPrint = 0x00000002,
        NSWorkspaceLaunchWithErrorPresentation = 0x00000040,
        NSWorkspaceLaunchInhibitingBackgroundOnly = 0x00000080,
        NSWorkspaceLaunchWithoutAddingToRecents = 0x00000100,
        NSWorkspaceLaunchWithoutActivation = 0x00000200,
        NSWorkspaceLaunchAsync = 0x00010000,
        NSWorkspaceLaunchNewInstance = 0x00080000,
        NSWorkspaceLaunchAndHide = 0x00100000,
        NSWorkspaceLaunchAndHideOthers = 0x00200000,
        NSWorkspaceLaunchDefault = NSWorkspaceLaunchAsync,
        NSWorkspaceLaunchAllowingClassicStartup = 0x00020000,
        NSWorkspaceLaunchPreferringClassic = 0x00040000,
    }
);

typed_enum!(
    pub type NSWorkspaceLaunchConfigurationKey = Foundation::NSString;
);

extern_static!(
    NSWorkspaceLaunchConfigurationAppleEvent: &'static AppKit::NSWorkspaceLaunchConfigurationKey
);

extern_static!(
    NSWorkspaceLaunchConfigurationArguments: &'static AppKit::NSWorkspaceLaunchConfigurationKey
);

extern_static!(
    NSWorkspaceLaunchConfigurationEnvironment: &'static AppKit::NSWorkspaceLaunchConfigurationKey
);

extern_static!(
    NSWorkspaceLaunchConfigurationArchitecture: &'static AppKit::NSWorkspaceLaunchConfigurationKey
);

extern_methods!(
    /// NSDeprecated
    #[cfg(feature = "AppKit_NSWorkspace")]
    unsafe impl NSWorkspace {
        #[cfg(feature = "Foundation_NSString")]
        #[method(openFile:)]
        pub unsafe fn openFile(&self, fullPath: &Foundation::NSString) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method(openFile:withApplication:)]
        pub unsafe fn openFile_withApplication(
            &self,
            fullPath: &Foundation::NSString,
            appName: Option<&Foundation::NSString>,
        ) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method(openFile:withApplication:andDeactivate:)]
        pub unsafe fn openFile_withApplication_andDeactivate(
            &self,
            fullPath: &Foundation::NSString,
            appName: Option<&Foundation::NSString>,
            flag: bool,
        ) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method(launchApplication:)]
        pub unsafe fn launchApplication(&self, appName: &Foundation::NSString) -> bool;

        #[cfg(all(
            feature = "AppKit_NSRunningApplication",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSURL"
        ))]
        #[method_id(@__retain_semantics Other launchApplicationAtURL:options:configuration:error:_)]
        pub unsafe fn launchApplicationAtURL_options_configuration_error(
            &self,
            url: &Foundation::NSURL,
            options: NSWorkspaceLaunchOptions,
            configuration: &Foundation::NSDictionary<
                AppKit::NSWorkspaceLaunchConfigurationKey,
                Object,
            >,
        ) -> Result<Id<AppKit::NSRunningApplication, Shared>, Id<Foundation::NSError, Shared>>;

        #[cfg(all(
            feature = "AppKit_NSRunningApplication",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSURL"
        ))]
        #[method_id(@__retain_semantics Other openURL:options:configuration:error:_)]
        pub unsafe fn openURL_options_configuration_error(
            &self,
            url: &Foundation::NSURL,
            options: NSWorkspaceLaunchOptions,
            configuration: &Foundation::NSDictionary<
                AppKit::NSWorkspaceLaunchConfigurationKey,
                Object,
            >,
        ) -> Result<Id<AppKit::NSRunningApplication, Shared>, Id<Foundation::NSError, Shared>>;

        #[cfg(all(
            feature = "AppKit_NSRunningApplication",
            feature = "Foundation_NSArray",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSURL"
        ))]
        #[method_id(@__retain_semantics Other openURLs:withApplicationAtURL:options:configuration:error:_)]
        pub unsafe fn openURLs_withApplicationAtURL_options_configuration_error(
            &self,
            urls: &Foundation::NSArray<Foundation::NSURL>,
            applicationURL: &Foundation::NSURL,
            options: NSWorkspaceLaunchOptions,
            configuration: &Foundation::NSDictionary<
                AppKit::NSWorkspaceLaunchConfigurationKey,
                Object,
            >,
        ) -> Result<Id<AppKit::NSRunningApplication, Shared>, Id<Foundation::NSError, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(launchApplication:showIcon:autolaunch:)]
        pub unsafe fn launchApplication_showIcon_autolaunch(
            &self,
            appName: &Foundation::NSString,
            showIcon: bool,
            autolaunch: bool,
        ) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other fullPathForApplication:)]
        pub unsafe fn fullPathForApplication(
            &self,
            appName: &Foundation::NSString,
        ) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other absolutePathForAppBundleWithIdentifier:)]
        pub unsafe fn absolutePathForAppBundleWithIdentifier(
            &self,
            bundleIdentifier: &Foundation::NSString,
        ) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(all(
            feature = "Foundation_NSAppleEventDescriptor",
            feature = "Foundation_NSNumber",
            feature = "Foundation_NSString"
        ))]
        #[method(launchAppWithBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifier:)]
        pub unsafe fn launchAppWithBundleIdentifier_options_additionalEventParamDescriptor_launchIdentifier(
            &self,
            bundleIdentifier: &Foundation::NSString,
            options: NSWorkspaceLaunchOptions,
            descriptor: Option<&Foundation::NSAppleEventDescriptor>,
            identifier: *mut *mut Foundation::NSNumber,
        ) -> bool;

        #[cfg(all(
            feature = "Foundation_NSAppleEventDescriptor",
            feature = "Foundation_NSArray",
            feature = "Foundation_NSNumber",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL"
        ))]
        #[method(openURLs:withAppBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifiers:)]
        pub unsafe fn openURLs_withAppBundleIdentifier_options_additionalEventParamDescriptor_launchIdentifiers(
            &self,
            urls: &Foundation::NSArray<Foundation::NSURL>,
            bundleIdentifier: Option<&Foundation::NSString>,
            options: NSWorkspaceLaunchOptions,
            descriptor: Option<&Foundation::NSAppleEventDescriptor>,
            identifiers: *mut *mut Foundation::NSArray<Foundation::NSNumber>,
        ) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method(openTempFile:)]
        pub unsafe fn openTempFile(&self, fullPath: &Foundation::NSString) -> bool;

        #[method(findApplications)]
        pub unsafe fn findApplications(&self);

        #[method(noteUserDefaultsChanged)]
        pub unsafe fn noteUserDefaultsChanged(&self);

        #[cfg(feature = "AppKit_NSImage")]
        #[method(slideImage:from:to:)]
        pub unsafe fn slideImage_from_to(
            &self,
            image: &AppKit::NSImage,
            fromPoint: NSPoint,
            toPoint: NSPoint,
        );

        #[method(checkForRemovableMedia)]
        pub unsafe fn checkForRemovableMedia(&self);

        #[method(fileSystemChanged)]
        pub unsafe fn fileSystemChanged(&self) -> bool;

        #[method(userDefaultsChanged)]
        pub unsafe fn userDefaultsChanged(&self) -> bool;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other mountNewRemovableMedia)]
        pub unsafe fn mountNewRemovableMedia(&self) -> Option<Id<Foundation::NSArray, Shared>>;

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method_id(@__retain_semantics Other activeApplication)]
        pub unsafe fn activeApplication(&self) -> Option<Id<Foundation::NSDictionary, Shared>>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other mountedLocalVolumePaths)]
        pub unsafe fn mountedLocalVolumePaths(&self) -> Option<Id<Foundation::NSArray, Shared>>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other mountedRemovableMedia)]
        pub unsafe fn mountedRemovableMedia(&self) -> Option<Id<Foundation::NSArray, Shared>>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other launchedApplications)]
        pub unsafe fn launchedApplications(&self) -> Option<Id<Foundation::NSArray, Shared>>;

        #[cfg(all(
            feature = "AppKit_NSImage",
            feature = "AppKit_NSView",
            feature = "Foundation_NSString"
        ))]
        #[method(openFile:fromImage:at:inView:)]
        pub unsafe fn openFile_fromImage_at_inView(
            &self,
            fullPath: &Foundation::NSString,
            image: Option<&AppKit::NSImage>,
            point: NSPoint,
            view: Option<&AppKit::NSView>,
        ) -> bool;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method(performFileOperation:source:destination:files:tag:)]
        pub unsafe fn performFileOperation_source_destination_files_tag(
            &self,
            operation: &AppKit::NSWorkspaceFileOperationName,
            source: &Foundation::NSString,
            destination: &Foundation::NSString,
            files: &Foundation::NSArray,
            tag: *mut NSInteger,
        ) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method(getInfoForFile:application:type:)]
        pub unsafe fn getInfoForFile_application_type(
            &self,
            fullPath: &Foundation::NSString,
            appName: *mut *mut Foundation::NSString,
            type_: *mut *mut Foundation::NSString,
        ) -> bool;

        #[cfg(all(feature = "AppKit_NSImage", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other iconForFileType:)]
        pub unsafe fn iconForFileType(
            &self,
            fileType: &Foundation::NSString,
        ) -> Id<AppKit::NSImage, Shared>;

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other typeOfFile:error:_)]
        pub unsafe fn typeOfFile_error(
            &self,
            absoluteFilePath: &Foundation::NSString,
        ) -> Result<Id<Foundation::NSString, Shared>, Id<Foundation::NSError, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other localizedDescriptionForType:)]
        pub unsafe fn localizedDescriptionForType(
            &self,
            typeName: &Foundation::NSString,
        ) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other preferredFilenameExtensionForType:)]
        pub unsafe fn preferredFilenameExtensionForType(
            &self,
            typeName: &Foundation::NSString,
        ) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(filenameExtension:isValidForType:)]
        pub unsafe fn filenameExtension_isValidForType(
            &self,
            filenameExtension: &Foundation::NSString,
            typeName: &Foundation::NSString,
        ) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method(type:conformsToType:)]
        pub unsafe fn type_conformsToType(
            &self,
            firstTypeName: &Foundation::NSString,
            secondTypeName: &Foundation::NSString,
        ) -> bool;
    }
);

extern_static!(NSWorkspaceMoveOperation: &'static AppKit::NSWorkspaceFileOperationName);

extern_static!(NSWorkspaceCopyOperation: &'static AppKit::NSWorkspaceFileOperationName);

extern_static!(NSWorkspaceLinkOperation: &'static AppKit::NSWorkspaceFileOperationName);

extern_static!(NSWorkspaceCompressOperation: &'static AppKit::NSWorkspaceFileOperationName);

extern_static!(NSWorkspaceDecompressOperation: &'static AppKit::NSWorkspaceFileOperationName);

extern_static!(NSWorkspaceEncryptOperation: &'static AppKit::NSWorkspaceFileOperationName);

extern_static!(NSWorkspaceDecryptOperation: &'static AppKit::NSWorkspaceFileOperationName);

extern_static!(NSWorkspaceDestroyOperation: &'static AppKit::NSWorkspaceFileOperationName);

extern_static!(NSWorkspaceRecycleOperation: &'static AppKit::NSWorkspaceFileOperationName);

extern_static!(NSWorkspaceDuplicateOperation: &'static AppKit::NSWorkspaceFileOperationName);

extern_static!(
    NSWorkspaceDidPerformFileOperationNotification: &'static Foundation::NSNotificationName
);

extern_static!(NSPlainFileType: &'static Foundation::NSString);

extern_static!(NSDirectoryFileType: &'static Foundation::NSString);

extern_static!(NSApplicationFileType: &'static Foundation::NSString);

extern_static!(NSFilesystemFileType: &'static Foundation::NSString);

extern_static!(NSShellCommandFileType: &'static Foundation::NSString);
