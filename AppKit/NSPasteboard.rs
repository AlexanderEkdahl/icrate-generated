//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit;
use crate::CoreData;
use crate::Foundation;

typed_extensible_enum!(
    pub type NSPasteboardType = Foundation::NSString;
);

extern_static!(NSPasteboardTypeString: &'static AppKit::NSPasteboardType);

extern_static!(NSPasteboardTypePDF: &'static AppKit::NSPasteboardType);

extern_static!(NSPasteboardTypeTIFF: &'static AppKit::NSPasteboardType);

extern_static!(NSPasteboardTypePNG: &'static AppKit::NSPasteboardType);

extern_static!(NSPasteboardTypeRTF: &'static AppKit::NSPasteboardType);

extern_static!(NSPasteboardTypeRTFD: &'static AppKit::NSPasteboardType);

extern_static!(NSPasteboardTypeHTML: &'static AppKit::NSPasteboardType);

extern_static!(NSPasteboardTypeTabularText: &'static AppKit::NSPasteboardType);

extern_static!(NSPasteboardTypeFont: &'static AppKit::NSPasteboardType);

extern_static!(NSPasteboardTypeRuler: &'static AppKit::NSPasteboardType);

extern_static!(NSPasteboardTypeColor: &'static AppKit::NSPasteboardType);

extern_static!(NSPasteboardTypeSound: &'static AppKit::NSPasteboardType);

extern_static!(NSPasteboardTypeMultipleTextSelection: &'static AppKit::NSPasteboardType);

extern_static!(NSPasteboardTypeTextFinderOptions: &'static AppKit::NSPasteboardType);

extern_static!(NSPasteboardTypeURL: &'static AppKit::NSPasteboardType);

extern_static!(NSPasteboardTypeFileURL: &'static AppKit::NSPasteboardType);

typed_extensible_enum!(
    pub type NSPasteboardName = Foundation::NSString;
);

extern_static!(NSPasteboardNameGeneral: &'static AppKit::NSPasteboardName);

extern_static!(NSPasteboardNameFont: &'static AppKit::NSPasteboardName);

extern_static!(NSPasteboardNameRuler: &'static AppKit::NSPasteboardName);

extern_static!(NSPasteboardNameFind: &'static AppKit::NSPasteboardName);

extern_static!(NSPasteboardNameDrag: &'static AppKit::NSPasteboardName);

ns_options!(
    #[underlying(NSUInteger)]
    pub enum NSPasteboardContentsOptions {
        NSPasteboardContentsCurrentHostOnly = 1 << 0,
    }
);

typed_enum!(
    pub type NSPasteboardReadingOptionKey = Foundation::NSString;
);

extern_static!(
    NSPasteboardURLReadingFileURLsOnlyKey: &'static AppKit::NSPasteboardReadingOptionKey
);

extern_static!(
    NSPasteboardURLReadingContentsConformToTypesKey: &'static AppKit::NSPasteboardReadingOptionKey
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSPasteboard;

    unsafe impl ClassType for NSPasteboard {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSPasteboard")]
    unsafe impl NSPasteboard {
        #[method_id(@__retain_semantics Other generalPasteboard)]
        pub unsafe fn generalPasteboard() -> Id<AppKit::NSPasteboard, Shared>;

        #[method_id(@__retain_semantics Other pasteboardWithName:)]
        pub unsafe fn pasteboardWithName(
            name: &AppKit::NSPasteboardName,
        ) -> Id<AppKit::NSPasteboard, Shared>;

        #[method_id(@__retain_semantics Other pasteboardWithUniqueName)]
        pub unsafe fn pasteboardWithUniqueName() -> Id<AppKit::NSPasteboard, Shared>;

        #[method_id(@__retain_semantics Other name)]
        pub unsafe fn name(&self) -> Id<AppKit::NSPasteboardName, Shared>;

        #[method(changeCount)]
        pub unsafe fn changeCount(&self) -> NSInteger;

        #[method(prepareForNewContentsWithOptions:)]
        pub unsafe fn prepareForNewContentsWithOptions(
            &self,
            options: NSPasteboardContentsOptions,
        ) -> NSInteger;

        #[method(clearContents)]
        pub unsafe fn clearContents(&self) -> NSInteger;

        #[cfg(feature = "Foundation_NSArray")]
        #[method(writeObjects:)]
        pub unsafe fn writeObjects(
            &self,
            objects: &Foundation::NSArray<AppKit::NSPasteboardWriting>,
        ) -> bool;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSDictionary"))]
        #[method_id(@__retain_semantics Other readObjectsForClasses:options:)]
        pub unsafe fn readObjectsForClasses_options(
            &self,
            classArray: &Foundation::NSArray<TodoClass>,
            options: Option<
                &Foundation::NSDictionary<AppKit::NSPasteboardReadingOptionKey, Object>,
            >,
        ) -> Option<Id<Foundation::NSArray, Shared>>;

        #[cfg(all(feature = "AppKit_NSPasteboardItem", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Other pasteboardItems)]
        pub unsafe fn pasteboardItems(
            &self,
        ) -> Option<Id<Foundation::NSArray<AppKit::NSPasteboardItem>, Shared>>;

        #[cfg(feature = "AppKit_NSPasteboardItem")]
        #[method(indexOfPasteboardItem:)]
        pub unsafe fn indexOfPasteboardItem(
            &self,
            pasteboardItem: &AppKit::NSPasteboardItem,
        ) -> NSUInteger;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method(canReadItemWithDataConformingToTypes:)]
        pub unsafe fn canReadItemWithDataConformingToTypes(
            &self,
            types: &Foundation::NSArray<Foundation::NSString>,
        ) -> bool;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSDictionary"))]
        #[method(canReadObjectForClasses:options:)]
        pub unsafe fn canReadObjectForClasses_options(
            &self,
            classArray: &Foundation::NSArray<TodoClass>,
            options: Option<
                &Foundation::NSDictionary<AppKit::NSPasteboardReadingOptionKey, Object>,
            >,
        ) -> bool;

        #[cfg(feature = "Foundation_NSArray")]
        #[method(declareTypes:owner:)]
        pub unsafe fn declareTypes_owner(
            &self,
            newTypes: &Foundation::NSArray<AppKit::NSPasteboardType>,
            newOwner: Option<&Object>,
        ) -> NSInteger;

        #[cfg(feature = "Foundation_NSArray")]
        #[method(addTypes:owner:)]
        pub unsafe fn addTypes_owner(
            &self,
            newTypes: &Foundation::NSArray<AppKit::NSPasteboardType>,
            newOwner: Option<&Object>,
        ) -> NSInteger;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other types)]
        pub unsafe fn types(
            &self,
        ) -> Option<Id<Foundation::NSArray<AppKit::NSPasteboardType>, Shared>>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other availableTypeFromArray:)]
        pub unsafe fn availableTypeFromArray(
            &self,
            types: &Foundation::NSArray<AppKit::NSPasteboardType>,
        ) -> Option<Id<AppKit::NSPasteboardType, Shared>>;

        #[cfg(feature = "Foundation_NSData")]
        #[method(setData:forType:)]
        pub unsafe fn setData_forType(
            &self,
            data: Option<&Foundation::NSData>,
            dataType: &AppKit::NSPasteboardType,
        ) -> bool;

        #[method(setPropertyList:forType:)]
        pub unsafe fn setPropertyList_forType(
            &self,
            plist: &Object,
            dataType: &AppKit::NSPasteboardType,
        ) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setString:forType:)]
        pub unsafe fn setString_forType(
            &self,
            string: &Foundation::NSString,
            dataType: &AppKit::NSPasteboardType,
        ) -> bool;

        #[cfg(feature = "Foundation_NSData")]
        #[method_id(@__retain_semantics Other dataForType:)]
        pub unsafe fn dataForType(
            &self,
            dataType: &AppKit::NSPasteboardType,
        ) -> Option<Id<Foundation::NSData, Shared>>;

        #[method_id(@__retain_semantics Other propertyListForType:)]
        pub unsafe fn propertyListForType(
            &self,
            dataType: &AppKit::NSPasteboardType,
        ) -> Option<Id<Object, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other stringForType:)]
        pub unsafe fn stringForType(
            &self,
            dataType: &AppKit::NSPasteboardType,
        ) -> Option<Id<Foundation::NSString, Shared>>;
    }
);

extern_methods!(
    /// FilterServices
    #[cfg(feature = "AppKit_NSPasteboard")]
    unsafe impl NSPasteboard {
        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other typesFilterableTo:)]
        pub unsafe fn typesFilterableTo(
            type_: &AppKit::NSPasteboardType,
        ) -> Id<Foundation::NSArray<AppKit::NSPasteboardType>, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other pasteboardByFilteringFile:)]
        pub unsafe fn pasteboardByFilteringFile(
            filename: &Foundation::NSString,
        ) -> Id<AppKit::NSPasteboard, Shared>;

        #[cfg(feature = "Foundation_NSData")]
        #[method_id(@__retain_semantics Other pasteboardByFilteringData:ofType:)]
        pub unsafe fn pasteboardByFilteringData_ofType(
            data: &Foundation::NSData,
            type_: &AppKit::NSPasteboardType,
        ) -> Id<AppKit::NSPasteboard, Shared>;

        #[method_id(@__retain_semantics Other pasteboardByFilteringTypesInPasteboard:)]
        pub unsafe fn pasteboardByFilteringTypesInPasteboard(
            pboard: &AppKit::NSPasteboard,
        ) -> Id<AppKit::NSPasteboard, Shared>;
    }
);

extern_protocol!(
    pub struct NSPasteboardTypeOwner;

    unsafe impl ProtocolType for NSPasteboardTypeOwner {
        #[method(pasteboard:provideDataForType:)]
        pub unsafe fn pasteboard_provideDataForType(
            &self,
            sender: &AppKit::NSPasteboard,
            type_: &AppKit::NSPasteboardType,
        );

        #[optional]
        #[method(pasteboardChangedOwner:)]
        pub unsafe fn pasteboardChangedOwner(&self, sender: &AppKit::NSPasteboard);
    }
);

ns_options!(
    #[underlying(NSUInteger)]
    pub enum NSPasteboardWritingOptions {
        NSPasteboardWritingPromised = 1 << 9,
    }
);

extern_protocol!(
    pub struct NSPasteboardWriting;

    unsafe impl ProtocolType for NSPasteboardWriting {
        #[method_id(@__retain_semantics Other writableTypesForPasteboard:)]
        pub unsafe fn writableTypesForPasteboard(
            &self,
            pasteboard: &AppKit::NSPasteboard,
        ) -> Id<Foundation::NSArray<AppKit::NSPasteboardType>, Shared>;

        #[optional]
        #[method(writingOptionsForType:pasteboard:)]
        pub unsafe fn writingOptionsForType_pasteboard(
            &self,
            type_: &AppKit::NSPasteboardType,
            pasteboard: &AppKit::NSPasteboard,
        ) -> NSPasteboardWritingOptions;

        #[method_id(@__retain_semantics Other pasteboardPropertyListForType:)]
        pub unsafe fn pasteboardPropertyListForType(
            &self,
            type_: &AppKit::NSPasteboardType,
        ) -> Option<Id<Object, Shared>>;
    }
);

ns_options!(
    #[underlying(NSUInteger)]
    pub enum NSPasteboardReadingOptions {
        NSPasteboardReadingAsData = 0,
        NSPasteboardReadingAsString = 1 << 0,
        NSPasteboardReadingAsPropertyList = 1 << 1,
        NSPasteboardReadingAsKeyedArchive = 1 << 2,
    }
);

extern_protocol!(
    pub struct NSPasteboardReading;

    unsafe impl ProtocolType for NSPasteboardReading {
        #[optional]
        #[method_id(@__retain_semantics Init initWithPasteboardPropertyList:ofType:)]
        pub unsafe fn initWithPasteboardPropertyList_ofType(
            this: Option<Allocated<Self>>,
            propertyList: &Object,
            type_: &AppKit::NSPasteboardType,
        ) -> Option<Id<Self, Shared>>;
    }
);

extern_methods!(
    /// NSPasteboardSupport
    #[cfg(feature = "Foundation_NSURL")]
    unsafe impl Foundation::NSURL {
        #[cfg(feature = "AppKit_NSPasteboard")]
        #[method_id(@__retain_semantics Other URLFromPasteboard:)]
        pub unsafe fn URLFromPasteboard(
            pasteBoard: &AppKit::NSPasteboard,
        ) -> Option<Id<Foundation::NSURL, Shared>>;

        #[cfg(feature = "AppKit_NSPasteboard")]
        #[method(writeToPasteboard:)]
        pub unsafe fn writeToPasteboard(&self, pasteBoard: &AppKit::NSPasteboard);
    }
);

extern_methods!(
    /// NSPasteboardSupport
    #[cfg(feature = "Foundation_NSString")]
    unsafe impl Foundation::NSString {}
);

extern_methods!(
    /// NSFileContents
    #[cfg(feature = "AppKit_NSPasteboard")]
    unsafe impl NSPasteboard {
        #[cfg(feature = "Foundation_NSString")]
        #[method(writeFileContents:)]
        pub unsafe fn writeFileContents(&self, filename: &Foundation::NSString) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other readFileContentsType:toFile:)]
        pub unsafe fn readFileContentsType_toFile(
            &self,
            type_: Option<&AppKit::NSPasteboardType>,
            filename: &Foundation::NSString,
        ) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "Foundation_NSFileWrapper")]
        #[method(writeFileWrapper:)]
        pub unsafe fn writeFileWrapper(&self, wrapper: &Foundation::NSFileWrapper) -> bool;

        #[cfg(feature = "Foundation_NSFileWrapper")]
        #[method_id(@__retain_semantics Other readFileWrapper)]
        pub unsafe fn readFileWrapper(&self) -> Option<Id<Foundation::NSFileWrapper, Shared>>;
    }
);

extern_static!(NSFileContentsPboardType: &'static AppKit::NSPasteboardType);

extern_fn!(
    pub unsafe fn NSCreateFilenamePboardType(
        fileType: &Foundation::NSString,
    ) -> *mut AppKit::NSPasteboardType;
);

extern_fn!(
    pub unsafe fn NSCreateFileContentsPboardType(
        fileType: &Foundation::NSString,
    ) -> *mut AppKit::NSPasteboardType;
);

extern_fn!(
    pub unsafe fn NSGetFileType(pboardType: &AppKit::NSPasteboardType)
        -> *mut Foundation::NSString;
);

extern_fn!(
    pub unsafe fn NSGetFileTypes(
        pboardTypes: &Foundation::NSArray<AppKit::NSPasteboardType>,
    ) -> *mut Foundation::NSArray<Foundation::NSString>;
);

extern_static!(NSStringPboardType: &'static AppKit::NSPasteboardType);

extern_static!(NSFilenamesPboardType: &'static AppKit::NSPasteboardType);

extern_static!(NSTIFFPboardType: &'static AppKit::NSPasteboardType);

extern_static!(NSRTFPboardType: &'static AppKit::NSPasteboardType);

extern_static!(NSTabularTextPboardType: &'static AppKit::NSPasteboardType);

extern_static!(NSFontPboardType: &'static AppKit::NSPasteboardType);

extern_static!(NSRulerPboardType: &'static AppKit::NSPasteboardType);

extern_static!(NSColorPboardType: &'static AppKit::NSPasteboardType);

extern_static!(NSRTFDPboardType: &'static AppKit::NSPasteboardType);

extern_static!(NSHTMLPboardType: &'static AppKit::NSPasteboardType);

extern_static!(NSURLPboardType: &'static AppKit::NSPasteboardType);

extern_static!(NSPDFPboardType: &'static AppKit::NSPasteboardType);

extern_static!(NSMultipleTextSelectionPboardType: &'static AppKit::NSPasteboardType);

extern_static!(NSPostScriptPboardType: &'static AppKit::NSPasteboardType);

extern_static!(NSVCardPboardType: &'static AppKit::NSPasteboardType);

extern_static!(NSInkTextPboardType: &'static AppKit::NSPasteboardType);

extern_static!(NSFilesPromisePboardType: &'static AppKit::NSPasteboardType);

extern_static!(NSPasteboardTypeFindPanelSearchOptions: &'static AppKit::NSPasteboardType);

extern_static!(NSGeneralPboard: &'static AppKit::NSPasteboardName);

extern_static!(NSFontPboard: &'static AppKit::NSPasteboardName);

extern_static!(NSRulerPboard: &'static AppKit::NSPasteboardName);

extern_static!(NSFindPboard: &'static AppKit::NSPasteboardName);

extern_static!(NSDragPboard: &'static AppKit::NSPasteboardName);

extern_static!(NSPICTPboardType: &'static AppKit::NSPasteboardType);
