//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit;
use crate::CoreData;
use crate::Foundation;

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSButtonType {
        NSButtonTypeMomentaryLight = 0,
        NSButtonTypePushOnPushOff = 1,
        NSButtonTypeToggle = 2,
        NSButtonTypeSwitch = 3,
        NSButtonTypeRadio = 4,
        NSButtonTypeMomentaryChange = 5,
        NSButtonTypeOnOff = 6,
        NSButtonTypeMomentaryPushIn = 7,
        NSButtonTypeAccelerator = 8,
        NSButtonTypeMultiLevelAccelerator = 9,
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSBezelStyle {
        NSBezelStyleRounded = 1,
        NSBezelStyleRegularSquare = 2,
        NSBezelStyleDisclosure = 5,
        NSBezelStyleShadowlessSquare = 6,
        NSBezelStyleCircular = 7,
        NSBezelStyleTexturedSquare = 8,
        NSBezelStyleHelpButton = 9,
        NSBezelStyleSmallSquare = 10,
        NSBezelStyleTexturedRounded = 11,
        NSBezelStyleRoundRect = 12,
        NSBezelStyleRecessed = 13,
        NSBezelStyleRoundedDisclosure = 14,
        NSBezelStyleInline = 15,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSButtonCell;

    unsafe impl ClassType for NSButtonCell {
        #[inherits(AppKit::NSCell, NSObject)]
        type Super = AppKit::NSActionCell;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSButtonCell")]
    unsafe impl NSButtonCell {
        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Init initTextCell:)]
        pub unsafe fn initTextCell(
            this: Option<Allocated<Self>>,
            string: &Foundation::NSString,
        ) -> Id<Self, Shared>;

        #[cfg(feature = "AppKit_NSImage")]
        #[method_id(@__retain_semantics Init initImageCell:)]
        pub unsafe fn initImageCell(
            this: Option<Allocated<Self>>,
            image: Option<&AppKit::NSImage>,
        ) -> Id<Self, Shared>;

        #[cfg(feature = "Foundation_NSCoder")]
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Option<Allocated<Self>>,
            coder: &Foundation::NSCoder,
        ) -> Id<Self, Shared>;

        #[method(bezelStyle)]
        pub unsafe fn bezelStyle(&self) -> AppKit::NSBezelStyle;

        #[method(setBezelStyle:)]
        pub unsafe fn setBezelStyle(&self, bezelStyle: AppKit::NSBezelStyle);

        #[method(setButtonType:)]
        pub unsafe fn setButtonType(&self, type_: AppKit::NSButtonType);

        #[method(highlightsBy)]
        pub unsafe fn highlightsBy(&self) -> AppKit::NSCellStyleMask;

        #[method(setHighlightsBy:)]
        pub unsafe fn setHighlightsBy(&self, highlightsBy: AppKit::NSCellStyleMask);

        #[method(showsStateBy)]
        pub unsafe fn showsStateBy(&self) -> AppKit::NSCellStyleMask;

        #[method(setShowsStateBy:)]
        pub unsafe fn setShowsStateBy(&self, showsStateBy: AppKit::NSCellStyleMask);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other title)]
        pub unsafe fn title(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setTitle:)]
        pub unsafe fn setTitle(&self, title: Option<&Foundation::NSString>);

        #[cfg(feature = "Foundation_NSAttributedString")]
        #[method_id(@__retain_semantics Other attributedTitle)]
        pub unsafe fn attributedTitle(&self) -> Id<Foundation::NSAttributedString, Shared>;

        #[cfg(feature = "Foundation_NSAttributedString")]
        #[method(setAttributedTitle:)]
        pub unsafe fn setAttributedTitle(&self, attributedTitle: &Foundation::NSAttributedString);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other alternateTitle)]
        pub unsafe fn alternateTitle(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setAlternateTitle:)]
        pub unsafe fn setAlternateTitle(&self, alternateTitle: &Foundation::NSString);

        #[cfg(feature = "Foundation_NSAttributedString")]
        #[method_id(@__retain_semantics Other attributedAlternateTitle)]
        pub unsafe fn attributedAlternateTitle(&self)
            -> Id<Foundation::NSAttributedString, Shared>;

        #[cfg(feature = "Foundation_NSAttributedString")]
        #[method(setAttributedAlternateTitle:)]
        pub unsafe fn setAttributedAlternateTitle(
            &self,
            attributedAlternateTitle: &Foundation::NSAttributedString,
        );

        #[cfg(feature = "AppKit_NSImage")]
        #[method_id(@__retain_semantics Other alternateImage)]
        pub unsafe fn alternateImage(&self) -> Option<Id<AppKit::NSImage, Shared>>;

        #[cfg(feature = "AppKit_NSImage")]
        #[method(setAlternateImage:)]
        pub unsafe fn setAlternateImage(&self, alternateImage: Option<&AppKit::NSImage>);

        #[method(imagePosition)]
        pub unsafe fn imagePosition(&self) -> AppKit::NSCellImagePosition;

        #[method(setImagePosition:)]
        pub unsafe fn setImagePosition(&self, imagePosition: AppKit::NSCellImagePosition);

        #[method(imageScaling)]
        pub unsafe fn imageScaling(&self) -> AppKit::NSImageScaling;

        #[method(setImageScaling:)]
        pub unsafe fn setImageScaling(&self, imageScaling: AppKit::NSImageScaling);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other keyEquivalent)]
        pub unsafe fn keyEquivalent(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setKeyEquivalent:)]
        pub unsafe fn setKeyEquivalent(&self, keyEquivalent: &Foundation::NSString);

        #[method(keyEquivalentModifierMask)]
        pub unsafe fn keyEquivalentModifierMask(&self) -> AppKit::NSEventModifierFlags;

        #[method(setKeyEquivalentModifierMask:)]
        pub unsafe fn setKeyEquivalentModifierMask(
            &self,
            keyEquivalentModifierMask: AppKit::NSEventModifierFlags,
        );

        #[method(isTransparent)]
        pub unsafe fn isTransparent(&self) -> bool;

        #[method(setTransparent:)]
        pub unsafe fn setTransparent(&self, transparent: bool);

        #[method(isOpaque)]
        pub unsafe fn isOpaque(&self) -> bool;

        #[method(imageDimsWhenDisabled)]
        pub unsafe fn imageDimsWhenDisabled(&self) -> bool;

        #[method(setImageDimsWhenDisabled:)]
        pub unsafe fn setImageDimsWhenDisabled(&self, imageDimsWhenDisabled: bool);

        #[method(showsBorderOnlyWhileMouseInside)]
        pub unsafe fn showsBorderOnlyWhileMouseInside(&self) -> bool;

        #[method(setShowsBorderOnlyWhileMouseInside:)]
        pub unsafe fn setShowsBorderOnlyWhileMouseInside(
            &self,
            showsBorderOnlyWhileMouseInside: bool,
        );

        #[cfg(feature = "AppKit_NSSound")]
        #[method_id(@__retain_semantics Other sound)]
        pub unsafe fn sound(&self) -> Option<Id<AppKit::NSSound, Shared>>;

        #[cfg(feature = "AppKit_NSSound")]
        #[method(setSound:)]
        pub unsafe fn setSound(&self, sound: Option<&AppKit::NSSound>);

        #[cfg(feature = "AppKit_NSColor")]
        #[method_id(@__retain_semantics Other backgroundColor)]
        pub unsafe fn backgroundColor(&self) -> Option<Id<AppKit::NSColor, Shared>>;

        #[cfg(feature = "AppKit_NSColor")]
        #[method(setBackgroundColor:)]
        pub unsafe fn setBackgroundColor(&self, backgroundColor: Option<&AppKit::NSColor>);

        #[method(setPeriodicDelay:interval:)]
        pub unsafe fn setPeriodicDelay_interval(&self, delay: c_float, interval: c_float);

        #[method(getPeriodicDelay:interval:)]
        pub unsafe fn getPeriodicDelay_interval(
            &self,
            delay: NonNull<c_float>,
            interval: NonNull<c_float>,
        );

        #[method(performClick:)]
        pub unsafe fn performClick(&self, sender: Option<&Object>);

        #[cfg(feature = "AppKit_NSEvent")]
        #[method(mouseEntered:)]
        pub unsafe fn mouseEntered(&self, event: &AppKit::NSEvent);

        #[cfg(feature = "AppKit_NSEvent")]
        #[method(mouseExited:)]
        pub unsafe fn mouseExited(&self, event: &AppKit::NSEvent);

        #[cfg(feature = "AppKit_NSView")]
        #[method(drawBezelWithFrame:inView:)]
        pub unsafe fn drawBezelWithFrame_inView(
            &self,
            frame: Foundation::NSRect,
            controlView: &AppKit::NSView,
        );

        #[cfg(all(feature = "AppKit_NSImage", feature = "AppKit_NSView"))]
        #[method(drawImage:withFrame:inView:)]
        pub unsafe fn drawImage_withFrame_inView(
            &self,
            image: &AppKit::NSImage,
            frame: Foundation::NSRect,
            controlView: &AppKit::NSView,
        );

        #[cfg(all(feature = "AppKit_NSView", feature = "Foundation_NSAttributedString"))]
        #[method(drawTitle:withFrame:inView:)]
        pub unsafe fn drawTitle_withFrame_inView(
            &self,
            title: &Foundation::NSAttributedString,
            frame: Foundation::NSRect,
            controlView: &AppKit::NSView,
        ) -> Foundation::NSRect;
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSGradientType {
        NSGradientNone = 0,
        NSGradientConcaveWeak = 1,
        NSGradientConcaveStrong = 2,
        NSGradientConvexWeak = 3,
        NSGradientConvexStrong = 4,
    }
);

extern_static!(NSMomentaryLightButton: AppKit::NSButtonType = NSButtonTypeMomentaryLight);

extern_static!(NSPushOnPushOffButton: AppKit::NSButtonType = NSButtonTypePushOnPushOff);

extern_static!(NSToggleButton: AppKit::NSButtonType = NSButtonTypeToggle);

extern_static!(NSSwitchButton: AppKit::NSButtonType = NSButtonTypeSwitch);

extern_static!(NSRadioButton: AppKit::NSButtonType = NSButtonTypeRadio);

extern_static!(NSMomentaryChangeButton: AppKit::NSButtonType = NSButtonTypeMomentaryChange);

extern_static!(NSOnOffButton: AppKit::NSButtonType = NSButtonTypeOnOff);

extern_static!(NSMomentaryPushInButton: AppKit::NSButtonType = NSButtonTypeMomentaryPushIn);

extern_static!(NSAcceleratorButton: AppKit::NSButtonType = NSButtonTypeAccelerator);

extern_static!(
    NSMultiLevelAcceleratorButton: AppKit::NSButtonType = NSButtonTypeMultiLevelAccelerator
);

extern_static!(NSMomentaryPushButton: AppKit::NSButtonType = NSButtonTypeMomentaryLight);

extern_static!(NSMomentaryLight: AppKit::NSButtonType = NSButtonTypeMomentaryPushIn);

extern_static!(NSRoundedBezelStyle: AppKit::NSBezelStyle = NSBezelStyleRounded);

extern_static!(NSRegularSquareBezelStyle: AppKit::NSBezelStyle = NSBezelStyleRegularSquare);

extern_static!(NSDisclosureBezelStyle: AppKit::NSBezelStyle = NSBezelStyleDisclosure);

extern_static!(NSShadowlessSquareBezelStyle: AppKit::NSBezelStyle = NSBezelStyleShadowlessSquare);

extern_static!(NSCircularBezelStyle: AppKit::NSBezelStyle = NSBezelStyleCircular);

extern_static!(NSTexturedSquareBezelStyle: AppKit::NSBezelStyle = NSBezelStyleTexturedSquare);

extern_static!(NSHelpButtonBezelStyle: AppKit::NSBezelStyle = NSBezelStyleHelpButton);

extern_static!(NSSmallSquareBezelStyle: AppKit::NSBezelStyle = NSBezelStyleSmallSquare);

extern_static!(NSTexturedRoundedBezelStyle: AppKit::NSBezelStyle = NSBezelStyleTexturedRounded);

extern_static!(NSRoundRectBezelStyle: AppKit::NSBezelStyle = NSBezelStyleRoundRect);

extern_static!(NSRecessedBezelStyle: AppKit::NSBezelStyle = NSBezelStyleRecessed);

extern_static!(NSRoundedDisclosureBezelStyle: AppKit::NSBezelStyle = NSBezelStyleRoundedDisclosure);

extern_static!(NSInlineBezelStyle: AppKit::NSBezelStyle = NSBezelStyleInline);

extern_static!(NSSmallIconButtonBezelStyle: AppKit::NSBezelStyle = 2);

extern_static!(NSThickSquareBezelStyle: AppKit::NSBezelStyle = 3);

extern_static!(NSThickerSquareBezelStyle: AppKit::NSBezelStyle = 4);

extern_methods!(
    /// NSDeprecated
    #[cfg(feature = "AppKit_NSButtonCell")]
    unsafe impl NSButtonCell {
        #[method(gradientType)]
        pub unsafe fn gradientType(&self) -> AppKit::NSGradientType;

        #[method(setGradientType:)]
        pub unsafe fn setGradientType(&self, gradientType: AppKit::NSGradientType);

        #[cfg(feature = "Foundation_NSString")]
        #[method(setTitleWithMnemonic:)]
        pub unsafe fn setTitleWithMnemonic(
            &self,
            stringWithAmpersand: Option<&Foundation::NSString>,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[method(setAlternateTitleWithMnemonic:)]
        pub unsafe fn setAlternateTitleWithMnemonic(
            &self,
            stringWithAmpersand: Option<&Foundation::NSString>,
        );

        #[method(setAlternateMnemonicLocation:)]
        pub unsafe fn setAlternateMnemonicLocation(&self, location: NSUInteger);

        #[method(alternateMnemonicLocation)]
        pub unsafe fn alternateMnemonicLocation(&self) -> NSUInteger;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other alternateMnemonic)]
        pub unsafe fn alternateMnemonic(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "AppKit_NSFont")]
        #[method_id(@__retain_semantics Other keyEquivalentFont)]
        pub unsafe fn keyEquivalentFont(&self) -> Option<Id<AppKit::NSFont, Shared>>;

        #[cfg(feature = "AppKit_NSFont")]
        #[method(setKeyEquivalentFont:)]
        pub unsafe fn setKeyEquivalentFont(&self, keyEquivalentFont: Option<&AppKit::NSFont>);

        #[cfg(feature = "Foundation_NSString")]
        #[method(setKeyEquivalentFont:size:)]
        pub unsafe fn setKeyEquivalentFont_size(
            &self,
            fontName: &Foundation::NSString,
            fontSize: Foundation::CGFloat,
        );
    }
);
