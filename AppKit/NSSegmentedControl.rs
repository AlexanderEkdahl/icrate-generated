//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit;
use crate::CoreData;
use crate::Foundation;

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSSegmentSwitchTracking {
        NSSegmentSwitchTrackingSelectOne = 0,
        NSSegmentSwitchTrackingSelectAny = 1,
        NSSegmentSwitchTrackingMomentary = 2,
        NSSegmentSwitchTrackingMomentaryAccelerator = 3,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSSegmentStyle {
        NSSegmentStyleAutomatic = 0,
        NSSegmentStyleRounded = 1,
        NSSegmentStyleRoundRect = 3,
        NSSegmentStyleTexturedSquare = 4,
        NSSegmentStyleSmallSquare = 6,
        NSSegmentStyleSeparated = 8,
        NSSegmentStyleTexturedRounded = 2,
        NSSegmentStyleCapsule = 5,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSSegmentDistribution {
        NSSegmentDistributionFit = 0,
        NSSegmentDistributionFill = 1,
        NSSegmentDistributionFillEqually = 2,
        NSSegmentDistributionFillProportionally = 3,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSSegmentedControl;

    unsafe impl ClassType for NSSegmentedControl {
        #[inherits(AppKit::NSView, AppKit::NSResponder, NSObject)]
        type Super = AppKit::NSControl;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSSegmentedControl")]
    unsafe impl NSSegmentedControl {
        #[method(segmentCount)]
        pub unsafe fn segmentCount(&self) -> NSInteger;

        #[method(setSegmentCount:)]
        pub unsafe fn setSegmentCount(&self, segmentCount: NSInteger);

        #[method(selectedSegment)]
        pub unsafe fn selectedSegment(&self) -> NSInteger;

        #[method(setSelectedSegment:)]
        pub unsafe fn setSelectedSegment(&self, selectedSegment: NSInteger);

        #[method(selectSegmentWithTag:)]
        pub unsafe fn selectSegmentWithTag(&self, tag: NSInteger) -> bool;

        #[method(setWidth:forSegment:)]
        pub unsafe fn setWidth_forSegment(&self, width: CoreGraphics::CGFloat, segment: NSInteger);

        #[method(widthForSegment:)]
        pub unsafe fn widthForSegment(&self, segment: NSInteger) -> CoreGraphics::CGFloat;

        #[cfg(feature = "AppKit_NSImage")]
        #[method(setImage:forSegment:)]
        pub unsafe fn setImage_forSegment(
            &self,
            image: Option<&AppKit::NSImage>,
            segment: NSInteger,
        );

        #[cfg(feature = "AppKit_NSImage")]
        #[method_id(@__retain_semantics Other imageForSegment:)]
        pub unsafe fn imageForSegment(
            &self,
            segment: NSInteger,
        ) -> Option<Id<AppKit::NSImage, Shared>>;

        #[method(setImageScaling:forSegment:)]
        pub unsafe fn setImageScaling_forSegment(
            &self,
            scaling: AppKit::NSImageScaling,
            segment: NSInteger,
        );

        #[method(imageScalingForSegment:)]
        pub unsafe fn imageScalingForSegment(&self, segment: NSInteger) -> AppKit::NSImageScaling;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setLabel:forSegment:)]
        pub unsafe fn setLabel_forSegment(&self, label: &Foundation::NSString, segment: NSInteger);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other labelForSegment:)]
        pub unsafe fn labelForSegment(
            &self,
            segment: NSInteger,
        ) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "AppKit_NSMenu")]
        #[method(setMenu:forSegment:)]
        pub unsafe fn setMenu_forSegment(&self, menu: Option<&AppKit::NSMenu>, segment: NSInteger);

        #[cfg(feature = "AppKit_NSMenu")]
        #[method_id(@__retain_semantics Other menuForSegment:)]
        pub unsafe fn menuForSegment(
            &self,
            segment: NSInteger,
        ) -> Option<Id<AppKit::NSMenu, Shared>>;

        #[method(setSelected:forSegment:)]
        pub unsafe fn setSelected_forSegment(&self, selected: bool, segment: NSInteger);

        #[method(isSelectedForSegment:)]
        pub unsafe fn isSelectedForSegment(&self, segment: NSInteger) -> bool;

        #[method(setEnabled:forSegment:)]
        pub unsafe fn setEnabled_forSegment(&self, enabled: bool, segment: NSInteger);

        #[method(isEnabledForSegment:)]
        pub unsafe fn isEnabledForSegment(&self, segment: NSInteger) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setToolTip:forSegment:)]
        pub unsafe fn setToolTip_forSegment(
            &self,
            toolTip: Option<&Foundation::NSString>,
            segment: NSInteger,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other toolTipForSegment:)]
        pub unsafe fn toolTipForSegment(
            &self,
            segment: NSInteger,
        ) -> Option<Id<Foundation::NSString, Shared>>;

        #[method(setTag:forSegment:)]
        pub unsafe fn setTag_forSegment(&self, tag: NSInteger, segment: NSInteger);

        #[method(tagForSegment:)]
        pub unsafe fn tagForSegment(&self, segment: NSInteger) -> NSInteger;

        #[method(setShowsMenuIndicator:forSegment:)]
        pub unsafe fn setShowsMenuIndicator_forSegment(
            &self,
            showsMenuIndicator: bool,
            segment: NSInteger,
        );

        #[method(showsMenuIndicatorForSegment:)]
        pub unsafe fn showsMenuIndicatorForSegment(&self, segment: NSInteger) -> bool;

        #[method(segmentStyle)]
        pub unsafe fn segmentStyle(&self) -> AppKit::NSSegmentStyle;

        #[method(setSegmentStyle:)]
        pub unsafe fn setSegmentStyle(&self, segmentStyle: AppKit::NSSegmentStyle);

        #[method(isSpringLoaded)]
        pub unsafe fn isSpringLoaded(&self) -> bool;

        #[method(setSpringLoaded:)]
        pub unsafe fn setSpringLoaded(&self, springLoaded: bool);

        #[method(trackingMode)]
        pub unsafe fn trackingMode(&self) -> AppKit::NSSegmentSwitchTracking;

        #[method(setTrackingMode:)]
        pub unsafe fn setTrackingMode(&self, trackingMode: AppKit::NSSegmentSwitchTracking);

        #[method(doubleValueForSelectedSegment)]
        pub unsafe fn doubleValueForSelectedSegment(&self) -> c_double;

        #[cfg(feature = "AppKit_NSColor")]
        #[method_id(@__retain_semantics Other selectedSegmentBezelColor)]
        pub unsafe fn selectedSegmentBezelColor(&self) -> Option<Id<AppKit::NSColor, Shared>>;

        #[cfg(feature = "AppKit_NSColor")]
        #[method(setSelectedSegmentBezelColor:)]
        pub unsafe fn setSelectedSegmentBezelColor(
            &self,
            selectedSegmentBezelColor: Option<&AppKit::NSColor>,
        );

        #[method(indexOfSelectedItem)]
        pub unsafe fn indexOfSelectedItem(&self) -> NSInteger;

        #[method(setAlignment:forSegment:)]
        pub unsafe fn setAlignment_forSegment(
            &self,
            alignment: AppKit::NSTextAlignment,
            segment: NSInteger,
        );

        #[method(alignmentForSegment:)]
        pub unsafe fn alignmentForSegment(&self, segment: NSInteger) -> AppKit::NSTextAlignment;

        #[method(segmentDistribution)]
        pub unsafe fn segmentDistribution(&self) -> AppKit::NSSegmentDistribution;

        #[method(setSegmentDistribution:)]
        pub unsafe fn setSegmentDistribution(
            &self,
            segmentDistribution: AppKit::NSSegmentDistribution,
        );

        #[cfg(all(
            feature = "AppKit_NSUserInterfaceCompressionOptions",
            feature = "Foundation_NSArray"
        ))]
        #[method(compressWithPrioritizedCompressionOptions:)]
        pub unsafe fn compressWithPrioritizedCompressionOptions(
            &self,
            prioritizedOptions: &Foundation::NSArray<AppKit::NSUserInterfaceCompressionOptions>,
        );

        #[cfg(all(
            feature = "AppKit_NSUserInterfaceCompressionOptions",
            feature = "Foundation_NSArray"
        ))]
        #[method(minimumSizeWithPrioritizedCompressionOptions:)]
        pub unsafe fn minimumSizeWithPrioritizedCompressionOptions(
            &self,
            prioritizedOptions: &Foundation::NSArray<AppKit::NSUserInterfaceCompressionOptions>,
        ) -> Foundation::NSSize;

        #[cfg(feature = "AppKit_NSUserInterfaceCompressionOptions")]
        #[method_id(@__retain_semantics Other activeCompressionOptions)]
        pub unsafe fn activeCompressionOptions(
            &self,
        ) -> Id<AppKit::NSUserInterfaceCompressionOptions, Shared>;
    }
);

extern_methods!(
    /// NSSegmentedControlConvenience
    #[cfg(feature = "AppKit_NSSegmentedControl")]
    unsafe impl NSSegmentedControl {
        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other segmentedControlWithLabels:trackingMode:target:action:)]
        pub unsafe fn segmentedControlWithLabels_trackingMode_target_action(
            labels: &Foundation::NSArray<Foundation::NSString>,
            trackingMode: AppKit::NSSegmentSwitchTracking,
            target: Option<&Object>,
            action: Option<Sel>,
        ) -> Id<Self, Shared>;

        #[cfg(all(feature = "AppKit_NSImage", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Other segmentedControlWithImages:trackingMode:target:action:)]
        pub unsafe fn segmentedControlWithImages_trackingMode_target_action(
            images: &Foundation::NSArray<AppKit::NSImage>,
            trackingMode: AppKit::NSSegmentSwitchTracking,
            target: Option<&Object>,
            action: Option<Sel>,
        ) -> Id<Self, Shared>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSControl`
    #[cfg(feature = "AppKit_NSSegmentedControl")]
    unsafe impl AppKit::NSSegmentedControl {
        #[method_id(@__retain_semantics Init initWithFrame:)]
        pub unsafe fn initWithFrame(
            this: Option<Allocated<Self>>,
            frameRect: Foundation::NSRect,
        ) -> Id<Self, Shared>;
    }
);
