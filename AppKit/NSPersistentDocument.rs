//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit;
use crate::CoreData;
use crate::Foundation;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSPersistentDocument;

    unsafe impl ClassType for NSPersistentDocument {
        #[inherits(NSObject)]
        type Super = AppKit::NSDocument;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSPersistentDocument")]
    unsafe impl NSPersistentDocument {
        #[cfg(feature = "CoreData_NSManagedObjectContext")]
        #[method_id(@__retain_semantics Other managedObjectContext)]
        pub unsafe fn managedObjectContext(
            &self,
        ) -> Option<Id<CoreData::NSManagedObjectContext, Shared>>;

        #[cfg(feature = "CoreData_NSManagedObjectContext")]
        #[method(setManagedObjectContext:)]
        pub unsafe fn setManagedObjectContext(
            &self,
            managedObjectContext: Option<&CoreData::NSManagedObjectContext>,
        );

        #[cfg(feature = "CoreData_NSManagedObjectModel")]
        #[method_id(@__retain_semantics Other managedObjectModel)]
        pub unsafe fn managedObjectModel(
            &self,
        ) -> Option<Id<CoreData::NSManagedObjectModel, Shared>>;

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL"
        ))]
        #[method(configurePersistentStoreCoordinatorForURL:ofType:modelConfiguration:storeOptions:error:_)]
        pub unsafe fn configurePersistentStoreCoordinatorForURL_ofType_modelConfiguration_storeOptions_error(
            &self,
            url: &Foundation::NSURL,
            fileType: &Foundation::NSString,
            configuration: Option<&Foundation::NSString>,
            storeOptions: Option<&Foundation::NSDictionary<Foundation::NSString, Object>>,
        ) -> Result<(), Id<NSError, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other persistentStoreTypeForFileType:)]
        pub unsafe fn persistentStoreTypeForFileType(
            &self,
            fileType: &Foundation::NSString,
        ) -> Id<Foundation::NSString, Shared>;

        #[cfg(all(
            feature = "Foundation_NSError",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL"
        ))]
        #[method(writeToURL:ofType:forSaveOperation:originalContentsURL:error:_)]
        pub unsafe fn writeToURL_ofType_forSaveOperation_originalContentsURL_error(
            &self,
            absoluteURL: &Foundation::NSURL,
            typeName: &Foundation::NSString,
            saveOperation: NSSaveOperationType,
            absoluteOriginalContentsURL: Option<&Foundation::NSURL>,
        ) -> Result<(), Id<NSError, Shared>>;

        #[cfg(all(
            feature = "Foundation_NSError",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL"
        ))]
        #[method(readFromURL:ofType:error:_)]
        pub unsafe fn readFromURL_ofType_error(
            &self,
            absoluteURL: &Foundation::NSURL,
            typeName: &Foundation::NSString,
        ) -> Result<(), Id<NSError, Shared>>;

        #[cfg(all(
            feature = "Foundation_NSError",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL"
        ))]
        #[method(revertToContentsOfURL:ofType:error:_)]
        pub unsafe fn revertToContentsOfURL_ofType_error(
            &self,
            inAbsoluteURL: &Foundation::NSURL,
            inTypeName: &Foundation::NSString,
        ) -> Result<(), Id<NSError, Shared>>;
    }
);

extern_methods!(
    /// NSDeprecated
    #[cfg(feature = "AppKit_NSPersistentDocument")]
    unsafe impl NSPersistentDocument {
        #[cfg(all(
            feature = "Foundation_NSError",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL"
        ))]
        #[method(configurePersistentStoreCoordinatorForURL:ofType:error:_)]
        pub unsafe fn configurePersistentStoreCoordinatorForURL_ofType_error(
            &self,
            url: Option<&Foundation::NSURL>,
            fileType: Option<&Foundation::NSString>,
        ) -> Result<(), Id<NSError, Shared>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSDocument`
    #[cfg(feature = "AppKit_NSPersistentDocument")]
    unsafe impl AppKit::NSPersistentDocument {
        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Init initWithType:error:_)]
        pub unsafe fn initWithType_error(
            this: Option<Allocated<Self>>,
            typeName: &Foundation::NSString,
        ) -> Result<Id<Self, Shared>, Id<NSError, Shared>>;

        #[cfg(all(
            feature = "Foundation_NSError",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL"
        ))]
        #[method_id(@__retain_semantics Init initWithContentsOfURL:ofType:error:_)]
        pub unsafe fn initWithContentsOfURL_ofType_error(
            this: Option<Allocated<Self>>,
            url: &Foundation::NSURL,
            typeName: &Foundation::NSString,
        ) -> Result<Id<Self, Shared>, Id<NSError, Shared>>;

        #[cfg(all(
            feature = "Foundation_NSError",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL"
        ))]
        #[method_id(@__retain_semantics Init initForURL:withContentsOfURL:ofType:error:_)]
        pub unsafe fn initForURL_withContentsOfURL_ofType_error(
            this: Option<Allocated<Self>>,
            urlOrNil: Option<&Foundation::NSURL>,
            contentsURL: &Foundation::NSURL,
            typeName: &Foundation::NSString,
        ) -> Result<Id<Self, Shared>, Id<NSError, Shared>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSDocument`
    ///
    /// NSDeprecated
    #[cfg(feature = "AppKit_NSPersistentDocument")]
    unsafe impl AppKit::NSPersistentDocument {
        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Init initWithContentsOfFile:ofType:)]
        pub unsafe fn initWithContentsOfFile_ofType(
            this: Option<Allocated<Self>>,
            absolutePath: &Foundation::NSString,
            typeName: &Foundation::NSString,
        ) -> Option<Id<Self, Shared>>;

        #[cfg(all(feature = "Foundation_NSString", feature = "Foundation_NSURL"))]
        #[method_id(@__retain_semantics Init initWithContentsOfURL:ofType:)]
        pub unsafe fn initWithContentsOfURL_ofType(
            this: Option<Allocated<Self>>,
            url: &Foundation::NSURL,
            typeName: &Foundation::NSString,
        ) -> Option<Id<Self, Shared>>;
    }
);
