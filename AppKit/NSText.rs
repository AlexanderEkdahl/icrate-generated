//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit;
use crate::CoreData;
use crate::Foundation;

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSWritingDirection {
        NSWritingDirectionNatural = -1,
        NSWritingDirectionLeftToRight = 0,
        NSWritingDirectionRightToLeft = 1,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSText;

    unsafe impl ClassType for NSText {
        #[inherits(AppKit::NSResponder, NSObject)]
        type Super = AppKit::NSView;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSText")]
    unsafe impl NSText {
        #[method_id(@__retain_semantics Init initWithFrame:)]
        pub unsafe fn initWithFrame(
            this: Option<Allocated<Self>>,
            frameRect: Foundation::NSRect,
        ) -> Id<Self, Shared>;

        #[cfg(feature = "Foundation_NSCoder")]
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Option<Allocated<Self>>,
            coder: &Foundation::NSCoder,
        ) -> Option<Id<Self, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other string)]
        pub unsafe fn string(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setString:)]
        pub unsafe fn setString(&self, string: &Foundation::NSString);

        #[cfg(feature = "Foundation_NSString")]
        #[method(replaceCharactersInRange:withString:)]
        pub unsafe fn replaceCharactersInRange_withString(
            &self,
            range: Foundation::NSRange,
            string: &Foundation::NSString,
        );

        #[cfg(feature = "Foundation_NSData")]
        #[method(replaceCharactersInRange:withRTF:)]
        pub unsafe fn replaceCharactersInRange_withRTF(
            &self,
            range: Foundation::NSRange,
            rtfData: &Foundation::NSData,
        );

        #[cfg(feature = "Foundation_NSData")]
        #[method(replaceCharactersInRange:withRTFD:)]
        pub unsafe fn replaceCharactersInRange_withRTFD(
            &self,
            range: Foundation::NSRange,
            rtfdData: &Foundation::NSData,
        );

        #[cfg(feature = "Foundation_NSData")]
        #[method_id(@__retain_semantics Other RTFFromRange:)]
        pub unsafe fn RTFFromRange(
            &self,
            range: Foundation::NSRange,
        ) -> Option<Id<Foundation::NSData, Shared>>;

        #[cfg(feature = "Foundation_NSData")]
        #[method_id(@__retain_semantics Other RTFDFromRange:)]
        pub unsafe fn RTFDFromRange(
            &self,
            range: Foundation::NSRange,
        ) -> Option<Id<Foundation::NSData, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(writeRTFDToFile:atomically:)]
        pub unsafe fn writeRTFDToFile_atomically(
            &self,
            path: &Foundation::NSString,
            flag: bool,
        ) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method(readRTFDFromFile:)]
        pub unsafe fn readRTFDFromFile(&self, path: &Foundation::NSString) -> bool;

        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(&self) -> Option<Id<AppKit::NSTextDelegate, Shared>>;

        #[method(setDelegate:)]
        pub unsafe fn setDelegate(&self, delegate: Option<&AppKit::NSTextDelegate>);

        #[method(isEditable)]
        pub unsafe fn isEditable(&self) -> bool;

        #[method(setEditable:)]
        pub unsafe fn setEditable(&self, editable: bool);

        #[method(isSelectable)]
        pub unsafe fn isSelectable(&self) -> bool;

        #[method(setSelectable:)]
        pub unsafe fn setSelectable(&self, selectable: bool);

        #[method(isRichText)]
        pub unsafe fn isRichText(&self) -> bool;

        #[method(setRichText:)]
        pub unsafe fn setRichText(&self, richText: bool);

        #[method(importsGraphics)]
        pub unsafe fn importsGraphics(&self) -> bool;

        #[method(setImportsGraphics:)]
        pub unsafe fn setImportsGraphics(&self, importsGraphics: bool);

        #[method(isFieldEditor)]
        pub unsafe fn isFieldEditor(&self) -> bool;

        #[method(setFieldEditor:)]
        pub unsafe fn setFieldEditor(&self, fieldEditor: bool);

        #[method(usesFontPanel)]
        pub unsafe fn usesFontPanel(&self) -> bool;

        #[method(setUsesFontPanel:)]
        pub unsafe fn setUsesFontPanel(&self, usesFontPanel: bool);

        #[method(drawsBackground)]
        pub unsafe fn drawsBackground(&self) -> bool;

        #[method(setDrawsBackground:)]
        pub unsafe fn setDrawsBackground(&self, drawsBackground: bool);

        #[cfg(feature = "AppKit_NSColor")]
        #[method_id(@__retain_semantics Other backgroundColor)]
        pub unsafe fn backgroundColor(&self) -> Option<Id<AppKit::NSColor, Shared>>;

        #[cfg(feature = "AppKit_NSColor")]
        #[method(setBackgroundColor:)]
        pub unsafe fn setBackgroundColor(&self, backgroundColor: Option<&AppKit::NSColor>);

        #[method(isRulerVisible)]
        pub unsafe fn isRulerVisible(&self) -> bool;

        #[method(selectedRange)]
        pub unsafe fn selectedRange(&self) -> Foundation::NSRange;

        #[method(setSelectedRange:)]
        pub unsafe fn setSelectedRange(&self, selectedRange: Foundation::NSRange);

        #[method(scrollRangeToVisible:)]
        pub unsafe fn scrollRangeToVisible(&self, range: Foundation::NSRange);

        #[cfg(feature = "AppKit_NSFont")]
        #[method_id(@__retain_semantics Other font)]
        pub unsafe fn font(&self) -> Option<Id<AppKit::NSFont, Shared>>;

        #[cfg(feature = "AppKit_NSFont")]
        #[method(setFont:)]
        pub unsafe fn setFont(&self, font: Option<&AppKit::NSFont>);

        #[cfg(feature = "AppKit_NSColor")]
        #[method_id(@__retain_semantics Other textColor)]
        pub unsafe fn textColor(&self) -> Option<Id<AppKit::NSColor, Shared>>;

        #[cfg(feature = "AppKit_NSColor")]
        #[method(setTextColor:)]
        pub unsafe fn setTextColor(&self, textColor: Option<&AppKit::NSColor>);

        #[method(alignment)]
        pub unsafe fn alignment(&self) -> AppKit::NSTextAlignment;

        #[method(setAlignment:)]
        pub unsafe fn setAlignment(&self, alignment: AppKit::NSTextAlignment);

        #[method(baseWritingDirection)]
        pub unsafe fn baseWritingDirection(&self) -> AppKit::NSWritingDirection;

        #[method(setBaseWritingDirection:)]
        pub unsafe fn setBaseWritingDirection(
            &self,
            baseWritingDirection: AppKit::NSWritingDirection,
        );

        #[cfg(feature = "AppKit_NSColor")]
        #[method(setTextColor:range:)]
        pub unsafe fn setTextColor_range(
            &self,
            color: Option<&AppKit::NSColor>,
            range: Foundation::NSRange,
        );

        #[cfg(feature = "AppKit_NSFont")]
        #[method(setFont:range:)]
        pub unsafe fn setFont_range(&self, font: &AppKit::NSFont, range: Foundation::NSRange);

        #[method(maxSize)]
        pub unsafe fn maxSize(&self) -> Foundation::NSSize;

        #[method(setMaxSize:)]
        pub unsafe fn setMaxSize(&self, maxSize: Foundation::NSSize);

        #[method(minSize)]
        pub unsafe fn minSize(&self) -> Foundation::NSSize;

        #[method(setMinSize:)]
        pub unsafe fn setMinSize(&self, minSize: Foundation::NSSize);

        #[method(isHorizontallyResizable)]
        pub unsafe fn isHorizontallyResizable(&self) -> bool;

        #[method(setHorizontallyResizable:)]
        pub unsafe fn setHorizontallyResizable(&self, horizontallyResizable: bool);

        #[method(isVerticallyResizable)]
        pub unsafe fn isVerticallyResizable(&self) -> bool;

        #[method(setVerticallyResizable:)]
        pub unsafe fn setVerticallyResizable(&self, verticallyResizable: bool);

        #[method(sizeToFit)]
        pub unsafe fn sizeToFit(&self);

        #[method(copy:)]
        pub unsafe fn copy(&self, sender: Option<&Object>);

        #[method(copyFont:)]
        pub unsafe fn copyFont(&self, sender: Option<&Object>);

        #[method(copyRuler:)]
        pub unsafe fn copyRuler(&self, sender: Option<&Object>);

        #[method(cut:)]
        pub unsafe fn cut(&self, sender: Option<&Object>);

        #[method(delete:)]
        pub unsafe fn delete(&self, sender: Option<&Object>);

        #[method(paste:)]
        pub unsafe fn paste(&self, sender: Option<&Object>);

        #[method(pasteFont:)]
        pub unsafe fn pasteFont(&self, sender: Option<&Object>);

        #[method(pasteRuler:)]
        pub unsafe fn pasteRuler(&self, sender: Option<&Object>);

        #[method(selectAll:)]
        pub unsafe fn selectAll(&self, sender: Option<&Object>);

        #[method(changeFont:)]
        pub unsafe fn changeFont(&self, sender: Option<&Object>);

        #[method(alignLeft:)]
        pub unsafe fn alignLeft(&self, sender: Option<&Object>);

        #[method(alignRight:)]
        pub unsafe fn alignRight(&self, sender: Option<&Object>);

        #[method(alignCenter:)]
        pub unsafe fn alignCenter(&self, sender: Option<&Object>);

        #[method(subscript:)]
        pub unsafe fn subscript(&self, sender: Option<&Object>);

        #[method(superscript:)]
        pub unsafe fn superscript(&self, sender: Option<&Object>);

        #[method(underline:)]
        pub unsafe fn underline(&self, sender: Option<&Object>);

        #[method(unscript:)]
        pub unsafe fn unscript(&self, sender: Option<&Object>);

        #[method(showGuessPanel:)]
        pub unsafe fn showGuessPanel(&self, sender: Option<&Object>);

        #[method(checkSpelling:)]
        pub unsafe fn checkSpelling(&self, sender: Option<&Object>);

        #[method(toggleRuler:)]
        pub unsafe fn toggleRuler(&self, sender: Option<&Object>);
    }
);

extern_enum!(
    #[underlying(c_uint)]
    pub enum {
        NSEnterCharacter = 0x0003,
        NSBackspaceCharacter = 0x0008,
        NSTabCharacter = 0x0009,
        NSNewlineCharacter = 0x000a,
        NSFormFeedCharacter = 0x000c,
        NSCarriageReturnCharacter = 0x000d,
        NSBackTabCharacter = 0x0019,
        NSDeleteCharacter = 0x007f,
        NSLineSeparatorCharacter = 0x2028,
        NSParagraphSeparatorCharacter = 0x2029,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSTextMovement {
        NSTextMovementReturn = 0x10,
        NSTextMovementTab = 0x11,
        NSTextMovementBacktab = 0x12,
        NSTextMovementLeft = 0x13,
        NSTextMovementRight = 0x14,
        NSTextMovementUp = 0x15,
        NSTextMovementDown = 0x16,
        NSTextMovementCancel = 0x17,
        NSTextMovementOther = 0,
    }
);

extern_static!(NSTextDidBeginEditingNotification: &'static Foundation::NSNotificationName);

extern_static!(NSTextDidEndEditingNotification: &'static Foundation::NSNotificationName);

extern_static!(NSTextDidChangeNotification: &'static Foundation::NSNotificationName);

extern_static!(NSTextMovementUserInfoKey: &'static Foundation::NSString);

extern_enum!(
    #[underlying(c_uint)]
    pub enum {
        NSIllegalTextMovement = 0,
        NSReturnTextMovement = 0x10,
        NSTabTextMovement = 0x11,
        NSBacktabTextMovement = 0x12,
        NSLeftTextMovement = 0x13,
        NSRightTextMovement = 0x14,
        NSUpTextMovement = 0x15,
        NSDownTextMovement = 0x16,
        NSCancelTextMovement = 0x17,
        NSOtherTextMovement = 0,
    }
);

extern_protocol!(
    pub struct NSTextDelegate;

    unsafe impl ProtocolType for NSTextDelegate {
        #[optional]
        #[method(textShouldBeginEditing:)]
        pub unsafe fn textShouldBeginEditing(&self, textObject: &AppKit::NSText) -> bool;

        #[optional]
        #[method(textShouldEndEditing:)]
        pub unsafe fn textShouldEndEditing(&self, textObject: &AppKit::NSText) -> bool;

        #[optional]
        #[method(textDidBeginEditing:)]
        pub unsafe fn textDidBeginEditing(&self, notification: &Foundation::NSNotification);

        #[optional]
        #[method(textDidEndEditing:)]
        pub unsafe fn textDidEndEditing(&self, notification: &Foundation::NSNotification);

        #[optional]
        #[method(textDidChange:)]
        pub unsafe fn textDidChange(&self, notification: &Foundation::NSNotification);
    }
);

extern_enum!(
    #[underlying(c_uint)]
    pub enum {
        NSTextWritingDirectionEmbedding = 0<<1,
        NSTextWritingDirectionOverride = 1<<1,
    }
);

extern_static!(NSLeftTextAlignment: AppKit::NSTextAlignment = NSTextAlignmentLeft);

extern_static!(NSRightTextAlignment: AppKit::NSTextAlignment = NSTextAlignmentRight);

extern_static!(NSCenterTextAlignment: AppKit::NSTextAlignment = NSTextAlignmentCenter);

extern_static!(NSJustifiedTextAlignment: AppKit::NSTextAlignment = NSTextAlignmentJustified);

extern_static!(NSNaturalTextAlignment: AppKit::NSTextAlignment = NSTextAlignmentNatural);
