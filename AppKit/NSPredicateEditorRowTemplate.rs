//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit;
use crate::CoreData;
use crate::Foundation;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSPredicateEditorRowTemplate;

    unsafe impl ClassType for NSPredicateEditorRowTemplate {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSPredicateEditorRowTemplate")]
    unsafe impl NSPredicateEditorRowTemplate {
        #[cfg(feature = "Foundation_NSPredicate")]
        #[method(matchForPredicate:)]
        pub unsafe fn matchForPredicate(&self, predicate: &Foundation::NSPredicate) -> c_double;

        #[cfg(all(feature = "AppKit_NSView", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Other templateViews)]
        pub unsafe fn templateViews(&self) -> Id<Foundation::NSArray<AppKit::NSView>, Shared>;

        #[cfg(feature = "Foundation_NSPredicate")]
        #[method(setPredicate:)]
        pub unsafe fn setPredicate(&self, predicate: &Foundation::NSPredicate);

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSPredicate"))]
        #[method_id(@__retain_semantics Other predicateWithSubpredicates:)]
        pub unsafe fn predicateWithSubpredicates(
            &self,
            subpredicates: Option<&Foundation::NSArray<Foundation::NSPredicate>>,
        ) -> Id<Foundation::NSPredicate, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSPredicate"))]
        #[method_id(@__retain_semantics Other displayableSubpredicatesOfPredicate:)]
        pub unsafe fn displayableSubpredicatesOfPredicate(
            &self,
            predicate: &Foundation::NSPredicate,
        ) -> Option<Id<Foundation::NSArray<Foundation::NSPredicate>, Shared>>;

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSExpression",
            feature = "Foundation_NSNumber"
        ))]
        #[method_id(@__retain_semantics Init initWithLeftExpressions:rightExpressions:modifier:operators:options:)]
        pub unsafe fn initWithLeftExpressions_rightExpressions_modifier_operators_options(
            this: Option<Allocated<Self>>,
            leftExpressions: &Foundation::NSArray<Foundation::NSExpression>,
            rightExpressions: &Foundation::NSArray<Foundation::NSExpression>,
            modifier: NSComparisonPredicateModifier,
            operators: &Foundation::NSArray<Foundation::NSNumber>,
            options: NSUInteger,
        ) -> Id<Self, Shared>;

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSExpression",
            feature = "Foundation_NSNumber"
        ))]
        #[method_id(@__retain_semantics Init initWithLeftExpressions:rightExpressionAttributeType:modifier:operators:options:)]
        pub unsafe fn initWithLeftExpressions_rightExpressionAttributeType_modifier_operators_options(
            this: Option<Allocated<Self>>,
            leftExpressions: &Foundation::NSArray<Foundation::NSExpression>,
            attributeType: NSAttributeType,
            modifier: NSComparisonPredicateModifier,
            operators: &Foundation::NSArray<Foundation::NSNumber>,
            options: NSUInteger,
        ) -> Id<Self, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
        #[method_id(@__retain_semantics Init initWithCompoundTypes:)]
        pub unsafe fn initWithCompoundTypes(
            this: Option<Allocated<Self>>,
            compoundTypes: &Foundation::NSArray<Foundation::NSNumber>,
        ) -> Id<Self, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSExpression"))]
        #[method_id(@__retain_semantics Other leftExpressions)]
        pub unsafe fn leftExpressions(
            &self,
        ) -> Option<Id<Foundation::NSArray<Foundation::NSExpression>, Shared>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSExpression"))]
        #[method_id(@__retain_semantics Other rightExpressions)]
        pub unsafe fn rightExpressions(
            &self,
        ) -> Option<Id<Foundation::NSArray<Foundation::NSExpression>, Shared>>;

        #[method(rightExpressionAttributeType)]
        pub unsafe fn rightExpressionAttributeType(&self) -> NSAttributeType;

        #[method(modifier)]
        pub unsafe fn modifier(&self) -> NSComparisonPredicateModifier;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
        #[method_id(@__retain_semantics Other operators)]
        pub unsafe fn operators(
            &self,
        ) -> Option<Id<Foundation::NSArray<Foundation::NSNumber>, Shared>>;

        #[method(options)]
        pub unsafe fn options(&self) -> NSUInteger;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
        #[method_id(@__retain_semantics Other compoundTypes)]
        pub unsafe fn compoundTypes(
            &self,
        ) -> Option<Id<Foundation::NSArray<Foundation::NSNumber>, Shared>>;

        #[cfg(all(
            feature = "CoreData_NSEntityDescription",
            feature = "Foundation_NSArray",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other templatesWithAttributeKeyPaths:inEntityDescription:)]
        pub unsafe fn templatesWithAttributeKeyPaths_inEntityDescription(
            keyPaths: &Foundation::NSArray<Foundation::NSString>,
            entityDescription: &CoreData::NSEntityDescription,
        ) -> Id<Foundation::NSArray<AppKit::NSPredicateEditorRowTemplate>, Shared>;
    }
);
