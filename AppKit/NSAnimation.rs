//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit;
use crate::CoreData;
use crate::Foundation;

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSAnimationCurve {
        NSAnimationEaseInOut = 0,
        NSAnimationEaseIn = 1,
        NSAnimationEaseOut = 2,
        NSAnimationLinear = 3,
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSAnimationBlockingMode {
        NSAnimationBlocking = 0,
        NSAnimationNonblocking = 1,
        NSAnimationNonblockingThreaded = 2,
    }
);

pub type NSAnimationProgress = c_float;

extern_static!(NSAnimationProgressMarkNotification: &'static Foundation::NSNotificationName);

extern_static!(NSAnimationProgressMark: &'static Foundation::NSString);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSAnimation;

    unsafe impl ClassType for NSAnimation {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSAnimation")]
    unsafe impl NSAnimation {
        #[method_id(@__retain_semantics Init initWithDuration:animationCurve:)]
        pub unsafe fn initWithDuration_animationCurve(
            this: Option<Allocated<Self>>,
            duration: NSTimeInterval,
            animationCurve: NSAnimationCurve,
        ) -> Id<Self, Shared>;

        #[cfg(feature = "Foundation_NSCoder")]
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Option<Allocated<Self>>,
            coder: &Foundation::NSCoder,
        ) -> Option<Id<Self, Shared>>;

        #[method(startAnimation)]
        pub unsafe fn startAnimation(&self);

        #[method(stopAnimation)]
        pub unsafe fn stopAnimation(&self);

        #[method(isAnimating)]
        pub unsafe fn isAnimating(&self) -> bool;

        #[method(currentProgress)]
        pub unsafe fn currentProgress(&self) -> NSAnimationProgress;

        #[method(setCurrentProgress:)]
        pub unsafe fn setCurrentProgress(&self, currentProgress: NSAnimationProgress);

        #[method(duration)]
        pub unsafe fn duration(&self) -> NSTimeInterval;

        #[method(setDuration:)]
        pub unsafe fn setDuration(&self, duration: NSTimeInterval);

        #[method(animationBlockingMode)]
        pub unsafe fn animationBlockingMode(&self) -> NSAnimationBlockingMode;

        #[method(setAnimationBlockingMode:)]
        pub unsafe fn setAnimationBlockingMode(
            &self,
            animationBlockingMode: NSAnimationBlockingMode,
        );

        #[method(frameRate)]
        pub unsafe fn frameRate(&self) -> c_float;

        #[method(setFrameRate:)]
        pub unsafe fn setFrameRate(&self, frameRate: c_float);

        #[method(animationCurve)]
        pub unsafe fn animationCurve(&self) -> NSAnimationCurve;

        #[method(setAnimationCurve:)]
        pub unsafe fn setAnimationCurve(&self, animationCurve: NSAnimationCurve);

        #[method(currentValue)]
        pub unsafe fn currentValue(&self) -> c_float;

        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(&self) -> Option<Id<AppKit::NSAnimationDelegate, Shared>>;

        #[method(setDelegate:)]
        pub unsafe fn setDelegate(&self, delegate: Option<&AppKit::NSAnimationDelegate>);

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
        #[method_id(@__retain_semantics Other progressMarks)]
        pub unsafe fn progressMarks(&self)
            -> Id<Foundation::NSArray<Foundation::NSNumber>, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
        #[method(setProgressMarks:)]
        pub unsafe fn setProgressMarks(
            &self,
            progressMarks: &Foundation::NSArray<Foundation::NSNumber>,
        );

        #[method(addProgressMark:)]
        pub unsafe fn addProgressMark(&self, progressMark: NSAnimationProgress);

        #[method(removeProgressMark:)]
        pub unsafe fn removeProgressMark(&self, progressMark: NSAnimationProgress);

        #[method(startWhenAnimation:reachesProgress:)]
        pub unsafe fn startWhenAnimation_reachesProgress(
            &self,
            animation: &AppKit::NSAnimation,
            startProgress: NSAnimationProgress,
        );

        #[method(stopWhenAnimation:reachesProgress:)]
        pub unsafe fn stopWhenAnimation_reachesProgress(
            &self,
            animation: &AppKit::NSAnimation,
            stopProgress: NSAnimationProgress,
        );

        #[method(clearStartAnimation)]
        pub unsafe fn clearStartAnimation(&self);

        #[method(clearStopAnimation)]
        pub unsafe fn clearStopAnimation(&self);

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other runLoopModesForAnimating)]
        pub unsafe fn runLoopModesForAnimating(
            &self,
        ) -> Option<Id<Foundation::NSArray<Foundation::NSRunLoopMode>, Shared>>;
    }
);

extern_protocol!(
    pub struct NSAnimationDelegate;

    unsafe impl ProtocolType for NSAnimationDelegate {
        #[optional]
        #[method(animationShouldStart:)]
        pub unsafe fn animationShouldStart(&self, animation: &AppKit::NSAnimation) -> bool;

        #[optional]
        #[method(animationDidStop:)]
        pub unsafe fn animationDidStop(&self, animation: &AppKit::NSAnimation);

        #[optional]
        #[method(animationDidEnd:)]
        pub unsafe fn animationDidEnd(&self, animation: &AppKit::NSAnimation);

        #[optional]
        #[method(animation:valueForProgress:)]
        pub unsafe fn animation_valueForProgress(
            &self,
            animation: &AppKit::NSAnimation,
            progress: NSAnimationProgress,
        ) -> c_float;

        #[optional]
        #[method(animation:didReachProgressMark:)]
        pub unsafe fn animation_didReachProgressMark(
            &self,
            animation: &AppKit::NSAnimation,
            progress: NSAnimationProgress,
        );
    }
);

typed_enum!(
    pub type NSViewAnimationKey = Foundation::NSString;
);

extern_static!(NSViewAnimationTargetKey: &'static AppKit::NSViewAnimationKey);

extern_static!(NSViewAnimationStartFrameKey: &'static AppKit::NSViewAnimationKey);

extern_static!(NSViewAnimationEndFrameKey: &'static AppKit::NSViewAnimationKey);

extern_static!(NSViewAnimationEffectKey: &'static AppKit::NSViewAnimationKey);

typed_enum!(
    pub type NSViewAnimationEffectName = Foundation::NSString;
);

extern_static!(NSViewAnimationFadeInEffect: &'static AppKit::NSViewAnimationEffectName);

extern_static!(NSViewAnimationFadeOutEffect: &'static AppKit::NSViewAnimationEffectName);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSViewAnimation;

    unsafe impl ClassType for NSViewAnimation {
        #[inherits(NSObject)]
        type Super = NSAnimation;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSViewAnimation")]
    unsafe impl NSViewAnimation {
        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSDictionary"))]
        #[method_id(@__retain_semantics Init initWithViewAnimations:)]
        pub unsafe fn initWithViewAnimations(
            this: Option<Allocated<Self>>,
            viewAnimations: &Foundation::NSArray<
                Foundation::NSDictionary<AppKit::NSViewAnimationKey, Object>,
            >,
        ) -> Id<Self, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSDictionary"))]
        #[method_id(@__retain_semantics Other viewAnimations)]
        pub unsafe fn viewAnimations(
            &self,
        ) -> Id<
            Foundation::NSArray<Foundation::NSDictionary<AppKit::NSViewAnimationKey, Object>>,
            Shared,
        >;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSDictionary"))]
        #[method(setViewAnimations:)]
        pub unsafe fn setViewAnimations(
            &self,
            viewAnimations: &Foundation::NSArray<
                Foundation::NSDictionary<AppKit::NSViewAnimationKey, Object>,
            >,
        );
    }
);

pub type NSAnimatablePropertyKey = Foundation::NSString;

extern_protocol!(
    pub struct NSAnimatablePropertyContainer;

    unsafe impl ProtocolType for NSAnimatablePropertyContainer {
        #[method_id(@__retain_semantics Other animator)]
        pub unsafe fn animator(&self) -> Id<Self, Shared>;

        #[method_id(@__retain_semantics Other animations)]
        pub unsafe fn animations(
            &self,
        ) -> Id<Foundation::NSDictionary<AppKit::NSAnimatablePropertyKey, Object>, Shared>;

        #[method(setAnimations:)]
        pub unsafe fn setAnimations(
            &self,
            animations: &Foundation::NSDictionary<AppKit::NSAnimatablePropertyKey, Object>,
        );

        #[method_id(@__retain_semantics Other animationForKey:)]
        pub unsafe fn animationForKey(
            &self,
            key: &AppKit::NSAnimatablePropertyKey,
        ) -> Option<Id<Object, Shared>>;
    }
);

extern_static!(NSAnimationTriggerOrderIn: &'static AppKit::NSAnimatablePropertyKey);

extern_static!(NSAnimationTriggerOrderOut: &'static AppKit::NSAnimatablePropertyKey);

extern_methods!(
    /// Methods declared on superclass `NSAnimation`
    #[cfg(feature = "AppKit_NSViewAnimation")]
    unsafe impl NSViewAnimation {
        #[method_id(@__retain_semantics Init initWithDuration:animationCurve:)]
        pub unsafe fn initWithDuration_animationCurve(
            this: Option<Allocated<Self>>,
            duration: NSTimeInterval,
            animationCurve: NSAnimationCurve,
        ) -> Id<Self, Shared>;
    }
);
