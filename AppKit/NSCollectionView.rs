//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit;
use crate::CoreData;
use crate::Foundation;

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSCollectionViewDropOperation {
        NSCollectionViewDropOn = 0,
        NSCollectionViewDropBefore = 1,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSCollectionViewItemHighlightState {
        NSCollectionViewItemHighlightNone = 0,
        NSCollectionViewItemHighlightForSelection = 1,
        NSCollectionViewItemHighlightForDeselection = 2,
        NSCollectionViewItemHighlightAsDropTarget = 3,
    }
);

ns_options!(
    #[underlying(NSUInteger)]
    pub enum NSCollectionViewScrollPosition {
        NSCollectionViewScrollPositionNone = 0,
        NSCollectionViewScrollPositionTop = 1 << 0,
        NSCollectionViewScrollPositionCenteredVertically = 1 << 1,
        NSCollectionViewScrollPositionBottom = 1 << 2,
        NSCollectionViewScrollPositionNearestHorizontalEdge = 1 << 9,
        NSCollectionViewScrollPositionLeft = 1 << 3,
        NSCollectionViewScrollPositionCenteredHorizontally = 1 << 4,
        NSCollectionViewScrollPositionRight = 1 << 5,
        NSCollectionViewScrollPositionLeadingEdge = 1 << 6,
        NSCollectionViewScrollPositionTrailingEdge = 1 << 7,
        NSCollectionViewScrollPositionNearestVerticalEdge = 1 << 8,
    }
);

pub type NSCollectionViewSupplementaryElementKind = Foundation::NSString;

extern_protocol!(
    pub struct NSCollectionViewElement;

    unsafe impl ProtocolType for NSCollectionViewElement {
        #[optional]
        #[method(prepareForReuse)]
        pub unsafe fn prepareForReuse(&self);

        #[optional]
        #[method(applyLayoutAttributes:)]
        pub unsafe fn applyLayoutAttributes(
            &self,
            layoutAttributes: &AppKit::NSCollectionViewLayoutAttributes,
        );

        #[optional]
        #[method(willTransitionFromLayout:toLayout:)]
        pub unsafe fn willTransitionFromLayout_toLayout(
            &self,
            oldLayout: &AppKit::NSCollectionViewLayout,
            newLayout: &AppKit::NSCollectionViewLayout,
        );

        #[optional]
        #[method(didTransitionFromLayout:toLayout:)]
        pub unsafe fn didTransitionFromLayout_toLayout(
            &self,
            oldLayout: &AppKit::NSCollectionViewLayout,
            newLayout: &AppKit::NSCollectionViewLayout,
        );

        #[optional]
        #[method_id(@__retain_semantics Other preferredLayoutAttributesFittingAttributes:)]
        pub unsafe fn preferredLayoutAttributesFittingAttributes(
            &self,
            layoutAttributes: &AppKit::NSCollectionViewLayoutAttributes,
        ) -> Id<AppKit::NSCollectionViewLayoutAttributes, Shared>;
    }
);

extern_protocol!(
    pub struct NSCollectionViewSectionHeaderView;

    unsafe impl ProtocolType for NSCollectionViewSectionHeaderView {
        #[optional]
        #[method_id(@__retain_semantics Other sectionCollapseButton)]
        pub unsafe fn sectionCollapseButton(&self) -> Option<Id<AppKit::NSButton, Shared>>;

        #[optional]
        #[method(setSectionCollapseButton:)]
        pub unsafe fn setSectionCollapseButton(
            &self,
            sectionCollapseButton: Option<&AppKit::NSButton>,
        );
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSCollectionViewItem;

    unsafe impl ClassType for NSCollectionViewItem {
        #[inherits(AppKit::NSResponder, NSObject)]
        type Super = AppKit::NSViewController;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSCollectionViewItem")]
    unsafe impl NSCollectionViewItem {
        #[cfg(feature = "AppKit_NSCollectionView")]
        #[method_id(@__retain_semantics Other collectionView)]
        pub unsafe fn collectionView(&self) -> Option<Id<AppKit::NSCollectionView, Shared>>;

        #[method(isSelected)]
        pub unsafe fn isSelected(&self) -> bool;

        #[method(setSelected:)]
        pub unsafe fn setSelected(&self, selected: bool);

        #[method(highlightState)]
        pub unsafe fn highlightState(&self) -> NSCollectionViewItemHighlightState;

        #[method(setHighlightState:)]
        pub unsafe fn setHighlightState(&self, highlightState: NSCollectionViewItemHighlightState);

        #[cfg(feature = "AppKit_NSImageView")]
        #[method_id(@__retain_semantics Other imageView)]
        pub unsafe fn imageView(&self) -> Option<Id<AppKit::NSImageView, Shared>>;

        #[cfg(feature = "AppKit_NSImageView")]
        #[method(setImageView:)]
        pub unsafe fn setImageView(&self, imageView: Option<&AppKit::NSImageView>);

        #[cfg(feature = "AppKit_NSTextField")]
        #[method_id(@__retain_semantics Other textField)]
        pub unsafe fn textField(&self) -> Option<Id<AppKit::NSTextField, Shared>>;

        #[cfg(feature = "AppKit_NSTextField")]
        #[method(setTextField:)]
        pub unsafe fn setTextField(&self, textField: Option<&AppKit::NSTextField>);

        #[cfg(all(
            feature = "AppKit_NSDraggingImageComponent",
            feature = "Foundation_NSArray"
        ))]
        #[method_id(@__retain_semantics Other draggingImageComponents)]
        pub unsafe fn draggingImageComponents(
            &self,
        ) -> Id<Foundation::NSArray<AppKit::NSDraggingImageComponent>, Shared>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSCollectionView;

    unsafe impl ClassType for NSCollectionView {
        #[inherits(AppKit::NSResponder, NSObject)]
        type Super = AppKit::NSView;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSCollectionView")]
    unsafe impl NSCollectionView {
        #[cfg(feature = "AppKit_NSCollectionViewDataSource")]
        #[method_id(@__retain_semantics Other dataSource)]
        pub unsafe fn dataSource(&self) -> Option<Id<AppKit::NSCollectionViewDataSource, Shared>>;

        #[cfg(feature = "AppKit_NSCollectionViewDataSource")]
        #[method(setDataSource:)]
        pub unsafe fn setDataSource(&self, dataSource: Option<&AppKit::NSCollectionViewDataSource>);

        #[cfg(feature = "AppKit_NSCollectionViewPrefetching")]
        #[method_id(@__retain_semantics Other prefetchDataSource)]
        pub unsafe fn prefetchDataSource(
            &self,
        ) -> Option<Id<AppKit::NSCollectionViewPrefetching, Shared>>;

        #[cfg(feature = "AppKit_NSCollectionViewPrefetching")]
        #[method(setPrefetchDataSource:)]
        pub unsafe fn setPrefetchDataSource(
            &self,
            prefetchDataSource: Option<&AppKit::NSCollectionViewPrefetching>,
        );

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other content)]
        pub unsafe fn content(&self) -> Id<Foundation::NSArray<Object>, Shared>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method(setContent:)]
        pub unsafe fn setContent(&self, content: &Foundation::NSArray<Object>);

        #[method(reloadData)]
        pub unsafe fn reloadData(&self);

        #[cfg(feature = "AppKit_NSCollectionViewDelegate")]
        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(&self) -> Option<Id<AppKit::NSCollectionViewDelegate, Shared>>;

        #[cfg(feature = "AppKit_NSCollectionViewDelegate")]
        #[method(setDelegate:)]
        pub unsafe fn setDelegate(&self, delegate: Option<&AppKit::NSCollectionViewDelegate>);

        #[method_id(@__retain_semantics Other backgroundView)]
        pub unsafe fn backgroundView(&self) -> Option<Id<AppKit::NSView, Shared>>;

        #[method(setBackgroundView:)]
        pub unsafe fn setBackgroundView(&self, backgroundView: Option<&AppKit::NSView>);

        #[method(backgroundViewScrollsWithContent)]
        pub unsafe fn backgroundViewScrollsWithContent(&self) -> bool;

        #[method(setBackgroundViewScrollsWithContent:)]
        pub unsafe fn setBackgroundViewScrollsWithContent(
            &self,
            backgroundViewScrollsWithContent: bool,
        );

        #[cfg(feature = "AppKit_NSCollectionViewLayout")]
        #[method_id(@__retain_semantics Other collectionViewLayout)]
        pub unsafe fn collectionViewLayout(
            &self,
        ) -> Option<Id<AppKit::NSCollectionViewLayout, Shared>>;

        #[cfg(feature = "AppKit_NSCollectionViewLayout")]
        #[method(setCollectionViewLayout:)]
        pub unsafe fn setCollectionViewLayout(
            &self,
            collectionViewLayout: Option<&AppKit::NSCollectionViewLayout>,
        );

        #[cfg(all(
            feature = "AppKit_NSCollectionViewLayoutAttributes",
            feature = "Foundation_NSIndexPath"
        ))]
        #[method_id(@__retain_semantics Other layoutAttributesForItemAtIndexPath:)]
        pub unsafe fn layoutAttributesForItemAtIndexPath(
            &self,
            indexPath: &Foundation::NSIndexPath,
        ) -> Option<Id<AppKit::NSCollectionViewLayoutAttributes, Shared>>;

        #[cfg(all(
            feature = "AppKit_NSCollectionViewLayoutAttributes",
            feature = "AppKit_NSCollectionViewSupplementaryElementKind",
            feature = "Foundation_NSIndexPath"
        ))]
        #[method_id(@__retain_semantics Other layoutAttributesForSupplementaryElementOfKind:atIndexPath:)]
        pub unsafe fn layoutAttributesForSupplementaryElementOfKind_atIndexPath(
            &self,
            kind: &AppKit::NSCollectionViewSupplementaryElementKind,
            indexPath: &Foundation::NSIndexPath,
        ) -> Option<Id<AppKit::NSCollectionViewLayoutAttributes, Shared>>;

        #[method(frameForItemAtIndex:)]
        pub unsafe fn frameForItemAtIndex(&self, index: NSUInteger) -> NSRect;

        #[method(frameForItemAtIndex:withNumberOfItems:)]
        pub unsafe fn frameForItemAtIndex_withNumberOfItems(
            &self,
            index: NSUInteger,
            numberOfItems: NSUInteger,
        ) -> NSRect;

        #[cfg(all(feature = "AppKit_NSColor", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Other backgroundColors)]
        pub unsafe fn backgroundColors(&self) -> Id<Foundation::NSArray<AppKit::NSColor>, Shared>;

        #[cfg(all(feature = "AppKit_NSColor", feature = "Foundation_NSArray"))]
        #[method(setBackgroundColors:)]
        pub unsafe fn setBackgroundColors(
            &self,
            backgroundColors: Option<&Foundation::NSArray<AppKit::NSColor>>,
        );

        #[method(numberOfSections)]
        pub unsafe fn numberOfSections(&self) -> NSInteger;

        #[method(numberOfItemsInSection:)]
        pub unsafe fn numberOfItemsInSection(&self, section: NSInteger) -> NSInteger;

        #[method(isFirstResponder)]
        pub unsafe fn isFirstResponder(&self) -> bool;

        #[method(isSelectable)]
        pub unsafe fn isSelectable(&self) -> bool;

        #[method(setSelectable:)]
        pub unsafe fn setSelectable(&self, selectable: bool);

        #[method(allowsEmptySelection)]
        pub unsafe fn allowsEmptySelection(&self) -> bool;

        #[method(setAllowsEmptySelection:)]
        pub unsafe fn setAllowsEmptySelection(&self, allowsEmptySelection: bool);

        #[method(allowsMultipleSelection)]
        pub unsafe fn allowsMultipleSelection(&self) -> bool;

        #[method(setAllowsMultipleSelection:)]
        pub unsafe fn setAllowsMultipleSelection(&self, allowsMultipleSelection: bool);

        #[cfg(feature = "Foundation_NSIndexSet")]
        #[method_id(@__retain_semantics Other selectionIndexes)]
        pub unsafe fn selectionIndexes(&self) -> Id<Foundation::NSIndexSet, Shared>;

        #[cfg(feature = "Foundation_NSIndexSet")]
        #[method(setSelectionIndexes:)]
        pub unsafe fn setSelectionIndexes(&self, selectionIndexes: &Foundation::NSIndexSet);

        #[cfg(all(feature = "Foundation_NSIndexPath", feature = "Foundation_NSSet"))]
        #[method_id(@__retain_semantics Other selectionIndexPaths)]
        pub unsafe fn selectionIndexPaths(
            &self,
        ) -> Id<Foundation::NSSet<Foundation::NSIndexPath>, Shared>;

        #[cfg(all(feature = "Foundation_NSIndexPath", feature = "Foundation_NSSet"))]
        #[method(setSelectionIndexPaths:)]
        pub unsafe fn setSelectionIndexPaths(
            &self,
            selectionIndexPaths: &Foundation::NSSet<Foundation::NSIndexPath>,
        );

        #[cfg(all(feature = "Foundation_NSIndexPath", feature = "Foundation_NSSet"))]
        #[method(selectItemsAtIndexPaths:scrollPosition:)]
        pub unsafe fn selectItemsAtIndexPaths_scrollPosition(
            &self,
            indexPaths: &Foundation::NSSet<Foundation::NSIndexPath>,
            scrollPosition: NSCollectionViewScrollPosition,
        );

        #[cfg(all(feature = "Foundation_NSIndexPath", feature = "Foundation_NSSet"))]
        #[method(deselectItemsAtIndexPaths:)]
        pub unsafe fn deselectItemsAtIndexPaths(
            &self,
            indexPaths: &Foundation::NSSet<Foundation::NSIndexPath>,
        );

        #[method(selectAll:)]
        pub unsafe fn selectAll(&self, sender: Option<&Object>);

        #[method(deselectAll:)]
        pub unsafe fn deselectAll(&self, sender: Option<&Object>);

        #[cfg(feature = "AppKit_NSUserInterfaceItemIdentifier")]
        #[method(registerClass:forItemWithIdentifier:)]
        pub unsafe fn registerClass_forItemWithIdentifier(
            &self,
            itemClass: Option<&Class>,
            identifier: &AppKit::NSUserInterfaceItemIdentifier,
        );

        #[cfg(all(
            feature = "AppKit_NSNib",
            feature = "AppKit_NSUserInterfaceItemIdentifier"
        ))]
        #[method(registerNib:forItemWithIdentifier:)]
        pub unsafe fn registerNib_forItemWithIdentifier(
            &self,
            nib: Option<&AppKit::NSNib>,
            identifier: &AppKit::NSUserInterfaceItemIdentifier,
        );

        #[cfg(all(
            feature = "AppKit_NSCollectionViewSupplementaryElementKind",
            feature = "AppKit_NSUserInterfaceItemIdentifier"
        ))]
        #[method(registerClass:forSupplementaryViewOfKind:withIdentifier:)]
        pub unsafe fn registerClass_forSupplementaryViewOfKind_withIdentifier(
            &self,
            viewClass: Option<&Class>,
            kind: &AppKit::NSCollectionViewSupplementaryElementKind,
            identifier: &AppKit::NSUserInterfaceItemIdentifier,
        );

        #[cfg(all(
            feature = "AppKit_NSCollectionViewSupplementaryElementKind",
            feature = "AppKit_NSNib",
            feature = "AppKit_NSUserInterfaceItemIdentifier"
        ))]
        #[method(registerNib:forSupplementaryViewOfKind:withIdentifier:)]
        pub unsafe fn registerNib_forSupplementaryViewOfKind_withIdentifier(
            &self,
            nib: Option<&AppKit::NSNib>,
            kind: &AppKit::NSCollectionViewSupplementaryElementKind,
            identifier: &AppKit::NSUserInterfaceItemIdentifier,
        );

        #[cfg(all(
            feature = "AppKit_NSCollectionViewItem",
            feature = "AppKit_NSUserInterfaceItemIdentifier",
            feature = "Foundation_NSIndexPath"
        ))]
        #[method_id(@__retain_semantics Other makeItemWithIdentifier:forIndexPath:)]
        pub unsafe fn makeItemWithIdentifier_forIndexPath(
            &self,
            identifier: &AppKit::NSUserInterfaceItemIdentifier,
            indexPath: &Foundation::NSIndexPath,
        ) -> Id<AppKit::NSCollectionViewItem, Shared>;

        #[cfg(all(
            feature = "AppKit_NSCollectionViewSupplementaryElementKind",
            feature = "AppKit_NSUserInterfaceItemIdentifier",
            feature = "Foundation_NSIndexPath"
        ))]
        #[method_id(@__retain_semantics Other makeSupplementaryViewOfKind:withIdentifier:forIndexPath:)]
        pub unsafe fn makeSupplementaryViewOfKind_withIdentifier_forIndexPath(
            &self,
            elementKind: &AppKit::NSCollectionViewSupplementaryElementKind,
            identifier: &AppKit::NSUserInterfaceItemIdentifier,
            indexPath: &Foundation::NSIndexPath,
        ) -> Id<AppKit::NSView, Shared>;

        #[cfg(feature = "AppKit_NSCollectionViewItem")]
        #[method_id(@__retain_semantics Other itemAtIndex:)]
        pub unsafe fn itemAtIndex(
            &self,
            index: NSUInteger,
        ) -> Option<Id<AppKit::NSCollectionViewItem, Shared>>;

        #[cfg(all(
            feature = "AppKit_NSCollectionViewItem",
            feature = "Foundation_NSIndexPath"
        ))]
        #[method_id(@__retain_semantics Other itemAtIndexPath:)]
        pub unsafe fn itemAtIndexPath(
            &self,
            indexPath: &Foundation::NSIndexPath,
        ) -> Option<Id<AppKit::NSCollectionViewItem, Shared>>;

        #[cfg(all(
            feature = "AppKit_NSCollectionViewItem",
            feature = "Foundation_NSArray"
        ))]
        #[method_id(@__retain_semantics Other visibleItems)]
        pub unsafe fn visibleItems(
            &self,
        ) -> Id<Foundation::NSArray<AppKit::NSCollectionViewItem>, Shared>;

        #[cfg(all(feature = "Foundation_NSIndexPath", feature = "Foundation_NSSet"))]
        #[method_id(@__retain_semantics Other indexPathsForVisibleItems)]
        pub unsafe fn indexPathsForVisibleItems(
            &self,
        ) -> Id<Foundation::NSSet<Foundation::NSIndexPath>, Shared>;

        #[cfg(all(
            feature = "AppKit_NSCollectionViewItem",
            feature = "Foundation_NSIndexPath"
        ))]
        #[method_id(@__retain_semantics Other indexPathForItem:)]
        pub unsafe fn indexPathForItem(
            &self,
            item: &AppKit::NSCollectionViewItem,
        ) -> Option<Id<Foundation::NSIndexPath, Shared>>;

        #[cfg(feature = "Foundation_NSIndexPath")]
        #[method_id(@__retain_semantics Other indexPathForItemAtPoint:)]
        pub unsafe fn indexPathForItemAtPoint(
            &self,
            point: NSPoint,
        ) -> Option<Id<Foundation::NSIndexPath, Shared>>;

        #[cfg(all(
            feature = "AppKit_NSCollectionViewSupplementaryElementKind",
            feature = "Foundation_NSIndexPath"
        ))]
        #[method_id(@__retain_semantics Other supplementaryViewForElementKind:atIndexPath:)]
        pub unsafe fn supplementaryViewForElementKind_atIndexPath(
            &self,
            elementKind: &AppKit::NSCollectionViewSupplementaryElementKind,
            indexPath: &Foundation::NSIndexPath,
        ) -> Option<Id<AppKit::NSView, Shared>>;

        #[cfg(all(
            feature = "AppKit_NSCollectionViewSupplementaryElementKind",
            feature = "Foundation_NSArray"
        ))]
        #[method_id(@__retain_semantics Other visibleSupplementaryViewsOfKind:)]
        pub unsafe fn visibleSupplementaryViewsOfKind(
            &self,
            elementKind: &AppKit::NSCollectionViewSupplementaryElementKind,
        ) -> Id<Foundation::NSArray<AppKit::NSView>, Shared>;

        #[cfg(all(
            feature = "AppKit_NSCollectionViewSupplementaryElementKind",
            feature = "Foundation_NSIndexPath",
            feature = "Foundation_NSSet"
        ))]
        #[method_id(@__retain_semantics Other indexPathsForVisibleSupplementaryElementsOfKind:)]
        pub unsafe fn indexPathsForVisibleSupplementaryElementsOfKind(
            &self,
            elementKind: &AppKit::NSCollectionViewSupplementaryElementKind,
        ) -> Id<Foundation::NSSet<Foundation::NSIndexPath>, Shared>;

        #[cfg(feature = "Foundation_NSIndexSet")]
        #[method(insertSections:)]
        pub unsafe fn insertSections(&self, sections: &Foundation::NSIndexSet);

        #[cfg(feature = "Foundation_NSIndexSet")]
        #[method(deleteSections:)]
        pub unsafe fn deleteSections(&self, sections: &Foundation::NSIndexSet);

        #[cfg(feature = "Foundation_NSIndexSet")]
        #[method(reloadSections:)]
        pub unsafe fn reloadSections(&self, sections: &Foundation::NSIndexSet);

        #[method(moveSection:toSection:)]
        pub unsafe fn moveSection_toSection(&self, section: NSInteger, newSection: NSInteger);

        #[cfg(all(feature = "Foundation_NSIndexPath", feature = "Foundation_NSSet"))]
        #[method(insertItemsAtIndexPaths:)]
        pub unsafe fn insertItemsAtIndexPaths(
            &self,
            indexPaths: &Foundation::NSSet<Foundation::NSIndexPath>,
        );

        #[cfg(all(feature = "Foundation_NSIndexPath", feature = "Foundation_NSSet"))]
        #[method(deleteItemsAtIndexPaths:)]
        pub unsafe fn deleteItemsAtIndexPaths(
            &self,
            indexPaths: &Foundation::NSSet<Foundation::NSIndexPath>,
        );

        #[cfg(all(feature = "Foundation_NSIndexPath", feature = "Foundation_NSSet"))]
        #[method(reloadItemsAtIndexPaths:)]
        pub unsafe fn reloadItemsAtIndexPaths(
            &self,
            indexPaths: &Foundation::NSSet<Foundation::NSIndexPath>,
        );

        #[cfg(feature = "Foundation_NSIndexPath")]
        #[method(moveItemAtIndexPath:toIndexPath:)]
        pub unsafe fn moveItemAtIndexPath_toIndexPath(
            &self,
            indexPath: &Foundation::NSIndexPath,
            newIndexPath: &Foundation::NSIndexPath,
        );

        #[method(performBatchUpdates:completionHandler:)]
        pub unsafe fn performBatchUpdates_completionHandler(
            &self,
            updates: Option<&Block<(), ()>>,
            completionHandler: Option<&Block<(Bool,), ()>>,
        );

        #[method(toggleSectionCollapse:)]
        pub unsafe fn toggleSectionCollapse(&self, sender: &Object);

        #[cfg(all(feature = "Foundation_NSIndexPath", feature = "Foundation_NSSet"))]
        #[method(scrollToItemsAtIndexPaths:scrollPosition:)]
        pub unsafe fn scrollToItemsAtIndexPaths_scrollPosition(
            &self,
            indexPaths: &Foundation::NSSet<Foundation::NSIndexPath>,
            scrollPosition: NSCollectionViewScrollPosition,
        );

        #[method(setDraggingSourceOperationMask:forLocal:)]
        pub unsafe fn setDraggingSourceOperationMask_forLocal(
            &self,
            dragOperationMask: NSDragOperation,
            localDestination: bool,
        );

        #[cfg(all(
            feature = "AppKit_NSEvent",
            feature = "AppKit_NSImage",
            feature = "Foundation_NSIndexPath",
            feature = "Foundation_NSSet"
        ))]
        #[method_id(@__retain_semantics Other draggingImageForItemsAtIndexPaths:withEvent:offset:)]
        pub unsafe fn draggingImageForItemsAtIndexPaths_withEvent_offset(
            &self,
            indexPaths: &Foundation::NSSet<Foundation::NSIndexPath>,
            event: &AppKit::NSEvent,
            dragImageOffset: NSPointPointer,
        ) -> Id<AppKit::NSImage, Shared>;

        #[cfg(all(
            feature = "AppKit_NSEvent",
            feature = "AppKit_NSImage",
            feature = "Foundation_NSIndexSet"
        ))]
        #[method_id(@__retain_semantics Other draggingImageForItemsAtIndexes:withEvent:offset:)]
        pub unsafe fn draggingImageForItemsAtIndexes_withEvent_offset(
            &self,
            indexes: &Foundation::NSIndexSet,
            event: &AppKit::NSEvent,
            dragImageOffset: NSPointPointer,
        ) -> Id<AppKit::NSImage, Shared>;
    }
);

extern_protocol!(
    pub struct NSCollectionViewDataSource;

    unsafe impl ProtocolType for NSCollectionViewDataSource {
        #[method(collectionView:numberOfItemsInSection:)]
        pub unsafe fn collectionView_numberOfItemsInSection(
            &self,
            collectionView: &AppKit::NSCollectionView,
            section: NSInteger,
        ) -> NSInteger;

        #[method_id(@__retain_semantics Other collectionView:itemForRepresentedObjectAtIndexPath:)]
        pub unsafe fn collectionView_itemForRepresentedObjectAtIndexPath(
            &self,
            collectionView: &AppKit::NSCollectionView,
            indexPath: &Foundation::NSIndexPath,
        ) -> Id<AppKit::NSCollectionViewItem, Shared>;

        #[optional]
        #[method(numberOfSectionsInCollectionView:)]
        pub unsafe fn numberOfSectionsInCollectionView(
            &self,
            collectionView: &AppKit::NSCollectionView,
        ) -> NSInteger;

        #[optional]
        #[method_id(@__retain_semantics Other collectionView:viewForSupplementaryElementOfKind:atIndexPath:)]
        pub unsafe fn collectionView_viewForSupplementaryElementOfKind_atIndexPath(
            &self,
            collectionView: &AppKit::NSCollectionView,
            kind: &AppKit::NSCollectionViewSupplementaryElementKind,
            indexPath: &Foundation::NSIndexPath,
        ) -> Id<AppKit::NSView, Shared>;
    }
);

extern_protocol!(
    pub struct NSCollectionViewPrefetching;

    unsafe impl ProtocolType for NSCollectionViewPrefetching {
        #[method(collectionView:prefetchItemsAtIndexPaths:)]
        pub unsafe fn collectionView_prefetchItemsAtIndexPaths(
            &self,
            collectionView: &AppKit::NSCollectionView,
            indexPaths: &Foundation::NSArray<Foundation::NSIndexPath>,
        );

        #[optional]
        #[method(collectionView:cancelPrefetchingForItemsAtIndexPaths:)]
        pub unsafe fn collectionView_cancelPrefetchingForItemsAtIndexPaths(
            &self,
            collectionView: &AppKit::NSCollectionView,
            indexPaths: &Foundation::NSArray<Foundation::NSIndexPath>,
        );
    }
);

extern_protocol!(
    pub struct NSCollectionViewDelegate;

    unsafe impl ProtocolType for NSCollectionViewDelegate {
        #[optional]
        #[method(collectionView:canDragItemsAtIndexPaths:withEvent:)]
        pub unsafe fn collectionView_canDragItemsAtIndexPaths_withEvent(
            &self,
            collectionView: &AppKit::NSCollectionView,
            indexPaths: &Foundation::NSSet<Foundation::NSIndexPath>,
            event: &AppKit::NSEvent,
        ) -> bool;

        #[optional]
        #[method(collectionView:canDragItemsAtIndexes:withEvent:)]
        pub unsafe fn collectionView_canDragItemsAtIndexes_withEvent(
            &self,
            collectionView: &AppKit::NSCollectionView,
            indexes: &Foundation::NSIndexSet,
            event: &AppKit::NSEvent,
        ) -> bool;

        #[optional]
        #[method(collectionView:writeItemsAtIndexPaths:toPasteboard:)]
        pub unsafe fn collectionView_writeItemsAtIndexPaths_toPasteboard(
            &self,
            collectionView: &AppKit::NSCollectionView,
            indexPaths: &Foundation::NSSet<Foundation::NSIndexPath>,
            pasteboard: &AppKit::NSPasteboard,
        ) -> bool;

        #[optional]
        #[method(collectionView:writeItemsAtIndexes:toPasteboard:)]
        pub unsafe fn collectionView_writeItemsAtIndexes_toPasteboard(
            &self,
            collectionView: &AppKit::NSCollectionView,
            indexes: &Foundation::NSIndexSet,
            pasteboard: &AppKit::NSPasteboard,
        ) -> bool;

        #[optional]
        #[method_id(@__retain_semantics Other collectionView:namesOfPromisedFilesDroppedAtDestination:forDraggedItemsAtIndexPaths:)]
        pub unsafe fn collectionView_namesOfPromisedFilesDroppedAtDestination_forDraggedItemsAtIndexPaths(
            &self,
            collectionView: &AppKit::NSCollectionView,
            dropURL: &Foundation::NSURL,
            indexPaths: &Foundation::NSSet<Foundation::NSIndexPath>,
        ) -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[optional]
        #[method_id(@__retain_semantics Other collectionView:namesOfPromisedFilesDroppedAtDestination:forDraggedItemsAtIndexes:)]
        pub unsafe fn collectionView_namesOfPromisedFilesDroppedAtDestination_forDraggedItemsAtIndexes(
            &self,
            collectionView: &AppKit::NSCollectionView,
            dropURL: &Foundation::NSURL,
            indexes: &Foundation::NSIndexSet,
        ) -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[optional]
        #[method_id(@__retain_semantics Other collectionView:draggingImageForItemsAtIndexPaths:withEvent:offset:)]
        pub unsafe fn collectionView_draggingImageForItemsAtIndexPaths_withEvent_offset(
            &self,
            collectionView: &AppKit::NSCollectionView,
            indexPaths: &Foundation::NSSet<Foundation::NSIndexPath>,
            event: &AppKit::NSEvent,
            dragImageOffset: NSPointPointer,
        ) -> Id<AppKit::NSImage, Shared>;

        #[optional]
        #[method_id(@__retain_semantics Other collectionView:draggingImageForItemsAtIndexes:withEvent:offset:)]
        pub unsafe fn collectionView_draggingImageForItemsAtIndexes_withEvent_offset(
            &self,
            collectionView: &AppKit::NSCollectionView,
            indexes: &Foundation::NSIndexSet,
            event: &AppKit::NSEvent,
            dragImageOffset: NSPointPointer,
        ) -> Id<AppKit::NSImage, Shared>;

        #[optional]
        #[method(collectionView:validateDrop:proposedIndexPath:dropOperation:)]
        pub unsafe fn collectionView_validateDrop_proposedIndexPath_dropOperation(
            &self,
            collectionView: &AppKit::NSCollectionView,
            draggingInfo: &AppKit::NSDraggingInfo,
            proposedDropIndexPath: NonNull<NonNull<Foundation::NSIndexPath>>,
            proposedDropOperation: NonNull<NSCollectionViewDropOperation>,
        ) -> NSDragOperation;

        #[optional]
        #[method(collectionView:validateDrop:proposedIndex:dropOperation:)]
        pub unsafe fn collectionView_validateDrop_proposedIndex_dropOperation(
            &self,
            collectionView: &AppKit::NSCollectionView,
            draggingInfo: &AppKit::NSDraggingInfo,
            proposedDropIndex: NonNull<NSInteger>,
            proposedDropOperation: NonNull<NSCollectionViewDropOperation>,
        ) -> NSDragOperation;

        #[optional]
        #[method(collectionView:acceptDrop:indexPath:dropOperation:)]
        pub unsafe fn collectionView_acceptDrop_indexPath_dropOperation(
            &self,
            collectionView: &AppKit::NSCollectionView,
            draggingInfo: &AppKit::NSDraggingInfo,
            indexPath: &Foundation::NSIndexPath,
            dropOperation: NSCollectionViewDropOperation,
        ) -> bool;

        #[optional]
        #[method(collectionView:acceptDrop:index:dropOperation:)]
        pub unsafe fn collectionView_acceptDrop_index_dropOperation(
            &self,
            collectionView: &AppKit::NSCollectionView,
            draggingInfo: &AppKit::NSDraggingInfo,
            index: NSInteger,
            dropOperation: NSCollectionViewDropOperation,
        ) -> bool;

        #[optional]
        #[method_id(@__retain_semantics Other collectionView:pasteboardWriterForItemAtIndexPath:)]
        pub unsafe fn collectionView_pasteboardWriterForItemAtIndexPath(
            &self,
            collectionView: &AppKit::NSCollectionView,
            indexPath: &Foundation::NSIndexPath,
        ) -> Option<Id<AppKit::NSPasteboardWriting, Shared>>;

        #[optional]
        #[method_id(@__retain_semantics Other collectionView:pasteboardWriterForItemAtIndex:)]
        pub unsafe fn collectionView_pasteboardWriterForItemAtIndex(
            &self,
            collectionView: &AppKit::NSCollectionView,
            index: NSUInteger,
        ) -> Option<Id<AppKit::NSPasteboardWriting, Shared>>;

        #[optional]
        #[method(collectionView:draggingSession:willBeginAtPoint:forItemsAtIndexPaths:)]
        pub unsafe fn collectionView_draggingSession_willBeginAtPoint_forItemsAtIndexPaths(
            &self,
            collectionView: &AppKit::NSCollectionView,
            session: &AppKit::NSDraggingSession,
            screenPoint: NSPoint,
            indexPaths: &Foundation::NSSet<Foundation::NSIndexPath>,
        );

        #[optional]
        #[method(collectionView:draggingSession:willBeginAtPoint:forItemsAtIndexes:)]
        pub unsafe fn collectionView_draggingSession_willBeginAtPoint_forItemsAtIndexes(
            &self,
            collectionView: &AppKit::NSCollectionView,
            session: &AppKit::NSDraggingSession,
            screenPoint: NSPoint,
            indexes: &Foundation::NSIndexSet,
        );

        #[optional]
        #[method(collectionView:draggingSession:endedAtPoint:dragOperation:)]
        pub unsafe fn collectionView_draggingSession_endedAtPoint_dragOperation(
            &self,
            collectionView: &AppKit::NSCollectionView,
            session: &AppKit::NSDraggingSession,
            screenPoint: NSPoint,
            operation: NSDragOperation,
        );

        #[optional]
        #[method(collectionView:updateDraggingItemsForDrag:)]
        pub unsafe fn collectionView_updateDraggingItemsForDrag(
            &self,
            collectionView: &AppKit::NSCollectionView,
            draggingInfo: &AppKit::NSDraggingInfo,
        );

        #[optional]
        #[method_id(@__retain_semantics Other collectionView:shouldChangeItemsAtIndexPaths:toHighlightState:)]
        pub unsafe fn collectionView_shouldChangeItemsAtIndexPaths_toHighlightState(
            &self,
            collectionView: &AppKit::NSCollectionView,
            indexPaths: &Foundation::NSSet<Foundation::NSIndexPath>,
            highlightState: NSCollectionViewItemHighlightState,
        ) -> Id<Foundation::NSSet<Foundation::NSIndexPath>, Shared>;

        #[optional]
        #[method(collectionView:didChangeItemsAtIndexPaths:toHighlightState:)]
        pub unsafe fn collectionView_didChangeItemsAtIndexPaths_toHighlightState(
            &self,
            collectionView: &AppKit::NSCollectionView,
            indexPaths: &Foundation::NSSet<Foundation::NSIndexPath>,
            highlightState: NSCollectionViewItemHighlightState,
        );

        #[optional]
        #[method_id(@__retain_semantics Other collectionView:shouldSelectItemsAtIndexPaths:)]
        pub unsafe fn collectionView_shouldSelectItemsAtIndexPaths(
            &self,
            collectionView: &AppKit::NSCollectionView,
            indexPaths: &Foundation::NSSet<Foundation::NSIndexPath>,
        ) -> Id<Foundation::NSSet<Foundation::NSIndexPath>, Shared>;

        #[optional]
        #[method_id(@__retain_semantics Other collectionView:shouldDeselectItemsAtIndexPaths:)]
        pub unsafe fn collectionView_shouldDeselectItemsAtIndexPaths(
            &self,
            collectionView: &AppKit::NSCollectionView,
            indexPaths: &Foundation::NSSet<Foundation::NSIndexPath>,
        ) -> Id<Foundation::NSSet<Foundation::NSIndexPath>, Shared>;

        #[optional]
        #[method(collectionView:didSelectItemsAtIndexPaths:)]
        pub unsafe fn collectionView_didSelectItemsAtIndexPaths(
            &self,
            collectionView: &AppKit::NSCollectionView,
            indexPaths: &Foundation::NSSet<Foundation::NSIndexPath>,
        );

        #[optional]
        #[method(collectionView:didDeselectItemsAtIndexPaths:)]
        pub unsafe fn collectionView_didDeselectItemsAtIndexPaths(
            &self,
            collectionView: &AppKit::NSCollectionView,
            indexPaths: &Foundation::NSSet<Foundation::NSIndexPath>,
        );

        #[optional]
        #[method(collectionView:willDisplayItem:forRepresentedObjectAtIndexPath:)]
        pub unsafe fn collectionView_willDisplayItem_forRepresentedObjectAtIndexPath(
            &self,
            collectionView: &AppKit::NSCollectionView,
            item: &AppKit::NSCollectionViewItem,
            indexPath: &Foundation::NSIndexPath,
        );

        #[optional]
        #[method(collectionView:willDisplaySupplementaryView:forElementKind:atIndexPath:)]
        pub unsafe fn collectionView_willDisplaySupplementaryView_forElementKind_atIndexPath(
            &self,
            collectionView: &AppKit::NSCollectionView,
            view: &AppKit::NSView,
            elementKind: &AppKit::NSCollectionViewSupplementaryElementKind,
            indexPath: &Foundation::NSIndexPath,
        );

        #[optional]
        #[method(collectionView:didEndDisplayingItem:forRepresentedObjectAtIndexPath:)]
        pub unsafe fn collectionView_didEndDisplayingItem_forRepresentedObjectAtIndexPath(
            &self,
            collectionView: &AppKit::NSCollectionView,
            item: &AppKit::NSCollectionViewItem,
            indexPath: &Foundation::NSIndexPath,
        );

        #[optional]
        #[method(collectionView:didEndDisplayingSupplementaryView:forElementOfKind:atIndexPath:)]
        pub unsafe fn collectionView_didEndDisplayingSupplementaryView_forElementOfKind_atIndexPath(
            &self,
            collectionView: &AppKit::NSCollectionView,
            view: &AppKit::NSView,
            elementKind: &AppKit::NSCollectionViewSupplementaryElementKind,
            indexPath: &Foundation::NSIndexPath,
        );

        #[optional]
        #[method_id(@__retain_semantics Other collectionView:transitionLayoutForOldLayout:newLayout:)]
        pub unsafe fn collectionView_transitionLayoutForOldLayout_newLayout(
            &self,
            collectionView: &AppKit::NSCollectionView,
            fromLayout: &AppKit::NSCollectionViewLayout,
            toLayout: &AppKit::NSCollectionViewLayout,
        ) -> Id<AppKit::NSCollectionViewTransitionLayout, Shared>;
    }
);

extern_methods!(
    /// NSCollectionViewAdditions
    #[cfg(feature = "Foundation_NSIndexPath")]
    unsafe impl Foundation::NSIndexPath {
        #[method_id(@__retain_semantics Other indexPathForItem:inSection:)]
        pub unsafe fn indexPathForItem_inSection(
            item: NSInteger,
            section: NSInteger,
        ) -> Id<Foundation::NSIndexPath, Shared>;

        #[method(item)]
        pub unsafe fn item(&self) -> NSInteger;

        #[method(section)]
        pub unsafe fn section(&self) -> NSInteger;
    }
);

extern_methods!(
    /// NSCollectionViewAdditions
    #[cfg(feature = "Foundation_NSSet")]
    unsafe impl Foundation::NSSet {
        #[cfg(feature = "Foundation_NSIndexPath")]
        #[method_id(@__retain_semantics Other setWithCollectionViewIndexPath:)]
        pub unsafe fn setWithCollectionViewIndexPath(
            indexPath: &Foundation::NSIndexPath,
        ) -> Id<Self, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSIndexPath"))]
        #[method_id(@__retain_semantics Other setWithCollectionViewIndexPaths:)]
        pub unsafe fn setWithCollectionViewIndexPaths(
            indexPaths: &Foundation::NSArray<Foundation::NSIndexPath>,
        ) -> Id<Self, Shared>;

        #[cfg(feature = "Foundation_NSIndexPath")]
        #[method(enumerateIndexPathsWithOptions:usingBlock:)]
        pub unsafe fn enumerateIndexPathsWithOptions_usingBlock(
            &self,
            opts: NSEnumerationOptions,
            block: &Block<(NonNull<Foundation::NSIndexPath>, NonNull<Bool>), ()>,
        );
    }
);

extern_methods!(
    /// NSDeprecated
    #[cfg(feature = "AppKit_NSCollectionView")]
    unsafe impl NSCollectionView {
        #[cfg(feature = "AppKit_NSCollectionViewItem")]
        #[method_id(@__retain_semantics New newItemForRepresentedObject:)]
        pub unsafe fn newItemForRepresentedObject(
            &self,
            object: &Object,
        ) -> Id<AppKit::NSCollectionViewItem, Shared>;

        #[cfg(feature = "AppKit_NSCollectionViewItem")]
        #[method_id(@__retain_semantics Other itemPrototype)]
        pub unsafe fn itemPrototype(&self) -> Option<Id<AppKit::NSCollectionViewItem, Shared>>;

        #[cfg(feature = "AppKit_NSCollectionViewItem")]
        #[method(setItemPrototype:)]
        pub unsafe fn setItemPrototype(&self, itemPrototype: Option<&AppKit::NSCollectionViewItem>);

        #[method(maxNumberOfRows)]
        pub unsafe fn maxNumberOfRows(&self) -> NSUInteger;

        #[method(setMaxNumberOfRows:)]
        pub unsafe fn setMaxNumberOfRows(&self, maxNumberOfRows: NSUInteger);

        #[method(maxNumberOfColumns)]
        pub unsafe fn maxNumberOfColumns(&self) -> NSUInteger;

        #[method(setMaxNumberOfColumns:)]
        pub unsafe fn setMaxNumberOfColumns(&self, maxNumberOfColumns: NSUInteger);

        #[method(minItemSize)]
        pub unsafe fn minItemSize(&self) -> NSSize;

        #[method(setMinItemSize:)]
        pub unsafe fn setMinItemSize(&self, minItemSize: NSSize);

        #[method(maxItemSize)]
        pub unsafe fn maxItemSize(&self) -> NSSize;

        #[method(setMaxItemSize:)]
        pub unsafe fn setMaxItemSize(&self, maxItemSize: NSSize);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSViewController`
    #[cfg(feature = "AppKit_NSCollectionViewItem")]
    unsafe impl AppKit::NSCollectionViewItem {
        #[cfg(all(feature = "AppKit_NSNibName", feature = "Foundation_NSBundle"))]
        #[method_id(@__retain_semantics Init initWithNibName:bundle:)]
        pub unsafe fn initWithNibName_bundle(
            this: Option<Allocated<Self>>,
            nibNameOrNil: Option<&AppKit::NSNibName>,
            nibBundleOrNil: Option<&Foundation::NSBundle>,
        ) -> Id<Self, Shared>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSView`
    #[cfg(feature = "AppKit_NSCollectionView")]
    unsafe impl AppKit::NSCollectionView {
        #[method_id(@__retain_semantics Init initWithFrame:)]
        pub unsafe fn initWithFrame(
            this: Option<Allocated<Self>>,
            frameRect: NSRect,
        ) -> Id<Self, Shared>;
    }
);
