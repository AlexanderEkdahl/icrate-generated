//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit;
use crate::CoreData;
use crate::Foundation;

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSSelectionGranularity {
        NSSelectByCharacter = 0,
        NSSelectByWord = 1,
        NSSelectByParagraph = 2,
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSSelectionAffinity {
        NSSelectionAffinityUpstream = 0,
        NSSelectionAffinityDownstream = 1,
    }
);

extern_static!(NSAllRomanInputSourcesLocaleIdentifier: &'static Foundation::NSString);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSTextView;

    unsafe impl ClassType for NSTextView {
        #[inherits(AppKit::NSView, AppKit::NSResponder, NSObject)]
        type Super = AppKit::NSText;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSTextView")]
    unsafe impl NSTextView {
        #[cfg(feature = "AppKit_NSTextContainer")]
        #[method_id(@__retain_semantics Init initWithFrame:textContainer:)]
        pub unsafe fn initWithFrame_textContainer(
            this: Option<Allocated<Self>>,
            frameRect: Foundation::NSRect,
            container: Option<&AppKit::NSTextContainer>,
        ) -> Id<Self, Shared>;

        #[cfg(feature = "Foundation_NSCoder")]
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Option<Allocated<Self>>,
            coder: &Foundation::NSCoder,
        ) -> Option<Id<Self, Shared>>;

        #[method_id(@__retain_semantics Init initWithFrame:)]
        pub unsafe fn initWithFrame(
            this: Option<Allocated<Self>>,
            frameRect: Foundation::NSRect,
        ) -> Id<Self, Shared>;

        #[cfg(feature = "AppKit_NSTextContainer")]
        #[method_id(@__retain_semantics Other textContainer)]
        pub unsafe fn textContainer(&self) -> Option<Id<AppKit::NSTextContainer, Shared>>;

        #[cfg(feature = "AppKit_NSTextContainer")]
        #[method(setTextContainer:)]
        pub unsafe fn setTextContainer(&self, textContainer: Option<&AppKit::NSTextContainer>);

        #[cfg(feature = "AppKit_NSTextContainer")]
        #[method(replaceTextContainer:)]
        pub unsafe fn replaceTextContainer(&self, newContainer: &AppKit::NSTextContainer);

        #[method(textContainerInset)]
        pub unsafe fn textContainerInset(&self) -> Foundation::NSSize;

        #[method(setTextContainerInset:)]
        pub unsafe fn setTextContainerInset(&self, textContainerInset: Foundation::NSSize);

        #[method(textContainerOrigin)]
        pub unsafe fn textContainerOrigin(&self) -> Foundation::NSPoint;

        #[method(invalidateTextContainerOrigin)]
        pub unsafe fn invalidateTextContainerOrigin(&self);

        #[cfg(feature = "AppKit_NSLayoutManager")]
        #[method_id(@__retain_semantics Other layoutManager)]
        pub unsafe fn layoutManager(&self) -> Option<Id<AppKit::NSLayoutManager, Shared>>;

        #[cfg(feature = "AppKit_NSTextStorage")]
        #[method_id(@__retain_semantics Other textStorage)]
        pub unsafe fn textStorage(&self) -> Option<Id<AppKit::NSTextStorage, Shared>>;

        #[cfg(feature = "AppKit_NSTextLayoutManager")]
        #[method_id(@__retain_semantics Other textLayoutManager)]
        pub unsafe fn textLayoutManager(&self) -> Option<Id<AppKit::NSTextLayoutManager, Shared>>;

        #[cfg(feature = "AppKit_NSTextContentStorage")]
        #[method_id(@__retain_semantics Other textContentStorage)]
        pub unsafe fn textContentStorage(&self)
            -> Option<Id<AppKit::NSTextContentStorage, Shared>>;

        #[method(insertText:)]
        pub unsafe fn insertText(&self, insertString: &Object);

        #[method(setConstrainedFrameSize:)]
        pub unsafe fn setConstrainedFrameSize(&self, desiredSize: Foundation::NSSize);

        #[method(setAlignment:range:)]
        pub unsafe fn setAlignment_range(
            &self,
            alignment: AppKit::NSTextAlignment,
            range: Foundation::NSRange,
        );

        #[method(setBaseWritingDirection:range:)]
        pub unsafe fn setBaseWritingDirection_range(
            &self,
            writingDirection: AppKit::NSWritingDirection,
            range: Foundation::NSRange,
        );

        #[method(turnOffKerning:)]
        pub unsafe fn turnOffKerning(&self, sender: Option<&Object>);

        #[method(tightenKerning:)]
        pub unsafe fn tightenKerning(&self, sender: Option<&Object>);

        #[method(loosenKerning:)]
        pub unsafe fn loosenKerning(&self, sender: Option<&Object>);

        #[method(useStandardKerning:)]
        pub unsafe fn useStandardKerning(&self, sender: Option<&Object>);

        #[method(turnOffLigatures:)]
        pub unsafe fn turnOffLigatures(&self, sender: Option<&Object>);

        #[method(useStandardLigatures:)]
        pub unsafe fn useStandardLigatures(&self, sender: Option<&Object>);

        #[method(useAllLigatures:)]
        pub unsafe fn useAllLigatures(&self, sender: Option<&Object>);

        #[method(raiseBaseline:)]
        pub unsafe fn raiseBaseline(&self, sender: Option<&Object>);

        #[method(lowerBaseline:)]
        pub unsafe fn lowerBaseline(&self, sender: Option<&Object>);

        #[method(toggleTraditionalCharacterShape:)]
        pub unsafe fn toggleTraditionalCharacterShape(&self, sender: Option<&Object>);

        #[method(outline:)]
        pub unsafe fn outline(&self, sender: Option<&Object>);

        #[method(performFindPanelAction:)]
        pub unsafe fn performFindPanelAction(&self, sender: Option<&Object>);

        #[method(alignJustified:)]
        pub unsafe fn alignJustified(&self, sender: Option<&Object>);

        #[method(changeColor:)]
        pub unsafe fn changeColor(&self, sender: Option<&Object>);

        #[method(changeAttributes:)]
        pub unsafe fn changeAttributes(&self, sender: Option<&Object>);

        #[method(changeDocumentBackgroundColor:)]
        pub unsafe fn changeDocumentBackgroundColor(&self, sender: Option<&Object>);

        #[method(orderFrontSpacingPanel:)]
        pub unsafe fn orderFrontSpacingPanel(&self, sender: Option<&Object>);

        #[method(orderFrontLinkPanel:)]
        pub unsafe fn orderFrontLinkPanel(&self, sender: Option<&Object>);

        #[method(orderFrontListPanel:)]
        pub unsafe fn orderFrontListPanel(&self, sender: Option<&Object>);

        #[method(orderFrontTablePanel:)]
        pub unsafe fn orderFrontTablePanel(&self, sender: Option<&Object>);

        #[cfg(all(feature = "AppKit_NSRulerMarker", feature = "AppKit_NSRulerView"))]
        #[method(rulerView:didMoveMarker:)]
        pub unsafe fn rulerView_didMoveMarker(
            &self,
            ruler: &AppKit::NSRulerView,
            marker: &AppKit::NSRulerMarker,
        );

        #[cfg(all(feature = "AppKit_NSRulerMarker", feature = "AppKit_NSRulerView"))]
        #[method(rulerView:didRemoveMarker:)]
        pub unsafe fn rulerView_didRemoveMarker(
            &self,
            ruler: &AppKit::NSRulerView,
            marker: &AppKit::NSRulerMarker,
        );

        #[cfg(all(feature = "AppKit_NSRulerMarker", feature = "AppKit_NSRulerView"))]
        #[method(rulerView:didAddMarker:)]
        pub unsafe fn rulerView_didAddMarker(
            &self,
            ruler: &AppKit::NSRulerView,
            marker: &AppKit::NSRulerMarker,
        );

        #[cfg(all(feature = "AppKit_NSRulerMarker", feature = "AppKit_NSRulerView"))]
        #[method(rulerView:shouldMoveMarker:)]
        pub unsafe fn rulerView_shouldMoveMarker(
            &self,
            ruler: &AppKit::NSRulerView,
            marker: &AppKit::NSRulerMarker,
        ) -> bool;

        #[cfg(all(feature = "AppKit_NSRulerMarker", feature = "AppKit_NSRulerView"))]
        #[method(rulerView:shouldAddMarker:)]
        pub unsafe fn rulerView_shouldAddMarker(
            &self,
            ruler: &AppKit::NSRulerView,
            marker: &AppKit::NSRulerMarker,
        ) -> bool;

        #[cfg(all(feature = "AppKit_NSRulerMarker", feature = "AppKit_NSRulerView"))]
        #[method(rulerView:willMoveMarker:toLocation:)]
        pub unsafe fn rulerView_willMoveMarker_toLocation(
            &self,
            ruler: &AppKit::NSRulerView,
            marker: &AppKit::NSRulerMarker,
            location: Foundation::CGFloat,
        ) -> Foundation::CGFloat;

        #[cfg(all(feature = "AppKit_NSRulerMarker", feature = "AppKit_NSRulerView"))]
        #[method(rulerView:shouldRemoveMarker:)]
        pub unsafe fn rulerView_shouldRemoveMarker(
            &self,
            ruler: &AppKit::NSRulerView,
            marker: &AppKit::NSRulerMarker,
        ) -> bool;

        #[cfg(all(feature = "AppKit_NSRulerMarker", feature = "AppKit_NSRulerView"))]
        #[method(rulerView:willAddMarker:atLocation:)]
        pub unsafe fn rulerView_willAddMarker_atLocation(
            &self,
            ruler: &AppKit::NSRulerView,
            marker: &AppKit::NSRulerMarker,
            location: Foundation::CGFloat,
        ) -> Foundation::CGFloat;

        #[cfg(all(feature = "AppKit_NSEvent", feature = "AppKit_NSRulerView"))]
        #[method(rulerView:handleMouseDown:)]
        pub unsafe fn rulerView_handleMouseDown(
            &self,
            ruler: &AppKit::NSRulerView,
            event: &AppKit::NSEvent,
        );

        #[method(setNeedsDisplayInRect:avoidAdditionalLayout:)]
        pub unsafe fn setNeedsDisplayInRect_avoidAdditionalLayout(
            &self,
            rect: Foundation::NSRect,
            flag: bool,
        );

        #[method(shouldDrawInsertionPoint)]
        pub unsafe fn shouldDrawInsertionPoint(&self) -> bool;

        #[cfg(feature = "AppKit_NSColor")]
        #[method(drawInsertionPointInRect:color:turnedOn:)]
        pub unsafe fn drawInsertionPointInRect_color_turnedOn(
            &self,
            rect: Foundation::NSRect,
            color: &AppKit::NSColor,
            flag: bool,
        );

        #[method(drawViewBackgroundInRect:)]
        pub unsafe fn drawViewBackgroundInRect(&self, rect: Foundation::NSRect);

        #[method(updateRuler)]
        pub unsafe fn updateRuler(&self);

        #[method(updateFontPanel)]
        pub unsafe fn updateFontPanel(&self);

        #[method(updateDragTypeRegistration)]
        pub unsafe fn updateDragTypeRegistration(&self);

        #[method(selectionRangeForProposedRange:granularity:)]
        pub unsafe fn selectionRangeForProposedRange_granularity(
            &self,
            proposedCharRange: Foundation::NSRange,
            granularity: AppKit::NSSelectionGranularity,
        ) -> Foundation::NSRange;

        #[method(clickedOnLink:atIndex:)]
        pub unsafe fn clickedOnLink_atIndex(&self, link: &Object, charIndex: NSUInteger);

        #[method(startSpeaking:)]
        pub unsafe fn startSpeaking(&self, sender: Option<&Object>);

        #[method(stopSpeaking:)]
        pub unsafe fn stopSpeaking(&self, sender: Option<&Object>);

        #[method(setLayoutOrientation:)]
        pub unsafe fn setLayoutOrientation(&self, orientation: AppKit::NSTextLayoutOrientation);

        #[method(changeLayoutOrientation:)]
        pub unsafe fn changeLayoutOrientation(&self, sender: Option<&Object>);

        #[method(characterIndexForInsertionAtPoint:)]
        pub unsafe fn characterIndexForInsertionAtPoint(
            &self,
            point: Foundation::NSPoint,
        ) -> NSUInteger;

        #[method(stronglyReferencesTextStorage)]
        pub unsafe fn stronglyReferencesTextStorage() -> bool;

        #[cfg(feature = "Foundation_NSAttributedString")]
        #[method(performValidatedReplacementInRange:withAttributedString:)]
        pub unsafe fn performValidatedReplacementInRange_withAttributedString(
            &self,
            range: Foundation::NSRange,
            attributedString: &Foundation::NSAttributedString,
        ) -> bool;

        #[method(usesAdaptiveColorMappingForDarkAppearance)]
        pub unsafe fn usesAdaptiveColorMappingForDarkAppearance(&self) -> bool;

        #[method(setUsesAdaptiveColorMappingForDarkAppearance:)]
        pub unsafe fn setUsesAdaptiveColorMappingForDarkAppearance(
            &self,
            usesAdaptiveColorMappingForDarkAppearance: bool,
        );
    }
);

extern_methods!(
    /// NSCompletion
    #[cfg(feature = "AppKit_NSTextView")]
    unsafe impl NSTextView {
        #[method(complete:)]
        pub unsafe fn complete(&self, sender: Option<&Object>);

        #[method(rangeForUserCompletion)]
        pub unsafe fn rangeForUserCompletion(&self) -> Foundation::NSRange;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other completionsForPartialWordRange:indexOfSelectedItem:)]
        pub unsafe fn completionsForPartialWordRange_indexOfSelectedItem(
            &self,
            charRange: Foundation::NSRange,
            index: NonNull<NSInteger>,
        ) -> Option<Id<Foundation::NSArray<Foundation::NSString>, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(insertCompletion:forPartialWordRange:movement:isFinal:)]
        pub unsafe fn insertCompletion_forPartialWordRange_movement_isFinal(
            &self,
            word: &Foundation::NSString,
            charRange: Foundation::NSRange,
            movement: NSInteger,
            flag: bool,
        );
    }
);

extern_methods!(
    /// NSPasteboard
    #[cfg(feature = "AppKit_NSTextView")]
    unsafe impl NSTextView {
        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other writablePasteboardTypes)]
        pub unsafe fn writablePasteboardTypes(
            &self,
        ) -> Id<Foundation::NSArray<AppKit::NSPasteboardType>, Shared>;

        #[cfg(feature = "AppKit_NSPasteboard")]
        #[method(writeSelectionToPasteboard:type:)]
        pub unsafe fn writeSelectionToPasteboard_type(
            &self,
            pboard: &AppKit::NSPasteboard,
            type_: &AppKit::NSPasteboardType,
        ) -> bool;

        #[cfg(all(feature = "AppKit_NSPasteboard", feature = "Foundation_NSArray"))]
        #[method(writeSelectionToPasteboard:types:)]
        pub unsafe fn writeSelectionToPasteboard_types(
            &self,
            pboard: &AppKit::NSPasteboard,
            types: &Foundation::NSArray<AppKit::NSPasteboardType>,
        ) -> bool;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other readablePasteboardTypes)]
        pub unsafe fn readablePasteboardTypes(
            &self,
        ) -> Id<Foundation::NSArray<AppKit::NSPasteboardType>, Shared>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other preferredPasteboardTypeFromArray:restrictedToTypesFromArray:)]
        pub unsafe fn preferredPasteboardTypeFromArray_restrictedToTypesFromArray(
            &self,
            availableTypes: &Foundation::NSArray<AppKit::NSPasteboardType>,
            allowedTypes: Option<&Foundation::NSArray<AppKit::NSPasteboardType>>,
        ) -> Option<Id<AppKit::NSPasteboardType, Shared>>;

        #[cfg(feature = "AppKit_NSPasteboard")]
        #[method(readSelectionFromPasteboard:type:)]
        pub unsafe fn readSelectionFromPasteboard_type(
            &self,
            pboard: &AppKit::NSPasteboard,
            type_: &AppKit::NSPasteboardType,
        ) -> bool;

        #[cfg(feature = "AppKit_NSPasteboard")]
        #[method(readSelectionFromPasteboard:)]
        pub unsafe fn readSelectionFromPasteboard(&self, pboard: &AppKit::NSPasteboard) -> bool;

        #[method(registerForServices)]
        pub unsafe fn registerForServices();

        #[method_id(@__retain_semantics Other validRequestorForSendType:returnType:)]
        pub unsafe fn validRequestorForSendType_returnType(
            &self,
            sendType: Option<&AppKit::NSPasteboardType>,
            returnType: Option<&AppKit::NSPasteboardType>,
        ) -> Option<Id<Object, Shared>>;

        #[method(pasteAsPlainText:)]
        pub unsafe fn pasteAsPlainText(&self, sender: Option<&Object>);

        #[method(pasteAsRichText:)]
        pub unsafe fn pasteAsRichText(&self, sender: Option<&Object>);
    }
);

extern_methods!(
    /// NSDragging
    #[cfg(feature = "AppKit_NSTextView")]
    unsafe impl NSTextView {
        #[cfg(feature = "AppKit_NSEvent")]
        #[method(dragSelectionWithEvent:offset:slideBack:)]
        pub unsafe fn dragSelectionWithEvent_offset_slideBack(
            &self,
            event: &AppKit::NSEvent,
            mouseOffset: Foundation::NSSize,
            slideBack: bool,
        ) -> bool;

        #[cfg(all(feature = "AppKit_NSEvent", feature = "AppKit_NSImage"))]
        #[method_id(@__retain_semantics Other dragImageForSelectionWithEvent:origin:)]
        pub unsafe fn dragImageForSelectionWithEvent_origin(
            &self,
            event: &AppKit::NSEvent,
            origin: Foundation::NSPointPointer,
        ) -> Option<Id<AppKit::NSImage, Shared>>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other acceptableDragTypes)]
        pub unsafe fn acceptableDragTypes(
            &self,
        ) -> Id<Foundation::NSArray<AppKit::NSPasteboardType>, Shared>;

        #[method(dragOperationForDraggingInfo:type:)]
        pub unsafe fn dragOperationForDraggingInfo_type(
            &self,
            dragInfo: &AppKit::NSDraggingInfo,
            type_: &AppKit::NSPasteboardType,
        ) -> AppKit::NSDragOperation;

        #[method(cleanUpAfterDragOperation)]
        pub unsafe fn cleanUpAfterDragOperation(&self);
    }
);

extern_methods!(
    /// NSSharing
    #[cfg(feature = "AppKit_NSTextView")]
    unsafe impl NSTextView {
        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSValue"))]
        #[method_id(@__retain_semantics Other selectedRanges)]
        pub unsafe fn selectedRanges(&self)
            -> Id<Foundation::NSArray<Foundation::NSValue>, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSValue"))]
        #[method(setSelectedRanges:)]
        pub unsafe fn setSelectedRanges(
            &self,
            selectedRanges: &Foundation::NSArray<Foundation::NSValue>,
        );

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSValue"))]
        #[method(setSelectedRanges:affinity:stillSelecting:)]
        pub unsafe fn setSelectedRanges_affinity_stillSelecting(
            &self,
            ranges: &Foundation::NSArray<Foundation::NSValue>,
            affinity: AppKit::NSSelectionAffinity,
            stillSelectingFlag: bool,
        );

        #[method(setSelectedRange:affinity:stillSelecting:)]
        pub unsafe fn setSelectedRange_affinity_stillSelecting(
            &self,
            charRange: Foundation::NSRange,
            affinity: AppKit::NSSelectionAffinity,
            stillSelectingFlag: bool,
        );

        #[method(selectionAffinity)]
        pub unsafe fn selectionAffinity(&self) -> AppKit::NSSelectionAffinity;

        #[method(selectionGranularity)]
        pub unsafe fn selectionGranularity(&self) -> AppKit::NSSelectionGranularity;

        #[method(setSelectionGranularity:)]
        pub unsafe fn setSelectionGranularity(
            &self,
            selectionGranularity: AppKit::NSSelectionGranularity,
        );

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method_id(@__retain_semantics Other selectedTextAttributes)]
        pub unsafe fn selectedTextAttributes(
            &self,
        ) -> Id<Foundation::NSDictionary<Foundation::NSAttributedStringKey, Object>, Shared>;

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method(setSelectedTextAttributes:)]
        pub unsafe fn setSelectedTextAttributes(
            &self,
            selectedTextAttributes: &Foundation::NSDictionary<
                Foundation::NSAttributedStringKey,
                Object,
            >,
        );

        #[cfg(feature = "AppKit_NSColor")]
        #[method_id(@__retain_semantics Other insertionPointColor)]
        pub unsafe fn insertionPointColor(&self) -> Id<AppKit::NSColor, Shared>;

        #[cfg(feature = "AppKit_NSColor")]
        #[method(setInsertionPointColor:)]
        pub unsafe fn setInsertionPointColor(&self, insertionPointColor: &AppKit::NSColor);

        #[method(updateInsertionPointStateAndRestartTimer:)]
        pub unsafe fn updateInsertionPointStateAndRestartTimer(&self, restartFlag: bool);

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method_id(@__retain_semantics Other markedTextAttributes)]
        pub unsafe fn markedTextAttributes(
            &self,
        ) -> Option<Id<Foundation::NSDictionary<Foundation::NSAttributedStringKey, Object>, Shared>>;

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method(setMarkedTextAttributes:)]
        pub unsafe fn setMarkedTextAttributes(
            &self,
            markedTextAttributes: Option<
                &Foundation::NSDictionary<Foundation::NSAttributedStringKey, Object>,
            >,
        );

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method_id(@__retain_semantics Other linkTextAttributes)]
        pub unsafe fn linkTextAttributes(
            &self,
        ) -> Option<Id<Foundation::NSDictionary<Foundation::NSAttributedStringKey, Object>, Shared>>;

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method(setLinkTextAttributes:)]
        pub unsafe fn setLinkTextAttributes(
            &self,
            linkTextAttributes: Option<
                &Foundation::NSDictionary<Foundation::NSAttributedStringKey, Object>,
            >,
        );

        #[method(displaysLinkToolTips)]
        pub unsafe fn displaysLinkToolTips(&self) -> bool;

        #[method(setDisplaysLinkToolTips:)]
        pub unsafe fn setDisplaysLinkToolTips(&self, displaysLinkToolTips: bool);

        #[method(acceptsGlyphInfo)]
        pub unsafe fn acceptsGlyphInfo(&self) -> bool;

        #[method(setAcceptsGlyphInfo:)]
        pub unsafe fn setAcceptsGlyphInfo(&self, acceptsGlyphInfo: bool);

        #[method(usesRuler)]
        pub unsafe fn usesRuler(&self) -> bool;

        #[method(setUsesRuler:)]
        pub unsafe fn setUsesRuler(&self, usesRuler: bool);

        #[method(usesInspectorBar)]
        pub unsafe fn usesInspectorBar(&self) -> bool;

        #[method(setUsesInspectorBar:)]
        pub unsafe fn setUsesInspectorBar(&self, usesInspectorBar: bool);

        #[method(isContinuousSpellCheckingEnabled)]
        pub unsafe fn isContinuousSpellCheckingEnabled(&self) -> bool;

        #[method(setContinuousSpellCheckingEnabled:)]
        pub unsafe fn setContinuousSpellCheckingEnabled(
            &self,
            continuousSpellCheckingEnabled: bool,
        );

        #[method(toggleContinuousSpellChecking:)]
        pub unsafe fn toggleContinuousSpellChecking(&self, sender: Option<&Object>);

        #[method(spellCheckerDocumentTag)]
        pub unsafe fn spellCheckerDocumentTag(&self) -> NSInteger;

        #[method(isGrammarCheckingEnabled)]
        pub unsafe fn isGrammarCheckingEnabled(&self) -> bool;

        #[method(setGrammarCheckingEnabled:)]
        pub unsafe fn setGrammarCheckingEnabled(&self, grammarCheckingEnabled: bool);

        #[method(toggleGrammarChecking:)]
        pub unsafe fn toggleGrammarChecking(&self, sender: Option<&Object>);

        #[method(setSpellingState:range:)]
        pub unsafe fn setSpellingState_range(
            &self,
            value: NSInteger,
            charRange: Foundation::NSRange,
        );

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method_id(@__retain_semantics Other typingAttributes)]
        pub unsafe fn typingAttributes(
            &self,
        ) -> Id<Foundation::NSDictionary<Foundation::NSAttributedStringKey, Object>, Shared>;

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method(setTypingAttributes:)]
        pub unsafe fn setTypingAttributes(
            &self,
            typingAttributes: &Foundation::NSDictionary<Foundation::NSAttributedStringKey, Object>,
        );

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSString",
            feature = "Foundation_NSValue"
        ))]
        #[method(shouldChangeTextInRanges:replacementStrings:)]
        pub unsafe fn shouldChangeTextInRanges_replacementStrings(
            &self,
            affectedRanges: &Foundation::NSArray<Foundation::NSValue>,
            replacementStrings: Option<&Foundation::NSArray<Foundation::NSString>>,
        ) -> bool;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSValue"))]
        #[method_id(@__retain_semantics Other rangesForUserTextChange)]
        pub unsafe fn rangesForUserTextChange(
            &self,
        ) -> Option<Id<Foundation::NSArray<Foundation::NSValue>, Shared>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSValue"))]
        #[method_id(@__retain_semantics Other rangesForUserCharacterAttributeChange)]
        pub unsafe fn rangesForUserCharacterAttributeChange(
            &self,
        ) -> Option<Id<Foundation::NSArray<Foundation::NSValue>, Shared>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSValue"))]
        #[method_id(@__retain_semantics Other rangesForUserParagraphAttributeChange)]
        pub unsafe fn rangesForUserParagraphAttributeChange(
            &self,
        ) -> Option<Id<Foundation::NSArray<Foundation::NSValue>, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(shouldChangeTextInRange:replacementString:)]
        pub unsafe fn shouldChangeTextInRange_replacementString(
            &self,
            affectedCharRange: Foundation::NSRange,
            replacementString: Option<&Foundation::NSString>,
        ) -> bool;

        #[method(didChangeText)]
        pub unsafe fn didChangeText(&self);

        #[method(rangeForUserTextChange)]
        pub unsafe fn rangeForUserTextChange(&self) -> Foundation::NSRange;

        #[method(rangeForUserCharacterAttributeChange)]
        pub unsafe fn rangeForUserCharacterAttributeChange(&self) -> Foundation::NSRange;

        #[method(rangeForUserParagraphAttributeChange)]
        pub unsafe fn rangeForUserParagraphAttributeChange(&self) -> Foundation::NSRange;

        #[method(allowsDocumentBackgroundColorChange)]
        pub unsafe fn allowsDocumentBackgroundColorChange(&self) -> bool;

        #[method(setAllowsDocumentBackgroundColorChange:)]
        pub unsafe fn setAllowsDocumentBackgroundColorChange(
            &self,
            allowsDocumentBackgroundColorChange: bool,
        );

        #[cfg(feature = "AppKit_NSParagraphStyle")]
        #[method_id(@__retain_semantics Other defaultParagraphStyle)]
        pub unsafe fn defaultParagraphStyle(&self) -> Option<Id<AppKit::NSParagraphStyle, Shared>>;

        #[cfg(feature = "AppKit_NSParagraphStyle")]
        #[method(setDefaultParagraphStyle:)]
        pub unsafe fn setDefaultParagraphStyle(
            &self,
            defaultParagraphStyle: Option<&AppKit::NSParagraphStyle>,
        );

        #[method(allowsUndo)]
        pub unsafe fn allowsUndo(&self) -> bool;

        #[method(setAllowsUndo:)]
        pub unsafe fn setAllowsUndo(&self, allowsUndo: bool);

        #[method(breakUndoCoalescing)]
        pub unsafe fn breakUndoCoalescing(&self);

        #[method(isCoalescingUndo)]
        pub unsafe fn isCoalescingUndo(&self) -> bool;

        #[method(allowsImageEditing)]
        pub unsafe fn allowsImageEditing(&self) -> bool;

        #[method(setAllowsImageEditing:)]
        pub unsafe fn setAllowsImageEditing(&self, allowsImageEditing: bool);

        #[method(showFindIndicatorForRange:)]
        pub unsafe fn showFindIndicatorForRange(&self, charRange: Foundation::NSRange);

        #[method(usesRolloverButtonForSelection)]
        pub unsafe fn usesRolloverButtonForSelection(&self) -> bool;

        #[method(setUsesRolloverButtonForSelection:)]
        pub unsafe fn setUsesRolloverButtonForSelection(
            &self,
            usesRolloverButtonForSelection: bool,
        );

        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(&self) -> Option<Id<AppKit::NSTextViewDelegate, Shared>>;

        #[method(setDelegate:)]
        pub unsafe fn setDelegate(&self, delegate: Option<&AppKit::NSTextViewDelegate>);

        #[method(isEditable)]
        pub unsafe fn isEditable(&self) -> bool;

        #[method(setEditable:)]
        pub unsafe fn setEditable(&self, editable: bool);

        #[method(isSelectable)]
        pub unsafe fn isSelectable(&self) -> bool;

        #[method(setSelectable:)]
        pub unsafe fn setSelectable(&self, selectable: bool);

        #[method(isRichText)]
        pub unsafe fn isRichText(&self) -> bool;

        #[method(setRichText:)]
        pub unsafe fn setRichText(&self, richText: bool);

        #[method(importsGraphics)]
        pub unsafe fn importsGraphics(&self) -> bool;

        #[method(setImportsGraphics:)]
        pub unsafe fn setImportsGraphics(&self, importsGraphics: bool);

        #[method(drawsBackground)]
        pub unsafe fn drawsBackground(&self) -> bool;

        #[method(setDrawsBackground:)]
        pub unsafe fn setDrawsBackground(&self, drawsBackground: bool);

        #[cfg(feature = "AppKit_NSColor")]
        #[method_id(@__retain_semantics Other backgroundColor)]
        pub unsafe fn backgroundColor(&self) -> Id<AppKit::NSColor, Shared>;

        #[cfg(feature = "AppKit_NSColor")]
        #[method(setBackgroundColor:)]
        pub unsafe fn setBackgroundColor(&self, backgroundColor: &AppKit::NSColor);

        #[method(isFieldEditor)]
        pub unsafe fn isFieldEditor(&self) -> bool;

        #[method(setFieldEditor:)]
        pub unsafe fn setFieldEditor(&self, fieldEditor: bool);

        #[method(usesFontPanel)]
        pub unsafe fn usesFontPanel(&self) -> bool;

        #[method(setUsesFontPanel:)]
        pub unsafe fn setUsesFontPanel(&self, usesFontPanel: bool);

        #[method(isRulerVisible)]
        pub unsafe fn isRulerVisible(&self) -> bool;

        #[method(setRulerVisible:)]
        pub unsafe fn setRulerVisible(&self, rulerVisible: bool);

        #[method(setSelectedRange:)]
        pub unsafe fn setSelectedRange(&self, charRange: Foundation::NSRange);

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other allowedInputSourceLocales)]
        pub unsafe fn allowedInputSourceLocales(
            &self,
        ) -> Option<Id<Foundation::NSArray<Foundation::NSString>, Shared>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method(setAllowedInputSourceLocales:)]
        pub unsafe fn setAllowedInputSourceLocales(
            &self,
            allowedInputSourceLocales: Option<&Foundation::NSArray<Foundation::NSString>>,
        );
    }
);

extern_methods!(
    /// NSTextChecking
    #[cfg(feature = "AppKit_NSTextView")]
    unsafe impl NSTextView {
        #[method(smartInsertDeleteEnabled)]
        pub unsafe fn smartInsertDeleteEnabled(&self) -> bool;

        #[method(setSmartInsertDeleteEnabled:)]
        pub unsafe fn setSmartInsertDeleteEnabled(&self, smartInsertDeleteEnabled: bool);

        #[method(smartDeleteRangeForProposedRange:)]
        pub unsafe fn smartDeleteRangeForProposedRange(
            &self,
            proposedCharRange: Foundation::NSRange,
        ) -> Foundation::NSRange;

        #[method(toggleSmartInsertDelete:)]
        pub unsafe fn toggleSmartInsertDelete(&self, sender: Option<&Object>);

        #[cfg(feature = "Foundation_NSString")]
        #[method(smartInsertForString:replacingRange:beforeString:afterString:)]
        pub unsafe fn smartInsertForString_replacingRange_beforeString_afterString(
            &self,
            pasteString: &Foundation::NSString,
            charRangeToReplace: Foundation::NSRange,
            beforeString: *mut *mut Foundation::NSString,
            afterString: *mut *mut Foundation::NSString,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other smartInsertBeforeStringForString:replacingRange:)]
        pub unsafe fn smartInsertBeforeStringForString_replacingRange(
            &self,
            pasteString: &Foundation::NSString,
            charRangeToReplace: Foundation::NSRange,
        ) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other smartInsertAfterStringForString:replacingRange:)]
        pub unsafe fn smartInsertAfterStringForString_replacingRange(
            &self,
            pasteString: &Foundation::NSString,
            charRangeToReplace: Foundation::NSRange,
        ) -> Option<Id<Foundation::NSString, Shared>>;

        #[method(isAutomaticQuoteSubstitutionEnabled)]
        pub unsafe fn isAutomaticQuoteSubstitutionEnabled(&self) -> bool;

        #[method(setAutomaticQuoteSubstitutionEnabled:)]
        pub unsafe fn setAutomaticQuoteSubstitutionEnabled(
            &self,
            automaticQuoteSubstitutionEnabled: bool,
        );

        #[method(toggleAutomaticQuoteSubstitution:)]
        pub unsafe fn toggleAutomaticQuoteSubstitution(&self, sender: Option<&Object>);

        #[method(isAutomaticLinkDetectionEnabled)]
        pub unsafe fn isAutomaticLinkDetectionEnabled(&self) -> bool;

        #[method(setAutomaticLinkDetectionEnabled:)]
        pub unsafe fn setAutomaticLinkDetectionEnabled(&self, automaticLinkDetectionEnabled: bool);

        #[method(toggleAutomaticLinkDetection:)]
        pub unsafe fn toggleAutomaticLinkDetection(&self, sender: Option<&Object>);

        #[method(isAutomaticDataDetectionEnabled)]
        pub unsafe fn isAutomaticDataDetectionEnabled(&self) -> bool;

        #[method(setAutomaticDataDetectionEnabled:)]
        pub unsafe fn setAutomaticDataDetectionEnabled(&self, automaticDataDetectionEnabled: bool);

        #[method(toggleAutomaticDataDetection:)]
        pub unsafe fn toggleAutomaticDataDetection(&self, sender: Option<&Object>);

        #[method(isAutomaticDashSubstitutionEnabled)]
        pub unsafe fn isAutomaticDashSubstitutionEnabled(&self) -> bool;

        #[method(setAutomaticDashSubstitutionEnabled:)]
        pub unsafe fn setAutomaticDashSubstitutionEnabled(
            &self,
            automaticDashSubstitutionEnabled: bool,
        );

        #[method(toggleAutomaticDashSubstitution:)]
        pub unsafe fn toggleAutomaticDashSubstitution(&self, sender: Option<&Object>);

        #[method(isAutomaticTextReplacementEnabled)]
        pub unsafe fn isAutomaticTextReplacementEnabled(&self) -> bool;

        #[method(setAutomaticTextReplacementEnabled:)]
        pub unsafe fn setAutomaticTextReplacementEnabled(
            &self,
            automaticTextReplacementEnabled: bool,
        );

        #[method(toggleAutomaticTextReplacement:)]
        pub unsafe fn toggleAutomaticTextReplacement(&self, sender: Option<&Object>);

        #[method(isAutomaticSpellingCorrectionEnabled)]
        pub unsafe fn isAutomaticSpellingCorrectionEnabled(&self) -> bool;

        #[method(setAutomaticSpellingCorrectionEnabled:)]
        pub unsafe fn setAutomaticSpellingCorrectionEnabled(
            &self,
            automaticSpellingCorrectionEnabled: bool,
        );

        #[method(toggleAutomaticSpellingCorrection:)]
        pub unsafe fn toggleAutomaticSpellingCorrection(&self, sender: Option<&Object>);

        #[method(enabledTextCheckingTypes)]
        pub unsafe fn enabledTextCheckingTypes(&self) -> Foundation::NSTextCheckingTypes;

        #[method(setEnabledTextCheckingTypes:)]
        pub unsafe fn setEnabledTextCheckingTypes(
            &self,
            enabledTextCheckingTypes: Foundation::NSTextCheckingTypes,
        );

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method(checkTextInRange:types:options:)]
        pub unsafe fn checkTextInRange_types_options(
            &self,
            range: Foundation::NSRange,
            checkingTypes: Foundation::NSTextCheckingTypes,
            options: &Foundation::NSDictionary<AppKit::NSTextCheckingOptionKey, Object>,
        );

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSOrthography",
            feature = "Foundation_NSTextCheckingResult"
        ))]
        #[method(handleTextCheckingResults:forRange:types:options:orthography:wordCount:)]
        pub unsafe fn handleTextCheckingResults_forRange_types_options_orthography_wordCount(
            &self,
            results: &Foundation::NSArray<Foundation::NSTextCheckingResult>,
            range: Foundation::NSRange,
            checkingTypes: Foundation::NSTextCheckingTypes,
            options: &Foundation::NSDictionary<AppKit::NSTextCheckingOptionKey, Object>,
            orthography: &Foundation::NSOrthography,
            wordCount: NSInteger,
        );

        #[method(orderFrontSubstitutionsPanel:)]
        pub unsafe fn orderFrontSubstitutionsPanel(&self, sender: Option<&Object>);

        #[method(checkTextInSelection:)]
        pub unsafe fn checkTextInSelection(&self, sender: Option<&Object>);

        #[method(checkTextInDocument:)]
        pub unsafe fn checkTextInDocument(&self, sender: Option<&Object>);

        #[method(usesFindPanel)]
        pub unsafe fn usesFindPanel(&self) -> bool;

        #[method(setUsesFindPanel:)]
        pub unsafe fn setUsesFindPanel(&self, usesFindPanel: bool);

        #[method(usesFindBar)]
        pub unsafe fn usesFindBar(&self) -> bool;

        #[method(setUsesFindBar:)]
        pub unsafe fn setUsesFindBar(&self, usesFindBar: bool);

        #[method(isIncrementalSearchingEnabled)]
        pub unsafe fn isIncrementalSearchingEnabled(&self) -> bool;

        #[method(setIncrementalSearchingEnabled:)]
        pub unsafe fn setIncrementalSearchingEnabled(&self, incrementalSearchingEnabled: bool);
    }
);

extern_methods!(
    /// NSQuickLookPreview
    #[cfg(feature = "AppKit_NSTextView")]
    unsafe impl NSTextView {
        #[method(toggleQuickLookPreviewPanel:)]
        pub unsafe fn toggleQuickLookPreviewPanel(&self, sender: Option<&Object>);

        #[method(updateQuickLookPreviewPanel)]
        pub unsafe fn updateQuickLookPreviewPanel(&self);
    }
);

extern_methods!(
    /// NSTextView_SharingService
    #[cfg(feature = "AppKit_NSTextView")]
    unsafe impl NSTextView {
        #[method(orderFrontSharingServicePicker:)]
        pub unsafe fn orderFrontSharingServicePicker(&self, sender: Option<&Object>);
    }
);

extern_methods!(
    /// NSTextView_TouchBar
    #[cfg(feature = "AppKit_NSTextView")]
    unsafe impl NSTextView {
        #[method(isAutomaticTextCompletionEnabled)]
        pub unsafe fn isAutomaticTextCompletionEnabled(&self) -> bool;

        #[method(setAutomaticTextCompletionEnabled:)]
        pub unsafe fn setAutomaticTextCompletionEnabled(
            &self,
            automaticTextCompletionEnabled: bool,
        );

        #[method(toggleAutomaticTextCompletion:)]
        pub unsafe fn toggleAutomaticTextCompletion(&self, sender: Option<&Object>);

        #[method(allowsCharacterPickerTouchBarItem)]
        pub unsafe fn allowsCharacterPickerTouchBarItem(&self) -> bool;

        #[method(setAllowsCharacterPickerTouchBarItem:)]
        pub unsafe fn setAllowsCharacterPickerTouchBarItem(
            &self,
            allowsCharacterPickerTouchBarItem: bool,
        );

        #[method(updateTouchBarItemIdentifiers)]
        pub unsafe fn updateTouchBarItemIdentifiers(&self);

        #[method(updateTextTouchBarItems)]
        pub unsafe fn updateTextTouchBarItems(&self);

        #[method(updateCandidates)]
        pub unsafe fn updateCandidates(&self);

        #[cfg(feature = "AppKit_NSCandidateListTouchBarItem")]
        #[method_id(@__retain_semantics Other candidateListTouchBarItem)]
        pub unsafe fn candidateListTouchBarItem(
            &self,
        ) -> Option<Id<AppKit::NSCandidateListTouchBarItem, Shared>>;
    }
);

extern_methods!(
    /// NSTextView_Factory
    #[cfg(feature = "AppKit_NSTextView")]
    unsafe impl NSTextView {
        #[cfg(feature = "AppKit_NSScrollView")]
        #[method_id(@__retain_semantics Other scrollableTextView)]
        pub unsafe fn scrollableTextView() -> Id<AppKit::NSScrollView, Shared>;

        #[method_id(@__retain_semantics Other fieldEditor)]
        pub unsafe fn fieldEditor() -> Id<Self, Shared>;

        #[cfg(feature = "AppKit_NSScrollView")]
        #[method_id(@__retain_semantics Other scrollableDocumentContentTextView)]
        pub unsafe fn scrollableDocumentContentTextView() -> Id<AppKit::NSScrollView, Shared>;

        #[cfg(feature = "AppKit_NSScrollView")]
        #[method_id(@__retain_semantics Other scrollablePlainDocumentContentTextView)]
        pub unsafe fn scrollablePlainDocumentContentTextView() -> Id<AppKit::NSScrollView, Shared>;
    }
);

extern_methods!(
    /// NSDeprecated
    #[cfg(feature = "AppKit_NSTextView")]
    unsafe impl NSTextView {
        #[method(toggleBaseWritingDirection:)]
        pub unsafe fn toggleBaseWritingDirection(&self, sender: Option<&Object>);
    }
);

extern_protocol!(
    pub struct NSTextViewDelegate;

    unsafe impl ProtocolType for NSTextViewDelegate {
        #[optional]
        #[method(textView:clickedOnLink:atIndex:)]
        pub unsafe fn textView_clickedOnLink_atIndex(
            &self,
            textView: &AppKit::NSTextView,
            link: &Object,
            charIndex: NSUInteger,
        ) -> bool;

        #[optional]
        #[method(textView:clickedOnCell:inRect:atIndex:)]
        pub unsafe fn textView_clickedOnCell_inRect_atIndex(
            &self,
            textView: &AppKit::NSTextView,
            cell: &AppKit::NSTextAttachmentCell,
            cellFrame: Foundation::NSRect,
            charIndex: NSUInteger,
        );

        #[optional]
        #[method(textView:doubleClickedOnCell:inRect:atIndex:)]
        pub unsafe fn textView_doubleClickedOnCell_inRect_atIndex(
            &self,
            textView: &AppKit::NSTextView,
            cell: &AppKit::NSTextAttachmentCell,
            cellFrame: Foundation::NSRect,
            charIndex: NSUInteger,
        );

        #[optional]
        #[method(textView:draggedCell:inRect:event:atIndex:)]
        pub unsafe fn textView_draggedCell_inRect_event_atIndex(
            &self,
            view: &AppKit::NSTextView,
            cell: &AppKit::NSTextAttachmentCell,
            rect: Foundation::NSRect,
            event: &AppKit::NSEvent,
            charIndex: NSUInteger,
        );

        #[optional]
        #[method_id(@__retain_semantics Other textView:writablePasteboardTypesForCell:atIndex:)]
        pub unsafe fn textView_writablePasteboardTypesForCell_atIndex(
            &self,
            view: &AppKit::NSTextView,
            cell: &AppKit::NSTextAttachmentCell,
            charIndex: NSUInteger,
        ) -> Id<Foundation::NSArray<AppKit::NSPasteboardType>, Shared>;

        #[optional]
        #[method(textView:writeCell:atIndex:toPasteboard:type:)]
        pub unsafe fn textView_writeCell_atIndex_toPasteboard_type(
            &self,
            view: &AppKit::NSTextView,
            cell: &AppKit::NSTextAttachmentCell,
            charIndex: NSUInteger,
            pboard: &AppKit::NSPasteboard,
            type_: &AppKit::NSPasteboardType,
        ) -> bool;

        #[optional]
        #[method(textView:willChangeSelectionFromCharacterRange:toCharacterRange:)]
        pub unsafe fn textView_willChangeSelectionFromCharacterRange_toCharacterRange(
            &self,
            textView: &AppKit::NSTextView,
            oldSelectedCharRange: Foundation::NSRange,
            newSelectedCharRange: Foundation::NSRange,
        ) -> Foundation::NSRange;

        #[optional]
        #[method_id(@__retain_semantics Other textView:willChangeSelectionFromCharacterRanges:toCharacterRanges:)]
        pub unsafe fn textView_willChangeSelectionFromCharacterRanges_toCharacterRanges(
            &self,
            textView: &AppKit::NSTextView,
            oldSelectedCharRanges: &Foundation::NSArray<Foundation::NSValue>,
            newSelectedCharRanges: &Foundation::NSArray<Foundation::NSValue>,
        ) -> Id<Foundation::NSArray<Foundation::NSValue>, Shared>;

        #[optional]
        #[method(textView:shouldChangeTextInRanges:replacementStrings:)]
        pub unsafe fn textView_shouldChangeTextInRanges_replacementStrings(
            &self,
            textView: &AppKit::NSTextView,
            affectedRanges: &Foundation::NSArray<Foundation::NSValue>,
            replacementStrings: Option<&Foundation::NSArray<Foundation::NSString>>,
        ) -> bool;

        #[optional]
        #[method_id(@__retain_semantics Other textView:shouldChangeTypingAttributes:toAttributes:)]
        pub unsafe fn textView_shouldChangeTypingAttributes_toAttributes(
            &self,
            textView: &AppKit::NSTextView,
            oldTypingAttributes: &Foundation::NSDictionary<Foundation::NSString, Object>,
            newTypingAttributes: &Foundation::NSDictionary<
                Foundation::NSAttributedStringKey,
                Object,
            >,
        ) -> Id<Foundation::NSDictionary<Foundation::NSAttributedStringKey, Object>, Shared>;

        #[optional]
        #[method(textViewDidChangeSelection:)]
        pub unsafe fn textViewDidChangeSelection(&self, notification: &Foundation::NSNotification);

        #[optional]
        #[method(textViewDidChangeTypingAttributes:)]
        pub unsafe fn textViewDidChangeTypingAttributes(
            &self,
            notification: &Foundation::NSNotification,
        );

        #[optional]
        #[method_id(@__retain_semantics Other textView:willDisplayToolTip:forCharacterAtIndex:)]
        pub unsafe fn textView_willDisplayToolTip_forCharacterAtIndex(
            &self,
            textView: &AppKit::NSTextView,
            tooltip: &Foundation::NSString,
            characterIndex: NSUInteger,
        ) -> Option<Id<Foundation::NSString, Shared>>;

        #[optional]
        #[method_id(@__retain_semantics Other textView:completions:forPartialWordRange:indexOfSelectedItem:)]
        pub unsafe fn textView_completions_forPartialWordRange_indexOfSelectedItem(
            &self,
            textView: &AppKit::NSTextView,
            words: &Foundation::NSArray<Foundation::NSString>,
            charRange: Foundation::NSRange,
            index: *mut NSInteger,
        ) -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[optional]
        #[method(textView:shouldChangeTextInRange:replacementString:)]
        pub unsafe fn textView_shouldChangeTextInRange_replacementString(
            &self,
            textView: &AppKit::NSTextView,
            affectedCharRange: Foundation::NSRange,
            replacementString: Option<&Foundation::NSString>,
        ) -> bool;

        #[optional]
        #[method(textView:doCommandBySelector:)]
        pub unsafe fn textView_doCommandBySelector(
            &self,
            textView: &AppKit::NSTextView,
            commandSelector: Sel,
        ) -> bool;

        #[optional]
        #[method(textView:shouldSetSpellingState:range:)]
        pub unsafe fn textView_shouldSetSpellingState_range(
            &self,
            textView: &AppKit::NSTextView,
            value: NSInteger,
            affectedCharRange: Foundation::NSRange,
        ) -> NSInteger;

        #[optional]
        #[method_id(@__retain_semantics Other textView:menu:forEvent:atIndex:)]
        pub unsafe fn textView_menu_forEvent_atIndex(
            &self,
            view: &AppKit::NSTextView,
            menu: &AppKit::NSMenu,
            event: &AppKit::NSEvent,
            charIndex: NSUInteger,
        ) -> Option<Id<AppKit::NSMenu, Shared>>;

        #[optional]
        #[method_id(@__retain_semantics Other textView:willCheckTextInRange:options:types:)]
        pub unsafe fn textView_willCheckTextInRange_options_types(
            &self,
            view: &AppKit::NSTextView,
            range: Foundation::NSRange,
            options: &Foundation::NSDictionary<AppKit::NSTextCheckingOptionKey, Object>,
            checkingTypes: NonNull<Foundation::NSTextCheckingTypes>,
        ) -> Id<Foundation::NSDictionary<AppKit::NSTextCheckingOptionKey, Object>, Shared>;

        #[optional]
        #[method_id(@__retain_semantics Other textView:didCheckTextInRange:types:options:results:orthography:wordCount:)]
        pub unsafe fn textView_didCheckTextInRange_types_options_results_orthography_wordCount(
            &self,
            view: &AppKit::NSTextView,
            range: Foundation::NSRange,
            checkingTypes: Foundation::NSTextCheckingTypes,
            options: &Foundation::NSDictionary<AppKit::NSTextCheckingOptionKey, Object>,
            results: &Foundation::NSArray<Foundation::NSTextCheckingResult>,
            orthography: &Foundation::NSOrthography,
            wordCount: NSInteger,
        ) -> Id<Foundation::NSArray<Foundation::NSTextCheckingResult>, Shared>;

        #[optional]
        #[method_id(@__retain_semantics Other textView:URLForContentsOfTextAttachment:atIndex:)]
        pub unsafe fn textView_URLForContentsOfTextAttachment_atIndex(
            &self,
            textView: &AppKit::NSTextView,
            textAttachment: &AppKit::NSTextAttachment,
            charIndex: NSUInteger,
        ) -> Option<Id<Foundation::NSURL, Shared>>;

        #[optional]
        #[method_id(@__retain_semantics Other textView:willShowSharingServicePicker:forItems:)]
        pub unsafe fn textView_willShowSharingServicePicker_forItems(
            &self,
            textView: &AppKit::NSTextView,
            servicePicker: &AppKit::NSSharingServicePicker,
            items: &Foundation::NSArray,
        ) -> Option<Id<AppKit::NSSharingServicePicker, Shared>>;

        #[optional]
        #[method_id(@__retain_semantics Other undoManagerForTextView:)]
        pub unsafe fn undoManagerForTextView(
            &self,
            view: &AppKit::NSTextView,
        ) -> Option<Id<Foundation::NSUndoManager, Shared>>;

        #[optional]
        #[method_id(@__retain_semantics Other textView:shouldUpdateTouchBarItemIdentifiers:)]
        pub unsafe fn textView_shouldUpdateTouchBarItemIdentifiers(
            &self,
            textView: &AppKit::NSTextView,
            identifiers: &Foundation::NSArray<AppKit::NSTouchBarItemIdentifier>,
        ) -> Id<Foundation::NSArray<AppKit::NSTouchBarItemIdentifier>, Shared>;

        #[optional]
        #[method_id(@__retain_semantics Other textView:candidatesForSelectedRange:)]
        pub unsafe fn textView_candidatesForSelectedRange(
            &self,
            textView: &AppKit::NSTextView,
            selectedRange: Foundation::NSRange,
        ) -> Option<Id<Foundation::NSArray, Shared>>;

        #[optional]
        #[method_id(@__retain_semantics Other textView:candidates:forSelectedRange:)]
        pub unsafe fn textView_candidates_forSelectedRange(
            &self,
            textView: &AppKit::NSTextView,
            candidates: &Foundation::NSArray<Foundation::NSTextCheckingResult>,
            selectedRange: Foundation::NSRange,
        ) -> Id<Foundation::NSArray<Foundation::NSTextCheckingResult>, Shared>;

        #[optional]
        #[method(textView:shouldSelectCandidateAtIndex:)]
        pub unsafe fn textView_shouldSelectCandidateAtIndex(
            &self,
            textView: &AppKit::NSTextView,
            index: NSUInteger,
        ) -> bool;

        #[optional]
        #[method(textView:clickedOnLink:)]
        pub unsafe fn textView_clickedOnLink(
            &self,
            textView: &AppKit::NSTextView,
            link: Option<&Object>,
        ) -> bool;

        #[optional]
        #[method(textView:clickedOnCell:inRect:)]
        pub unsafe fn textView_clickedOnCell_inRect(
            &self,
            textView: &AppKit::NSTextView,
            cell: Option<&AppKit::NSTextAttachmentCell>,
            cellFrame: Foundation::NSRect,
        );

        #[optional]
        #[method(textView:doubleClickedOnCell:inRect:)]
        pub unsafe fn textView_doubleClickedOnCell_inRect(
            &self,
            textView: &AppKit::NSTextView,
            cell: Option<&AppKit::NSTextAttachmentCell>,
            cellFrame: Foundation::NSRect,
        );

        #[optional]
        #[method(textView:draggedCell:inRect:event:)]
        pub unsafe fn textView_draggedCell_inRect_event(
            &self,
            view: &AppKit::NSTextView,
            cell: Option<&AppKit::NSTextAttachmentCell>,
            rect: Foundation::NSRect,
            event: Option<&AppKit::NSEvent>,
        );
    }
);

extern_static!(NSTouchBarItemIdentifierCharacterPicker: &'static AppKit::NSTouchBarItemIdentifier);

extern_static!(NSTouchBarItemIdentifierTextColorPicker: &'static AppKit::NSTouchBarItemIdentifier);

extern_static!(NSTouchBarItemIdentifierTextStyle: &'static AppKit::NSTouchBarItemIdentifier);

extern_static!(NSTouchBarItemIdentifierTextAlignment: &'static AppKit::NSTouchBarItemIdentifier);

extern_static!(NSTouchBarItemIdentifierTextList: &'static AppKit::NSTouchBarItemIdentifier);

extern_static!(NSTouchBarItemIdentifierTextFormat: &'static AppKit::NSTouchBarItemIdentifier);

extern_static!(
    NSTextViewWillChangeNotifyingTextViewNotification: &'static Foundation::NSNotificationName
);

extern_static!(NSTextViewDidChangeSelectionNotification: &'static Foundation::NSNotificationName);

extern_static!(
    NSTextViewDidChangeTypingAttributesNotification: &'static Foundation::NSNotificationName
);

extern_static!(
    NSTextViewWillSwitchToNSLayoutManagerNotification: &'static Foundation::NSNotificationName
);

extern_static!(
    NSTextViewDidSwitchToNSLayoutManagerNotification: &'static Foundation::NSNotificationName
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSFindPanelAction {
        NSFindPanelActionShowFindPanel = 1,
        NSFindPanelActionNext = 2,
        NSFindPanelActionPrevious = 3,
        NSFindPanelActionReplaceAll = 4,
        NSFindPanelActionReplace = 5,
        NSFindPanelActionReplaceAndFind = 6,
        NSFindPanelActionSetFindString = 7,
        NSFindPanelActionReplaceAllInSelection = 8,
        NSFindPanelActionSelectAll = 9,
        NSFindPanelActionSelectAllInSelection = 10,
    }
);

extern_static!(NSFindPanelSearchOptionsPboardType: &'static AppKit::NSPasteboardType);

typed_enum!(
    pub type NSPasteboardTypeFindPanelSearchOptionKey = Foundation::NSString;
);

extern_static!(
    NSFindPanelCaseInsensitiveSearch: &'static AppKit::NSPasteboardTypeFindPanelSearchOptionKey
);

extern_static!(
    NSFindPanelSubstringMatch: &'static AppKit::NSPasteboardTypeFindPanelSearchOptionKey
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSFindPanelSubstringMatchType {
        NSFindPanelSubstringMatchTypeContains = 0,
        NSFindPanelSubstringMatchTypeStartsWith = 1,
        NSFindPanelSubstringMatchTypeFullWord = 2,
        NSFindPanelSubstringMatchTypeEndsWith = 3,
    }
);
