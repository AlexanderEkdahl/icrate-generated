//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit;
use crate::CoreData;
use crate::Foundation;

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSScrollElasticity {
        NSScrollElasticityAutomatic = 0,
        NSScrollElasticityNone = 1,
        NSScrollElasticityAllowed = 2,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSScrollView;

    unsafe impl ClassType for NSScrollView {
        #[inherits(AppKit::NSResponder, NSObject)]
        type Super = AppKit::NSView;
    }
);

extern_methods!(
    #[cfg(feature = "AppKit_NSScrollView")]
    unsafe impl NSScrollView {
        #[method_id(@__retain_semantics Init initWithFrame:)]
        pub unsafe fn initWithFrame(
            this: Option<Allocated<Self>>,
            frameRect: Foundation::NSRect,
        ) -> Id<Self, Shared>;

        #[cfg(feature = "Foundation_NSCoder")]
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Option<Allocated<Self>>,
            coder: &Foundation::NSCoder,
        ) -> Option<Id<Self, Shared>>;

        #[method(frameSizeForContentSize:horizontalScrollerClass:verticalScrollerClass:borderType:controlSize:scrollerStyle:)]
        pub unsafe fn frameSizeForContentSize_horizontalScrollerClass_verticalScrollerClass_borderType_controlSize_scrollerStyle(
            cSize: Foundation::NSSize,
            horizontalScrollerClass: Option<&Class>,
            verticalScrollerClass: Option<&Class>,
            type_: AppKit::NSBorderType,
            controlSize: AppKit::NSControlSize,
            scrollerStyle: AppKit::NSScrollerStyle,
        ) -> Foundation::NSSize;

        #[method(contentSizeForFrameSize:horizontalScrollerClass:verticalScrollerClass:borderType:controlSize:scrollerStyle:)]
        pub unsafe fn contentSizeForFrameSize_horizontalScrollerClass_verticalScrollerClass_borderType_controlSize_scrollerStyle(
            fSize: Foundation::NSSize,
            horizontalScrollerClass: Option<&Class>,
            verticalScrollerClass: Option<&Class>,
            type_: AppKit::NSBorderType,
            controlSize: AppKit::NSControlSize,
            scrollerStyle: AppKit::NSScrollerStyle,
        ) -> Foundation::NSSize;

        #[method(frameSizeForContentSize:hasHorizontalScroller:hasVerticalScroller:borderType:)]
        pub unsafe fn frameSizeForContentSize_hasHorizontalScroller_hasVerticalScroller_borderType(
            cSize: Foundation::NSSize,
            hFlag: bool,
            vFlag: bool,
            type_: AppKit::NSBorderType,
        ) -> Foundation::NSSize;

        #[method(contentSizeForFrameSize:hasHorizontalScroller:hasVerticalScroller:borderType:)]
        pub unsafe fn contentSizeForFrameSize_hasHorizontalScroller_hasVerticalScroller_borderType(
            fSize: Foundation::NSSize,
            hFlag: bool,
            vFlag: bool,
            type_: AppKit::NSBorderType,
        ) -> Foundation::NSSize;

        #[method(documentVisibleRect)]
        pub unsafe fn documentVisibleRect(&self) -> Foundation::NSRect;

        #[method(contentSize)]
        pub unsafe fn contentSize(&self) -> Foundation::NSSize;

        #[method_id(@__retain_semantics Other documentView)]
        pub unsafe fn documentView(&self) -> Option<Id<AppKit::NSView, Shared>>;

        #[method(setDocumentView:)]
        pub unsafe fn setDocumentView(&self, documentView: Option<&AppKit::NSView>);

        #[cfg(feature = "AppKit_NSClipView")]
        #[method_id(@__retain_semantics Other contentView)]
        pub unsafe fn contentView(&self) -> Id<AppKit::NSClipView, Shared>;

        #[cfg(feature = "AppKit_NSClipView")]
        #[method(setContentView:)]
        pub unsafe fn setContentView(&self, contentView: &AppKit::NSClipView);

        #[cfg(feature = "AppKit_NSCursor")]
        #[method_id(@__retain_semantics Other documentCursor)]
        pub unsafe fn documentCursor(&self) -> Option<Id<AppKit::NSCursor, Shared>>;

        #[cfg(feature = "AppKit_NSCursor")]
        #[method(setDocumentCursor:)]
        pub unsafe fn setDocumentCursor(&self, documentCursor: Option<&AppKit::NSCursor>);

        #[method(borderType)]
        pub unsafe fn borderType(&self) -> AppKit::NSBorderType;

        #[method(setBorderType:)]
        pub unsafe fn setBorderType(&self, borderType: AppKit::NSBorderType);

        #[cfg(feature = "AppKit_NSColor")]
        #[method_id(@__retain_semantics Other backgroundColor)]
        pub unsafe fn backgroundColor(&self) -> Id<AppKit::NSColor, Shared>;

        #[cfg(feature = "AppKit_NSColor")]
        #[method(setBackgroundColor:)]
        pub unsafe fn setBackgroundColor(&self, backgroundColor: &AppKit::NSColor);

        #[method(drawsBackground)]
        pub unsafe fn drawsBackground(&self) -> bool;

        #[method(setDrawsBackground:)]
        pub unsafe fn setDrawsBackground(&self, drawsBackground: bool);

        #[method(hasVerticalScroller)]
        pub unsafe fn hasVerticalScroller(&self) -> bool;

        #[method(setHasVerticalScroller:)]
        pub unsafe fn setHasVerticalScroller(&self, hasVerticalScroller: bool);

        #[method(hasHorizontalScroller)]
        pub unsafe fn hasHorizontalScroller(&self) -> bool;

        #[method(setHasHorizontalScroller:)]
        pub unsafe fn setHasHorizontalScroller(&self, hasHorizontalScroller: bool);

        #[cfg(feature = "AppKit_NSScroller")]
        #[method_id(@__retain_semantics Other verticalScroller)]
        pub unsafe fn verticalScroller(&self) -> Option<Id<AppKit::NSScroller, Shared>>;

        #[cfg(feature = "AppKit_NSScroller")]
        #[method(setVerticalScroller:)]
        pub unsafe fn setVerticalScroller(&self, verticalScroller: Option<&AppKit::NSScroller>);

        #[cfg(feature = "AppKit_NSScroller")]
        #[method_id(@__retain_semantics Other horizontalScroller)]
        pub unsafe fn horizontalScroller(&self) -> Option<Id<AppKit::NSScroller, Shared>>;

        #[cfg(feature = "AppKit_NSScroller")]
        #[method(setHorizontalScroller:)]
        pub unsafe fn setHorizontalScroller(&self, horizontalScroller: Option<&AppKit::NSScroller>);

        #[method(autohidesScrollers)]
        pub unsafe fn autohidesScrollers(&self) -> bool;

        #[method(setAutohidesScrollers:)]
        pub unsafe fn setAutohidesScrollers(&self, autohidesScrollers: bool);

        #[method(horizontalLineScroll)]
        pub unsafe fn horizontalLineScroll(&self) -> CoreGraphics::CGFloat;

        #[method(setHorizontalLineScroll:)]
        pub unsafe fn setHorizontalLineScroll(&self, horizontalLineScroll: CoreGraphics::CGFloat);

        #[method(verticalLineScroll)]
        pub unsafe fn verticalLineScroll(&self) -> CoreGraphics::CGFloat;

        #[method(setVerticalLineScroll:)]
        pub unsafe fn setVerticalLineScroll(&self, verticalLineScroll: CoreGraphics::CGFloat);

        #[method(lineScroll)]
        pub unsafe fn lineScroll(&self) -> CoreGraphics::CGFloat;

        #[method(setLineScroll:)]
        pub unsafe fn setLineScroll(&self, lineScroll: CoreGraphics::CGFloat);

        #[method(horizontalPageScroll)]
        pub unsafe fn horizontalPageScroll(&self) -> CoreGraphics::CGFloat;

        #[method(setHorizontalPageScroll:)]
        pub unsafe fn setHorizontalPageScroll(&self, horizontalPageScroll: CoreGraphics::CGFloat);

        #[method(verticalPageScroll)]
        pub unsafe fn verticalPageScroll(&self) -> CoreGraphics::CGFloat;

        #[method(setVerticalPageScroll:)]
        pub unsafe fn setVerticalPageScroll(&self, verticalPageScroll: CoreGraphics::CGFloat);

        #[method(pageScroll)]
        pub unsafe fn pageScroll(&self) -> CoreGraphics::CGFloat;

        #[method(setPageScroll:)]
        pub unsafe fn setPageScroll(&self, pageScroll: CoreGraphics::CGFloat);

        #[method(scrollsDynamically)]
        pub unsafe fn scrollsDynamically(&self) -> bool;

        #[method(setScrollsDynamically:)]
        pub unsafe fn setScrollsDynamically(&self, scrollsDynamically: bool);

        #[method(tile)]
        pub unsafe fn tile(&self);

        #[cfg(feature = "AppKit_NSClipView")]
        #[method(reflectScrolledClipView:)]
        pub unsafe fn reflectScrolledClipView(&self, cView: &AppKit::NSClipView);

        #[cfg(feature = "AppKit_NSEvent")]
        #[method(scrollWheel:)]
        pub unsafe fn scrollWheel(&self, event: &AppKit::NSEvent);

        #[method(scrollerStyle)]
        pub unsafe fn scrollerStyle(&self) -> AppKit::NSScrollerStyle;

        #[method(setScrollerStyle:)]
        pub unsafe fn setScrollerStyle(&self, scrollerStyle: AppKit::NSScrollerStyle);

        #[method(scrollerKnobStyle)]
        pub unsafe fn scrollerKnobStyle(&self) -> AppKit::NSScrollerKnobStyle;

        #[method(setScrollerKnobStyle:)]
        pub unsafe fn setScrollerKnobStyle(&self, scrollerKnobStyle: AppKit::NSScrollerKnobStyle);

        #[method(flashScrollers)]
        pub unsafe fn flashScrollers(&self);

        #[method(horizontalScrollElasticity)]
        pub unsafe fn horizontalScrollElasticity(&self) -> AppKit::NSScrollElasticity;

        #[method(setHorizontalScrollElasticity:)]
        pub unsafe fn setHorizontalScrollElasticity(
            &self,
            horizontalScrollElasticity: AppKit::NSScrollElasticity,
        );

        #[method(verticalScrollElasticity)]
        pub unsafe fn verticalScrollElasticity(&self) -> AppKit::NSScrollElasticity;

        #[method(setVerticalScrollElasticity:)]
        pub unsafe fn setVerticalScrollElasticity(
            &self,
            verticalScrollElasticity: AppKit::NSScrollElasticity,
        );

        #[method(usesPredominantAxisScrolling)]
        pub unsafe fn usesPredominantAxisScrolling(&self) -> bool;

        #[method(setUsesPredominantAxisScrolling:)]
        pub unsafe fn setUsesPredominantAxisScrolling(&self, usesPredominantAxisScrolling: bool);

        #[method(allowsMagnification)]
        pub unsafe fn allowsMagnification(&self) -> bool;

        #[method(setAllowsMagnification:)]
        pub unsafe fn setAllowsMagnification(&self, allowsMagnification: bool);

        #[method(magnification)]
        pub unsafe fn magnification(&self) -> CoreGraphics::CGFloat;

        #[method(setMagnification:)]
        pub unsafe fn setMagnification(&self, magnification: CoreGraphics::CGFloat);

        #[method(maxMagnification)]
        pub unsafe fn maxMagnification(&self) -> CoreGraphics::CGFloat;

        #[method(setMaxMagnification:)]
        pub unsafe fn setMaxMagnification(&self, maxMagnification: CoreGraphics::CGFloat);

        #[method(minMagnification)]
        pub unsafe fn minMagnification(&self) -> CoreGraphics::CGFloat;

        #[method(setMinMagnification:)]
        pub unsafe fn setMinMagnification(&self, minMagnification: CoreGraphics::CGFloat);

        #[method(magnifyToFitRect:)]
        pub unsafe fn magnifyToFitRect(&self, rect: Foundation::NSRect);

        #[method(setMagnification:centeredAtPoint:)]
        pub unsafe fn setMagnification_centeredAtPoint(
            &self,
            magnification: CoreGraphics::CGFloat,
            point: Foundation::NSPoint,
        );

        #[method(addFloatingSubview:forAxis:)]
        pub unsafe fn addFloatingSubview_forAxis(
            &self,
            view: &AppKit::NSView,
            axis: AppKit::NSEventGestureAxis,
        );

        #[method(automaticallyAdjustsContentInsets)]
        pub unsafe fn automaticallyAdjustsContentInsets(&self) -> bool;

        #[method(setAutomaticallyAdjustsContentInsets:)]
        pub unsafe fn setAutomaticallyAdjustsContentInsets(
            &self,
            automaticallyAdjustsContentInsets: bool,
        );

        #[method(contentInsets)]
        pub unsafe fn contentInsets(&self) -> Foundation::NSEdgeInsets;

        #[method(setContentInsets:)]
        pub unsafe fn setContentInsets(&self, contentInsets: Foundation::NSEdgeInsets);

        #[method(scrollerInsets)]
        pub unsafe fn scrollerInsets(&self) -> Foundation::NSEdgeInsets;

        #[method(setScrollerInsets:)]
        pub unsafe fn setScrollerInsets(&self, scrollerInsets: Foundation::NSEdgeInsets);
    }
);

extern_static!(
    NSScrollViewWillStartLiveMagnifyNotification: &'static Foundation::NSNotificationName
);

extern_static!(NSScrollViewDidEndLiveMagnifyNotification: &'static Foundation::NSNotificationName);

extern_static!(
    NSScrollViewWillStartLiveScrollNotification: &'static Foundation::NSNotificationName
);

extern_static!(NSScrollViewDidLiveScrollNotification: &'static Foundation::NSNotificationName);

extern_static!(NSScrollViewDidEndLiveScrollNotification: &'static Foundation::NSNotificationName);

extern_methods!(
    /// NSRulerSupport
    #[cfg(feature = "AppKit_NSScrollView")]
    unsafe impl NSScrollView {
        #[method(rulerViewClass)]
        pub unsafe fn rulerViewClass() -> Option<&'static Class>;

        #[method(setRulerViewClass:)]
        pub unsafe fn setRulerViewClass(rulerViewClass: Option<&Class>);

        #[method(rulersVisible)]
        pub unsafe fn rulersVisible(&self) -> bool;

        #[method(setRulersVisible:)]
        pub unsafe fn setRulersVisible(&self, rulersVisible: bool);

        #[method(hasHorizontalRuler)]
        pub unsafe fn hasHorizontalRuler(&self) -> bool;

        #[method(setHasHorizontalRuler:)]
        pub unsafe fn setHasHorizontalRuler(&self, hasHorizontalRuler: bool);

        #[method(hasVerticalRuler)]
        pub unsafe fn hasVerticalRuler(&self) -> bool;

        #[method(setHasVerticalRuler:)]
        pub unsafe fn setHasVerticalRuler(&self, hasVerticalRuler: bool);

        #[cfg(feature = "AppKit_NSRulerView")]
        #[method_id(@__retain_semantics Other horizontalRulerView)]
        pub unsafe fn horizontalRulerView(&self) -> Option<Id<AppKit::NSRulerView, Shared>>;

        #[cfg(feature = "AppKit_NSRulerView")]
        #[method(setHorizontalRulerView:)]
        pub unsafe fn setHorizontalRulerView(
            &self,
            horizontalRulerView: Option<&AppKit::NSRulerView>,
        );

        #[cfg(feature = "AppKit_NSRulerView")]
        #[method_id(@__retain_semantics Other verticalRulerView)]
        pub unsafe fn verticalRulerView(&self) -> Option<Id<AppKit::NSRulerView, Shared>>;

        #[cfg(feature = "AppKit_NSRulerView")]
        #[method(setVerticalRulerView:)]
        pub unsafe fn setVerticalRulerView(&self, verticalRulerView: Option<&AppKit::NSRulerView>);
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSScrollViewFindBarPosition {
        NSScrollViewFindBarPositionAboveHorizontalRuler = 0,
        NSScrollViewFindBarPositionAboveContent = 1,
        NSScrollViewFindBarPositionBelowContent = 2,
    }
);

extern_methods!(
    /// NSFindBarSupport
    #[cfg(feature = "AppKit_NSScrollView")]
    unsafe impl NSScrollView {
        #[method(findBarPosition)]
        pub unsafe fn findBarPosition(&self) -> AppKit::NSScrollViewFindBarPosition;

        #[method(setFindBarPosition:)]
        pub unsafe fn setFindBarPosition(
            &self,
            findBarPosition: AppKit::NSScrollViewFindBarPosition,
        );
    }
);
