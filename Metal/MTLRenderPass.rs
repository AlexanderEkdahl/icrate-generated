//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::Metal::*;

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum MTLLoadAction {
        MTLLoadActionDontCare = 0,
        MTLLoadActionLoad = 1,
        MTLLoadActionClear = 2,
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum MTLStoreAction {
        MTLStoreActionDontCare = 0,
        MTLStoreActionStore = 1,
        MTLStoreActionMultisampleResolve = 2,
        MTLStoreActionStoreAndMultisampleResolve = 3,
        MTLStoreActionUnknown = 4,
        MTLStoreActionCustomSampleDepthStore = 5,
    }
);

ns_options!(
    #[underlying(NSUInteger)]
    pub enum MTLStoreActionOptions {
        MTLStoreActionOptionNone = 0,
        MTLStoreActionOptionCustomSamplePositions = 1 << 0,
    }
);

extern_struct!(
    pub struct MTLClearColor {
        pub red: c_double,
        pub green: c_double,
        pub blue: c_double,
        pub alpha: c_double,
    }
);

inline_fn!(
    pub unsafe fn MTLClearColorMake(
        red: c_double,
        green: c_double,
        blue: c_double,
        alpha: c_double,
    ) -> MTLClearColor {
        todo!()
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLRenderPassAttachmentDescriptor;

    unsafe impl ClassType for MTLRenderPassAttachmentDescriptor {
        type Super = NSObject;
    }
);

extern_methods!(
    unsafe impl MTLRenderPassAttachmentDescriptor {
        #[method_id(@__retain_semantics Other texture)]
        pub fn texture(&self) -> Option<Id<MTLTexture, Shared>>;

        #[method(setTexture:)]
        pub fn setTexture(&self, texture: Option<&MTLTexture>);

        #[method(level)]
        pub fn level(&self) -> NSUInteger;

        #[method(setLevel:)]
        pub fn setLevel(&self, level: NSUInteger);

        #[method(slice)]
        pub fn slice(&self) -> NSUInteger;

        #[method(setSlice:)]
        pub fn setSlice(&self, slice: NSUInteger);

        #[method(depthPlane)]
        pub fn depthPlane(&self) -> NSUInteger;

        #[method(setDepthPlane:)]
        pub fn setDepthPlane(&self, depthPlane: NSUInteger);

        #[method_id(@__retain_semantics Other resolveTexture)]
        pub fn resolveTexture(&self) -> Option<Id<MTLTexture, Shared>>;

        #[method(setResolveTexture:)]
        pub fn setResolveTexture(&self, resolveTexture: Option<&MTLTexture>);

        #[method(resolveLevel)]
        pub fn resolveLevel(&self) -> NSUInteger;

        #[method(setResolveLevel:)]
        pub fn setResolveLevel(&self, resolveLevel: NSUInteger);

        #[method(resolveSlice)]
        pub fn resolveSlice(&self) -> NSUInteger;

        #[method(setResolveSlice:)]
        pub fn setResolveSlice(&self, resolveSlice: NSUInteger);

        #[method(resolveDepthPlane)]
        pub fn resolveDepthPlane(&self) -> NSUInteger;

        #[method(setResolveDepthPlane:)]
        pub fn setResolveDepthPlane(&self, resolveDepthPlane: NSUInteger);

        #[method(loadAction)]
        pub fn loadAction(&self) -> MTLLoadAction;

        #[method(setLoadAction:)]
        pub fn setLoadAction(&self, loadAction: MTLLoadAction);

        #[method(storeAction)]
        pub fn storeAction(&self) -> MTLStoreAction;

        #[method(setStoreAction:)]
        pub fn setStoreAction(&self, storeAction: MTLStoreAction);

        #[method(storeActionOptions)]
        pub fn storeActionOptions(&self) -> MTLStoreActionOptions;

        #[method(setStoreActionOptions:)]
        pub fn setStoreActionOptions(&self, storeActionOptions: MTLStoreActionOptions);
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLRenderPassColorAttachmentDescriptor;

    unsafe impl ClassType for MTLRenderPassColorAttachmentDescriptor {
        #[inherits(NSObject)]
        type Super = MTLRenderPassAttachmentDescriptor;
    }
);

extern_methods!(
    unsafe impl MTLRenderPassColorAttachmentDescriptor {
        #[method(clearColor)]
        pub fn clearColor(&self) -> MTLClearColor;

        #[method(setClearColor:)]
        pub fn setClearColor(&self, clearColor: MTLClearColor);
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum MTLMultisampleDepthResolveFilter {
        MTLMultisampleDepthResolveFilterSample0 = 0,
        MTLMultisampleDepthResolveFilterMin = 1,
        MTLMultisampleDepthResolveFilterMax = 2,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLRenderPassDepthAttachmentDescriptor;

    unsafe impl ClassType for MTLRenderPassDepthAttachmentDescriptor {
        #[inherits(NSObject)]
        type Super = MTLRenderPassAttachmentDescriptor;
    }
);

extern_methods!(
    unsafe impl MTLRenderPassDepthAttachmentDescriptor {
        #[method(clearDepth)]
        pub fn clearDepth(&self) -> c_double;

        #[method(setClearDepth:)]
        pub fn setClearDepth(&self, clearDepth: c_double);

        #[method(depthResolveFilter)]
        pub fn depthResolveFilter(&self) -> MTLMultisampleDepthResolveFilter;

        #[method(setDepthResolveFilter:)]
        pub fn setDepthResolveFilter(&self, depthResolveFilter: MTLMultisampleDepthResolveFilter);
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum MTLMultisampleStencilResolveFilter {
        MTLMultisampleStencilResolveFilterSample0 = 0,
        MTLMultisampleStencilResolveFilterDepthResolvedSample = 1,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLRenderPassStencilAttachmentDescriptor;

    unsafe impl ClassType for MTLRenderPassStencilAttachmentDescriptor {
        #[inherits(NSObject)]
        type Super = MTLRenderPassAttachmentDescriptor;
    }
);

extern_methods!(
    unsafe impl MTLRenderPassStencilAttachmentDescriptor {
        #[method(clearStencil)]
        pub fn clearStencil(&self) -> u32;

        #[method(setClearStencil:)]
        pub fn setClearStencil(&self, clearStencil: u32);

        #[method(stencilResolveFilter)]
        pub fn stencilResolveFilter(&self) -> MTLMultisampleStencilResolveFilter;

        #[method(setStencilResolveFilter:)]
        pub fn setStencilResolveFilter(
            &self,
            stencilResolveFilter: MTLMultisampleStencilResolveFilter,
        );
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLRenderPassColorAttachmentDescriptorArray;

    unsafe impl ClassType for MTLRenderPassColorAttachmentDescriptorArray {
        type Super = NSObject;
    }
);

extern_methods!(
    unsafe impl MTLRenderPassColorAttachmentDescriptorArray {
        #[method_id(@__retain_semantics Other objectAtIndexedSubscript:)]
        pub unsafe fn objectAtIndexedSubscript(
            &self,
            attachmentIndex: NSUInteger,
        ) -> Id<MTLRenderPassColorAttachmentDescriptor, Shared>;

        #[method(setObject:atIndexedSubscript:)]
        pub unsafe fn setObject_atIndexedSubscript(
            &self,
            attachment: Option<&MTLRenderPassColorAttachmentDescriptor>,
            attachmentIndex: NSUInteger,
        );
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLRenderPassSampleBufferAttachmentDescriptor;

    unsafe impl ClassType for MTLRenderPassSampleBufferAttachmentDescriptor {
        type Super = NSObject;
    }
);

extern_methods!(
    unsafe impl MTLRenderPassSampleBufferAttachmentDescriptor {
        #[method_id(@__retain_semantics Other sampleBuffer)]
        pub fn sampleBuffer(&self) -> Option<Id<MTLCounterSampleBuffer, Shared>>;

        #[method(setSampleBuffer:)]
        pub fn setSampleBuffer(&self, sampleBuffer: Option<&MTLCounterSampleBuffer>);

        #[method(startOfVertexSampleIndex)]
        pub fn startOfVertexSampleIndex(&self) -> NSUInteger;

        #[method(setStartOfVertexSampleIndex:)]
        pub unsafe fn setStartOfVertexSampleIndex(&self, startOfVertexSampleIndex: NSUInteger);

        #[method(endOfVertexSampleIndex)]
        pub fn endOfVertexSampleIndex(&self) -> NSUInteger;

        #[method(setEndOfVertexSampleIndex:)]
        pub unsafe fn setEndOfVertexSampleIndex(&self, endOfVertexSampleIndex: NSUInteger);

        #[method(startOfFragmentSampleIndex)]
        pub fn startOfFragmentSampleIndex(&self) -> NSUInteger;

        #[method(setStartOfFragmentSampleIndex:)]
        pub unsafe fn setStartOfFragmentSampleIndex(&self, startOfFragmentSampleIndex: NSUInteger);

        #[method(endOfFragmentSampleIndex)]
        pub fn endOfFragmentSampleIndex(&self) -> NSUInteger;

        #[method(setEndOfFragmentSampleIndex:)]
        pub unsafe fn setEndOfFragmentSampleIndex(&self, endOfFragmentSampleIndex: NSUInteger);
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLRenderPassSampleBufferAttachmentDescriptorArray;

    unsafe impl ClassType for MTLRenderPassSampleBufferAttachmentDescriptorArray {
        type Super = NSObject;
    }
);

extern_methods!(
    unsafe impl MTLRenderPassSampleBufferAttachmentDescriptorArray {
        #[method_id(@__retain_semantics Other objectAtIndexedSubscript:)]
        pub unsafe fn objectAtIndexedSubscript(
            &self,
            attachmentIndex: NSUInteger,
        ) -> Id<MTLRenderPassSampleBufferAttachmentDescriptor, Shared>;

        #[method(setObject:atIndexedSubscript:)]
        pub unsafe fn setObject_atIndexedSubscript(
            &self,
            attachment: Option<&MTLRenderPassSampleBufferAttachmentDescriptor>,
            attachmentIndex: NSUInteger,
        );
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLRenderPassDescriptor;

    unsafe impl ClassType for MTLRenderPassDescriptor {
        type Super = NSObject;
    }
);

extern_methods!(
    unsafe impl MTLRenderPassDescriptor {
        #[method_id(@__retain_semantics Other renderPassDescriptor)]
        pub fn renderPassDescriptor() -> Id<MTLRenderPassDescriptor, Shared>;

        #[method_id(@__retain_semantics Other colorAttachments)]
        pub fn colorAttachments(&self) -> Id<MTLRenderPassColorAttachmentDescriptorArray, Shared>;

        #[method_id(@__retain_semantics Other depthAttachment)]
        pub fn depthAttachment(&self) -> Id<MTLRenderPassDepthAttachmentDescriptor, Shared>;

        #[method(setDepthAttachment:)]
        pub fn setDepthAttachment(
            &self,
            depthAttachment: Option<&MTLRenderPassDepthAttachmentDescriptor>,
        );

        #[method_id(@__retain_semantics Other stencilAttachment)]
        pub fn stencilAttachment(&self) -> Id<MTLRenderPassStencilAttachmentDescriptor, Shared>;

        #[method(setStencilAttachment:)]
        pub fn setStencilAttachment(
            &self,
            stencilAttachment: Option<&MTLRenderPassStencilAttachmentDescriptor>,
        );

        #[method_id(@__retain_semantics Other visibilityResultBuffer)]
        pub fn visibilityResultBuffer(&self) -> Option<Id<MTLBuffer, Shared>>;

        #[method(setVisibilityResultBuffer:)]
        pub fn setVisibilityResultBuffer(&self, visibilityResultBuffer: Option<&MTLBuffer>);

        #[method(renderTargetArrayLength)]
        pub fn renderTargetArrayLength(&self) -> NSUInteger;

        #[method(setRenderTargetArrayLength:)]
        pub unsafe fn setRenderTargetArrayLength(&self, renderTargetArrayLength: NSUInteger);

        #[method(imageblockSampleLength)]
        pub fn imageblockSampleLength(&self) -> NSUInteger;

        #[method(setImageblockSampleLength:)]
        pub unsafe fn setImageblockSampleLength(&self, imageblockSampleLength: NSUInteger);

        #[method(threadgroupMemoryLength)]
        pub fn threadgroupMemoryLength(&self) -> NSUInteger;

        #[method(setThreadgroupMemoryLength:)]
        pub unsafe fn setThreadgroupMemoryLength(&self, threadgroupMemoryLength: NSUInteger);

        #[method(tileWidth)]
        pub fn tileWidth(&self) -> NSUInteger;

        #[method(setTileWidth:)]
        pub fn setTileWidth(&self, tileWidth: NSUInteger);

        #[method(tileHeight)]
        pub fn tileHeight(&self) -> NSUInteger;

        #[method(setTileHeight:)]
        pub fn setTileHeight(&self, tileHeight: NSUInteger);

        #[method(defaultRasterSampleCount)]
        pub fn defaultRasterSampleCount(&self) -> NSUInteger;

        #[method(setDefaultRasterSampleCount:)]
        pub fn setDefaultRasterSampleCount(&self, defaultRasterSampleCount: NSUInteger);

        #[method(renderTargetWidth)]
        pub fn renderTargetWidth(&self) -> NSUInteger;

        #[method(setRenderTargetWidth:)]
        pub fn setRenderTargetWidth(&self, renderTargetWidth: NSUInteger);

        #[method(renderTargetHeight)]
        pub fn renderTargetHeight(&self) -> NSUInteger;

        #[method(setRenderTargetHeight:)]
        pub fn setRenderTargetHeight(&self, renderTargetHeight: NSUInteger);

        #[method(setSamplePositions:count:)]
        pub unsafe fn setSamplePositions_count(
            &self,
            positions: *mut MTLSamplePosition,
            count: NSUInteger,
        );

        #[method(getSamplePositions:count:)]
        pub unsafe fn getSamplePositions_count(
            &self,
            positions: *mut MTLSamplePosition,
            count: NSUInteger,
        ) -> NSUInteger;

        #[method_id(@__retain_semantics Other rasterizationRateMap)]
        pub fn rasterizationRateMap(&self) -> Option<Id<MTLRasterizationRateMap, Shared>>;

        #[method(setRasterizationRateMap:)]
        pub fn setRasterizationRateMap(
            &self,
            rasterizationRateMap: Option<&MTLRasterizationRateMap>,
        );

        #[method_id(@__retain_semantics Other sampleBufferAttachments)]
        pub fn sampleBufferAttachments(
            &self,
        ) -> Id<MTLRenderPassSampleBufferAttachmentDescriptorArray, Shared>;
    }
);

inline_fn!(
    pub unsafe fn MTLClearColorMake(
        red: c_double,
        green: c_double,
        blue: c_double,
        alpha: c_double,
    ) -> MTLClearColor {
        todo!()
    }
);
