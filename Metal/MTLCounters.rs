//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation;
use crate::Metal;

typed_enum!(
    pub type MTLCommonCounter = Foundation::NSString;
);

extern_static!(MTLCommonCounterTimestamp: &'static Metal::MTLCommonCounter);

extern_static!(MTLCommonCounterTessellationInputPatches: &'static Metal::MTLCommonCounter);

extern_static!(MTLCommonCounterVertexInvocations: &'static Metal::MTLCommonCounter);

extern_static!(MTLCommonCounterPostTessellationVertexInvocations: &'static Metal::MTLCommonCounter);

extern_static!(MTLCommonCounterClipperInvocations: &'static Metal::MTLCommonCounter);

extern_static!(MTLCommonCounterClipperPrimitivesOut: &'static Metal::MTLCommonCounter);

extern_static!(MTLCommonCounterFragmentInvocations: &'static Metal::MTLCommonCounter);

extern_static!(MTLCommonCounterFragmentsPassed: &'static Metal::MTLCommonCounter);

extern_static!(MTLCommonCounterComputeKernelInvocations: &'static Metal::MTLCommonCounter);

extern_static!(MTLCommonCounterTotalCycles: &'static Metal::MTLCommonCounter);

extern_static!(MTLCommonCounterVertexCycles: &'static Metal::MTLCommonCounter);

extern_static!(MTLCommonCounterTessellationCycles: &'static Metal::MTLCommonCounter);

extern_static!(MTLCommonCounterPostTessellationVertexCycles: &'static Metal::MTLCommonCounter);

extern_static!(MTLCommonCounterFragmentCycles: &'static Metal::MTLCommonCounter);

extern_static!(MTLCommonCounterRenderTargetWriteCycles: &'static Metal::MTLCommonCounter);

typed_enum!(
    pub type MTLCommonCounterSet = Foundation::NSString;
);

extern_static!(MTLCommonCounterSetTimestamp: &'static Metal::MTLCommonCounterSet);

extern_static!(MTLCommonCounterSetStageUtilization: &'static Metal::MTLCommonCounterSet);

extern_static!(MTLCommonCounterSetStatistic: &'static Metal::MTLCommonCounterSet);

extern_struct!(
    pub struct MTLCounterResultTimestamp {
        pub timestamp: u64,
    }
);

extern_struct!(
    pub struct MTLCounterResultStageUtilization {
        pub totalCycles: u64,
        pub vertexCycles: u64,
        pub tessellationCycles: u64,
        pub postTessellationVertexCycles: u64,
        pub fragmentCycles: u64,
        pub renderTargetCycles: u64,
    }
);

extern_struct!(
    pub struct MTLCounterResultStatistic {
        pub tessellationInputPatches: u64,
        pub vertexInvocations: u64,
        pub postTessellationVertexInvocations: u64,
        pub clipperInvocations: u64,
        pub clipperPrimitivesOut: u64,
        pub fragmentInvocations: u64,
        pub fragmentsPassed: u64,
        pub computeKernelInvocations: u64,
    }
);

extern_protocol!(
    pub struct MTLCounter;

    unsafe impl ProtocolType for MTLCounter {
        #[method_id(@__retain_semantics Other name)]
        pub unsafe fn name(&self) -> Id<Foundation::NSString, Shared>;
    }
);

extern_protocol!(
    pub struct MTLCounterSet;

    unsafe impl ProtocolType for MTLCounterSet {
        #[method_id(@__retain_semantics Other name)]
        pub unsafe fn name(&self) -> Id<Foundation::NSString, Shared>;

        #[method_id(@__retain_semantics Other counters)]
        pub unsafe fn counters(&self) -> Id<Foundation::NSArray<Metal::MTLCounter>, Shared>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLCounterSampleBufferDescriptor;

    unsafe impl ClassType for MTLCounterSampleBufferDescriptor {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Metal_MTLCounterSampleBufferDescriptor")]
    unsafe impl MTLCounterSampleBufferDescriptor {
        #[method_id(@__retain_semantics Other counterSet)]
        pub unsafe fn counterSet(&self) -> Option<Id<Metal::MTLCounterSet, Shared>>;

        #[method(setCounterSet:)]
        pub unsafe fn setCounterSet(&self, counterSet: Option<&Metal::MTLCounterSet>);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other label)]
        pub unsafe fn label(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setLabel:)]
        pub unsafe fn setLabel(&self, label: &Foundation::NSString);

        #[method(storageMode)]
        pub unsafe fn storageMode(&self) -> Metal::MTLStorageMode;

        #[method(setStorageMode:)]
        pub unsafe fn setStorageMode(&self, storageMode: Metal::MTLStorageMode);

        #[method(sampleCount)]
        pub unsafe fn sampleCount(&self) -> NSUInteger;

        #[method(setSampleCount:)]
        pub unsafe fn setSampleCount(&self, sampleCount: NSUInteger);
    }
);

extern_protocol!(
    pub struct MTLCounterSampleBuffer;

    unsafe impl ProtocolType for MTLCounterSampleBuffer {
        #[method_id(@__retain_semantics Other device)]
        pub unsafe fn device(&self) -> Id<Metal::MTLDevice, Shared>;

        #[method_id(@__retain_semantics Other label)]
        pub unsafe fn label(&self) -> Id<Foundation::NSString, Shared>;

        #[method(sampleCount)]
        pub unsafe fn sampleCount(&self) -> NSUInteger;

        #[method_id(@__retain_semantics Other resolveCounterRange:)]
        pub unsafe fn resolveCounterRange(
            &self,
            range: Foundation::NSRange,
        ) -> Option<Id<Foundation::NSData, Shared>>;
    }
);

extern_static!(MTLCounterErrorDomain: &'static Foundation::NSErrorDomain);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum MTLCounterSampleBufferError {
        MTLCounterSampleBufferErrorOutOfMemory = 0,
        MTLCounterSampleBufferErrorInvalid = 1,
        MTLCounterSampleBufferErrorInternal = 2,
    }
);
