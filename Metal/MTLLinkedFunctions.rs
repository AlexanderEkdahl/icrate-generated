//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::Metal::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLLinkedFunctions;

    unsafe impl ClassType for MTLLinkedFunctions {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Metal_MTLLinkedFunctions")]
    unsafe impl MTLLinkedFunctions {
        #[method_id(@__retain_semantics Other linkedFunctions)]
        pub fn linkedFunctions() -> Id<MTLLinkedFunctions, Shared>;

        #[cfg(feature = "Metal_MTLFunction")]
        #[method_id(@__retain_semantics Other functions)]
        pub fn functions(&self) -> Option<Id<NSArray<MTLFunction>, Shared>>;

        #[cfg(feature = "Metal_MTLFunction")]
        #[method(setFunctions:)]
        pub fn setFunctions(&self, functions: Option<&NSArray<MTLFunction>>);

        #[cfg(feature = "Metal_MTLFunction")]
        #[method_id(@__retain_semantics Other binaryFunctions)]
        pub fn binaryFunctions(&self) -> Option<Id<NSArray<MTLFunction>, Shared>>;

        #[cfg(feature = "Metal_MTLFunction")]
        #[method(setBinaryFunctions:)]
        pub fn setBinaryFunctions(&self, binaryFunctions: Option<&NSArray<MTLFunction>>);

        #[cfg(feature = "Metal_MTLFunction")]
        #[method_id(@__retain_semantics Other groups)]
        pub fn groups(&self) -> Option<Id<NSDictionary<NSString, NSArray<MTLFunction>>, Shared>>;

        #[cfg(feature = "Metal_MTLFunction")]
        #[method(setGroups:)]
        pub fn setGroups(&self, groups: Option<&NSDictionary<NSString, NSArray<MTLFunction>>>);

        #[cfg(feature = "Metal_MTLFunction")]
        #[method_id(@__retain_semantics Other privateFunctions)]
        pub fn privateFunctions(&self) -> Option<Id<NSArray<MTLFunction>, Shared>>;

        #[cfg(feature = "Metal_MTLFunction")]
        #[method(setPrivateFunctions:)]
        pub fn setPrivateFunctions(&self, privateFunctions: Option<&NSArray<MTLFunction>>);
    }
);
