//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation;
use crate::Metal;

extern_static!(MTLBinaryArchiveDomain: &'static Foundation::NSErrorDomain);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum MTLBinaryArchiveError {
        MTLBinaryArchiveErrorNone = 0,
        MTLBinaryArchiveErrorInvalidFile = 1,
        MTLBinaryArchiveErrorUnexpectedElement = 2,
        MTLBinaryArchiveErrorCompilationFailure = 3,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLBinaryArchiveDescriptor;

    unsafe impl ClassType for MTLBinaryArchiveDescriptor {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Metal_MTLBinaryArchiveDescriptor")]
    unsafe impl MTLBinaryArchiveDescriptor {
        #[cfg(feature = "Foundation_NSURL")]
        #[method_id(@__retain_semantics Other url)]
        pub fn url(&self) -> Option<Id<Foundation::NSURL, Shared>>;

        #[cfg(feature = "Foundation_NSURL")]
        #[method(setUrl:)]
        pub fn setUrl(&self, url: Option<&Foundation::NSURL>);
    }
);

extern_protocol!(
    pub struct MTLBinaryArchive;

    unsafe impl ProtocolType for MTLBinaryArchive {
        #[method_id(@__retain_semantics Other label)]
        pub fn label(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[method(setLabel:)]
        pub fn setLabel(&self, label: Option<&Foundation::NSString>);

        #[method_id(@__retain_semantics Other device)]
        pub fn device(&self) -> Id<Metal::MTLDevice, Shared>;

        #[method(addComputePipelineFunctionsWithDescriptor:error:_)]
        pub fn addComputePipelineFunctionsWithDescriptor_error(
            &self,
            descriptor: &Metal::MTLComputePipelineDescriptor,
        ) -> Result<(), Id<NSError, Shared>>;

        #[method(addRenderPipelineFunctionsWithDescriptor:error:_)]
        pub fn addRenderPipelineFunctionsWithDescriptor_error(
            &self,
            descriptor: &Metal::MTLRenderPipelineDescriptor,
        ) -> Result<(), Id<NSError, Shared>>;

        #[method(addTileRenderPipelineFunctionsWithDescriptor:error:_)]
        pub unsafe fn addTileRenderPipelineFunctionsWithDescriptor_error(
            &self,
            descriptor: &Metal::MTLTileRenderPipelineDescriptor,
        ) -> Result<(), Id<NSError, Shared>>;

        #[method(serializeToURL:error:_)]
        pub fn serializeToURL_error(
            &self,
            url: &Foundation::NSURL,
        ) -> Result<(), Id<NSError, Shared>>;

        #[method(addFunctionWithDescriptor:library:error:_)]
        pub unsafe fn addFunctionWithDescriptor_library_error(
            &self,
            descriptor: &Metal::MTLFunctionDescriptor,
            library: &Metal::MTLLibrary,
        ) -> Result<(), Id<NSError, Shared>>;
    }
);
