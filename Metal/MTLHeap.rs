//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation;
use crate::Metal;

ns_enum!(
    #[underlying(NSInteger)]
    pub enum MTLHeapType {
        MTLHeapTypeAutomatic = 0,
        MTLHeapTypePlacement = 1,
        MTLHeapTypeSparse = 2,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLHeapDescriptor;

    unsafe impl ClassType for MTLHeapDescriptor {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Metal_MTLHeapDescriptor")]
    unsafe impl MTLHeapDescriptor {
        #[method(size)]
        pub fn size(&self) -> NSUInteger;

        #[method(setSize:)]
        pub fn setSize(&self, size: NSUInteger);

        #[method(storageMode)]
        pub fn storageMode(&self) -> Metal::MTLStorageMode;

        #[method(setStorageMode:)]
        pub fn setStorageMode(&self, storageMode: Metal::MTLStorageMode);

        #[method(cpuCacheMode)]
        pub fn cpuCacheMode(&self) -> Metal::MTLCPUCacheMode;

        #[method(setCpuCacheMode:)]
        pub fn setCpuCacheMode(&self, cpuCacheMode: Metal::MTLCPUCacheMode);

        #[method(hazardTrackingMode)]
        pub fn hazardTrackingMode(&self) -> Metal::MTLHazardTrackingMode;

        #[method(setHazardTrackingMode:)]
        pub fn setHazardTrackingMode(&self, hazardTrackingMode: Metal::MTLHazardTrackingMode);

        #[method(resourceOptions)]
        pub fn resourceOptions(&self) -> Metal::MTLResourceOptions;

        #[method(setResourceOptions:)]
        pub fn setResourceOptions(&self, resourceOptions: Metal::MTLResourceOptions);

        #[method(type)]
        pub unsafe fn type_(&self) -> Metal::MTLHeapType;

        #[method(setType:)]
        pub fn setType(&self, type_: Metal::MTLHeapType);
    }
);

extern_protocol!(
    pub struct MTLHeap;

    unsafe impl ProtocolType for MTLHeap {
        #[method_id(@__retain_semantics Other label)]
        pub fn label(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[method(setLabel:)]
        pub fn setLabel(&self, label: Option<&Foundation::NSString>);

        #[method_id(@__retain_semantics Other device)]
        pub fn device(&self) -> Id<Metal::MTLDevice, Shared>;

        #[method(storageMode)]
        pub fn storageMode(&self) -> Metal::MTLStorageMode;

        #[method(cpuCacheMode)]
        pub fn cpuCacheMode(&self) -> Metal::MTLCPUCacheMode;

        #[method(hazardTrackingMode)]
        pub fn hazardTrackingMode(&self) -> Metal::MTLHazardTrackingMode;

        #[method(resourceOptions)]
        pub fn resourceOptions(&self) -> Metal::MTLResourceOptions;

        #[method(size)]
        pub fn size(&self) -> NSUInteger;

        #[method(usedSize)]
        pub fn usedSize(&self) -> NSUInteger;

        #[method(currentAllocatedSize)]
        pub fn currentAllocatedSize(&self) -> NSUInteger;

        #[method(maxAvailableSizeWithAlignment:)]
        pub fn maxAvailableSizeWithAlignment(&self, alignment: NSUInteger) -> NSUInteger;

        #[method_id(@__retain_semantics New newBufferWithLength:options:)]
        pub fn newBufferWithLength_options(
            &self,
            length: NSUInteger,
            options: Metal::MTLResourceOptions,
        ) -> Option<Id<Metal::MTLBuffer, Shared>>;

        #[method_id(@__retain_semantics New newTextureWithDescriptor:)]
        pub fn newTextureWithDescriptor(
            &self,
            desc: &Metal::MTLTextureDescriptor,
        ) -> Option<Id<Metal::MTLTexture, Shared>>;

        #[method(setPurgeableState:)]
        pub fn setPurgeableState(
            &self,
            state: Metal::MTLPurgeableState,
        ) -> Metal::MTLPurgeableState;

        #[method(type)]
        pub unsafe fn type_(&self) -> Metal::MTLHeapType;

        #[method_id(@__retain_semantics New newBufferWithLength:options:offset:)]
        pub unsafe fn newBufferWithLength_options_offset(
            &self,
            length: NSUInteger,
            options: Metal::MTLResourceOptions,
            offset: NSUInteger,
        ) -> Option<Id<Metal::MTLBuffer, Shared>>;

        #[method_id(@__retain_semantics New newTextureWithDescriptor:offset:)]
        pub unsafe fn newTextureWithDescriptor_offset(
            &self,
            descriptor: &Metal::MTLTextureDescriptor,
            offset: NSUInteger,
        ) -> Option<Id<Metal::MTLTexture, Shared>>;
    }
);
