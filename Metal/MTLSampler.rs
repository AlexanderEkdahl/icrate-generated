//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation;
use crate::Metal;

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum MTLSamplerMinMagFilter {
        MTLSamplerMinMagFilterNearest = 0,
        MTLSamplerMinMagFilterLinear = 1,
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum MTLSamplerMipFilter {
        MTLSamplerMipFilterNotMipmapped = 0,
        MTLSamplerMipFilterNearest = 1,
        MTLSamplerMipFilterLinear = 2,
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum MTLSamplerAddressMode {
        MTLSamplerAddressModeClampToEdge = 0,
        MTLSamplerAddressModeMirrorClampToEdge = 1,
        MTLSamplerAddressModeRepeat = 2,
        MTLSamplerAddressModeMirrorRepeat = 3,
        MTLSamplerAddressModeClampToZero = 4,
        MTLSamplerAddressModeClampToBorderColor = 5,
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum MTLSamplerBorderColor {
        MTLSamplerBorderColorTransparentBlack = 0,
        MTLSamplerBorderColorOpaqueBlack = 1,
        MTLSamplerBorderColorOpaqueWhite = 2,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLSamplerDescriptor;

    unsafe impl ClassType for MTLSamplerDescriptor {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Metal_MTLSamplerDescriptor")]
    unsafe impl MTLSamplerDescriptor {
        #[method(minFilter)]
        pub fn minFilter(&self) -> Metal::MTLSamplerMinMagFilter;

        #[method(setMinFilter:)]
        pub fn setMinFilter(&self, minFilter: Metal::MTLSamplerMinMagFilter);

        #[method(magFilter)]
        pub fn magFilter(&self) -> Metal::MTLSamplerMinMagFilter;

        #[method(setMagFilter:)]
        pub fn setMagFilter(&self, magFilter: Metal::MTLSamplerMinMagFilter);

        #[method(mipFilter)]
        pub fn mipFilter(&self) -> Metal::MTLSamplerMipFilter;

        #[method(setMipFilter:)]
        pub fn setMipFilter(&self, mipFilter: Metal::MTLSamplerMipFilter);

        #[method(maxAnisotropy)]
        pub fn maxAnisotropy(&self) -> NSUInteger;

        #[method(setMaxAnisotropy:)]
        pub fn setMaxAnisotropy(&self, maxAnisotropy: NSUInteger);

        #[method(sAddressMode)]
        pub fn sAddressMode(&self) -> Metal::MTLSamplerAddressMode;

        #[method(setSAddressMode:)]
        pub fn setSAddressMode(&self, sAddressMode: Metal::MTLSamplerAddressMode);

        #[method(tAddressMode)]
        pub fn tAddressMode(&self) -> Metal::MTLSamplerAddressMode;

        #[method(setTAddressMode:)]
        pub fn setTAddressMode(&self, tAddressMode: Metal::MTLSamplerAddressMode);

        #[method(rAddressMode)]
        pub fn rAddressMode(&self) -> Metal::MTLSamplerAddressMode;

        #[method(setRAddressMode:)]
        pub fn setRAddressMode(&self, rAddressMode: Metal::MTLSamplerAddressMode);

        #[method(borderColor)]
        pub fn borderColor(&self) -> Metal::MTLSamplerBorderColor;

        #[method(setBorderColor:)]
        pub fn setBorderColor(&self, borderColor: Metal::MTLSamplerBorderColor);

        #[method(normalizedCoordinates)]
        pub fn normalizedCoordinates(&self) -> bool;

        #[method(setNormalizedCoordinates:)]
        pub fn setNormalizedCoordinates(&self, normalizedCoordinates: bool);

        #[method(lodMinClamp)]
        pub fn lodMinClamp(&self) -> c_float;

        #[method(setLodMinClamp:)]
        pub fn setLodMinClamp(&self, lodMinClamp: c_float);

        #[method(lodMaxClamp)]
        pub fn lodMaxClamp(&self) -> c_float;

        #[method(setLodMaxClamp:)]
        pub fn setLodMaxClamp(&self, lodMaxClamp: c_float);

        #[method(lodAverage)]
        pub fn lodAverage(&self) -> bool;

        #[method(setLodAverage:)]
        pub fn setLodAverage(&self, lodAverage: bool);

        #[method(compareFunction)]
        pub fn compareFunction(&self) -> Metal::MTLCompareFunction;

        #[method(setCompareFunction:)]
        pub fn setCompareFunction(&self, compareFunction: Metal::MTLCompareFunction);

        #[method(supportArgumentBuffers)]
        pub fn supportArgumentBuffers(&self) -> bool;

        #[method(setSupportArgumentBuffers:)]
        pub fn setSupportArgumentBuffers(&self, supportArgumentBuffers: bool);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other label)]
        pub fn label(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setLabel:)]
        pub fn setLabel(&self, label: Option<&Foundation::NSString>);
    }
);

extern_protocol!(
    pub struct MTLSamplerState;

    unsafe impl ProtocolType for MTLSamplerState {
        #[method_id(@__retain_semantics Other label)]
        pub fn label(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[method_id(@__retain_semantics Other device)]
        pub fn device(&self) -> Id<Metal::MTLDevice, Shared>;
    }
);
