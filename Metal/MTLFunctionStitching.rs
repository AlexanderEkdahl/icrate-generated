//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation;
use crate::Metal;

extern_protocol!(
    pub struct MTLFunctionStitchingAttribute;

    unsafe impl ProtocolType for MTLFunctionStitchingAttribute {}
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLFunctionStitchingAttributeAlwaysInline;

    unsafe impl ClassType for MTLFunctionStitchingAttributeAlwaysInline {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Metal_MTLFunctionStitchingAttributeAlwaysInline")]
    unsafe impl MTLFunctionStitchingAttributeAlwaysInline {}
);

extern_protocol!(
    pub struct MTLFunctionStitchingNode;

    unsafe impl ProtocolType for MTLFunctionStitchingNode {}
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLFunctionStitchingInputNode;

    unsafe impl ClassType for MTLFunctionStitchingInputNode {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Metal_MTLFunctionStitchingInputNode")]
    unsafe impl MTLFunctionStitchingInputNode {
        #[method(argumentIndex)]
        pub unsafe fn argumentIndex(&self) -> NSUInteger;

        #[method(setArgumentIndex:)]
        pub unsafe fn setArgumentIndex(&self, argumentIndex: NSUInteger);

        #[method_id(@__retain_semantics Init initWithArgumentIndex:)]
        pub unsafe fn initWithArgumentIndex(
            this: Option<Allocated<Self>>,
            argument: NSUInteger,
        ) -> Id<Self, Shared>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLFunctionStitchingFunctionNode;

    unsafe impl ClassType for MTLFunctionStitchingFunctionNode {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Metal_MTLFunctionStitchingFunctionNode")]
    unsafe impl MTLFunctionStitchingFunctionNode {
        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other name)]
        pub unsafe fn name(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setName:)]
        pub unsafe fn setName(&self, name: &Foundation::NSString);

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Metal_MTLFunctionStitchingNode"
        ))]
        #[method_id(@__retain_semantics Other arguments)]
        pub unsafe fn arguments(
            &self,
        ) -> Id<Foundation::NSArray<Metal::MTLFunctionStitchingNode>, Shared>;

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Metal_MTLFunctionStitchingNode"
        ))]
        #[method(setArguments:)]
        pub unsafe fn setArguments(
            &self,
            arguments: &Foundation::NSArray<Metal::MTLFunctionStitchingNode>,
        );

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other controlDependencies)]
        pub unsafe fn controlDependencies(
            &self,
        ) -> Id<Foundation::NSArray<Metal::MTLFunctionStitchingFunctionNode>, Shared>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method(setControlDependencies:)]
        pub unsafe fn setControlDependencies(
            &self,
            controlDependencies: &Foundation::NSArray<Metal::MTLFunctionStitchingFunctionNode>,
        );

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSString",
            feature = "Metal_MTLFunctionStitchingNode"
        ))]
        #[method_id(@__retain_semantics Init initWithName:arguments:controlDependencies:)]
        pub unsafe fn initWithName_arguments_controlDependencies(
            this: Option<Allocated<Self>>,
            name: &Foundation::NSString,
            arguments: &Foundation::NSArray<Metal::MTLFunctionStitchingNode>,
            controlDependencies: &Foundation::NSArray<Metal::MTLFunctionStitchingFunctionNode>,
        ) -> Id<Self, Shared>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLFunctionStitchingGraph;

    unsafe impl ClassType for MTLFunctionStitchingGraph {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Metal_MTLFunctionStitchingGraph")]
    unsafe impl MTLFunctionStitchingGraph {
        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other functionName)]
        pub unsafe fn functionName(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setFunctionName:)]
        pub unsafe fn setFunctionName(&self, functionName: &Foundation::NSString);

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Metal_MTLFunctionStitchingFunctionNode"
        ))]
        #[method_id(@__retain_semantics Other nodes)]
        pub unsafe fn nodes(
            &self,
        ) -> Id<Foundation::NSArray<Metal::MTLFunctionStitchingFunctionNode>, Shared>;

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Metal_MTLFunctionStitchingFunctionNode"
        ))]
        #[method(setNodes:)]
        pub unsafe fn setNodes(
            &self,
            nodes: &Foundation::NSArray<Metal::MTLFunctionStitchingFunctionNode>,
        );

        #[cfg(feature = "Metal_MTLFunctionStitchingFunctionNode")]
        #[method_id(@__retain_semantics Other outputNode)]
        pub unsafe fn outputNode(
            &self,
        ) -> Option<Id<Metal::MTLFunctionStitchingFunctionNode, Shared>>;

        #[cfg(feature = "Metal_MTLFunctionStitchingFunctionNode")]
        #[method(setOutputNode:)]
        pub unsafe fn setOutputNode(
            &self,
            outputNode: Option<&Metal::MTLFunctionStitchingFunctionNode>,
        );

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Metal_MTLFunctionStitchingAttribute"
        ))]
        #[method_id(@__retain_semantics Other attributes)]
        pub unsafe fn attributes(
            &self,
        ) -> Id<Foundation::NSArray<Metal::MTLFunctionStitchingAttribute>, Shared>;

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Metal_MTLFunctionStitchingAttribute"
        ))]
        #[method(setAttributes:)]
        pub unsafe fn setAttributes(
            &self,
            attributes: &Foundation::NSArray<Metal::MTLFunctionStitchingAttribute>,
        );

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSString",
            feature = "Metal_MTLFunctionStitchingAttribute",
            feature = "Metal_MTLFunctionStitchingFunctionNode"
        ))]
        #[method_id(@__retain_semantics Init initWithFunctionName:nodes:outputNode:attributes:)]
        pub unsafe fn initWithFunctionName_nodes_outputNode_attributes(
            this: Option<Allocated<Self>>,
            functionName: &Foundation::NSString,
            nodes: &Foundation::NSArray<Metal::MTLFunctionStitchingFunctionNode>,
            outputNode: Option<&Metal::MTLFunctionStitchingFunctionNode>,
            attributes: &Foundation::NSArray<Metal::MTLFunctionStitchingAttribute>,
        ) -> Id<Self, Shared>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLStitchedLibraryDescriptor;

    unsafe impl ClassType for MTLStitchedLibraryDescriptor {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Metal_MTLStitchedLibraryDescriptor")]
    unsafe impl MTLStitchedLibraryDescriptor {
        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Metal_MTLFunctionStitchingGraph"
        ))]
        #[method_id(@__retain_semantics Other functionGraphs)]
        pub unsafe fn functionGraphs(
            &self,
        ) -> Id<Foundation::NSArray<Metal::MTLFunctionStitchingGraph>, Shared>;

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Metal_MTLFunctionStitchingGraph"
        ))]
        #[method(setFunctionGraphs:)]
        pub unsafe fn setFunctionGraphs(
            &self,
            functionGraphs: &Foundation::NSArray<Metal::MTLFunctionStitchingGraph>,
        );

        #[cfg(all(feature = "Foundation_NSArray", feature = "Metal_MTLFunction"))]
        #[method_id(@__retain_semantics Other functions)]
        pub unsafe fn functions(&self) -> Id<Foundation::NSArray<Metal::MTLFunction>, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Metal_MTLFunction"))]
        #[method(setFunctions:)]
        pub unsafe fn setFunctions(&self, functions: &Foundation::NSArray<Metal::MTLFunction>);
    }
);
