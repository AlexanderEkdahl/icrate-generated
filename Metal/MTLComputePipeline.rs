//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation;
use crate::Metal;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLComputePipelineReflection;

    unsafe impl ClassType for MTLComputePipelineReflection {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Metal_MTLComputePipelineReflection")]
    unsafe impl MTLComputePipelineReflection {
        #[cfg(all(feature = "Foundation_NSArray", feature = "Metal_MTLArgument"))]
        #[method_id(@__retain_semantics Other arguments)]
        pub fn arguments(&self) -> Id<Foundation::NSArray<Metal::MTLArgument>, Shared>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLComputePipelineDescriptor;

    unsafe impl ClassType for MTLComputePipelineDescriptor {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Metal_MTLComputePipelineDescriptor")]
    unsafe impl MTLComputePipelineDescriptor {
        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other label)]
        pub fn label(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setLabel:)]
        pub fn setLabel(&self, label: Option<&Foundation::NSString>);

        #[method_id(@__retain_semantics Other computeFunction)]
        pub fn computeFunction(&self) -> Option<Id<Metal::MTLFunction, Shared>>;

        #[method(setComputeFunction:)]
        pub fn setComputeFunction(&self, computeFunction: Option<&Metal::MTLFunction>);

        #[method(threadGroupSizeIsMultipleOfThreadExecutionWidth)]
        pub fn threadGroupSizeIsMultipleOfThreadExecutionWidth(&self) -> bool;

        #[method(setThreadGroupSizeIsMultipleOfThreadExecutionWidth:)]
        pub unsafe fn setThreadGroupSizeIsMultipleOfThreadExecutionWidth(
            &self,
            threadGroupSizeIsMultipleOfThreadExecutionWidth: bool,
        );

        #[method(maxTotalThreadsPerThreadgroup)]
        pub fn maxTotalThreadsPerThreadgroup(&self) -> NSUInteger;

        #[method(setMaxTotalThreadsPerThreadgroup:)]
        pub fn setMaxTotalThreadsPerThreadgroup(&self, maxTotalThreadsPerThreadgroup: NSUInteger);

        #[cfg(feature = "Metal_MTLStageInputOutputDescriptor")]
        #[method_id(@__retain_semantics Other stageInputDescriptor)]
        pub fn stageInputDescriptor(
            &self,
        ) -> Option<Id<Metal::MTLStageInputOutputDescriptor, Shared>>;

        #[cfg(feature = "Metal_MTLStageInputOutputDescriptor")]
        #[method(setStageInputDescriptor:)]
        pub fn setStageInputDescriptor(
            &self,
            stageInputDescriptor: Option<&Metal::MTLStageInputOutputDescriptor>,
        );

        #[cfg(feature = "Metal_MTLPipelineBufferDescriptorArray")]
        #[method_id(@__retain_semantics Other buffers)]
        pub fn buffers(&self) -> Id<Metal::MTLPipelineBufferDescriptorArray, Shared>;

        #[method(supportIndirectCommandBuffers)]
        pub fn supportIndirectCommandBuffers(&self) -> bool;

        #[method(setSupportIndirectCommandBuffers:)]
        pub fn setSupportIndirectCommandBuffers(&self, supportIndirectCommandBuffers: bool);

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other insertLibraries)]
        pub fn insertLibraries(
            &self,
        ) -> Option<Id<Foundation::NSArray<Metal::MTLDynamicLibrary>, Shared>>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method(setInsertLibraries:)]
        pub fn setInsertLibraries(
            &self,
            insertLibraries: Option<&Foundation::NSArray<Metal::MTLDynamicLibrary>>,
        );

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other preloadedLibraries)]
        pub fn preloadedLibraries(
            &self,
        ) -> Id<Foundation::NSArray<Metal::MTLDynamicLibrary>, Shared>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method(setPreloadedLibraries:)]
        pub fn setPreloadedLibraries(
            &self,
            preloadedLibraries: &Foundation::NSArray<Metal::MTLDynamicLibrary>,
        );

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other binaryArchives)]
        pub fn binaryArchives(
            &self,
        ) -> Option<Id<Foundation::NSArray<Metal::MTLBinaryArchive>, Shared>>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method(setBinaryArchives:)]
        pub fn setBinaryArchives(
            &self,
            binaryArchives: Option<&Foundation::NSArray<Metal::MTLBinaryArchive>>,
        );

        #[method(reset)]
        pub fn reset(&self);

        #[cfg(feature = "Metal_MTLLinkedFunctions")]
        #[method_id(@__retain_semantics Other linkedFunctions)]
        pub fn linkedFunctions(&self) -> Option<Id<Metal::MTLLinkedFunctions, Shared>>;

        #[cfg(feature = "Metal_MTLLinkedFunctions")]
        #[method(setLinkedFunctions:)]
        pub fn setLinkedFunctions(&self, linkedFunctions: Option<&Metal::MTLLinkedFunctions>);

        #[method(supportAddingBinaryFunctions)]
        pub fn supportAddingBinaryFunctions(&self) -> bool;

        #[method(setSupportAddingBinaryFunctions:)]
        pub fn setSupportAddingBinaryFunctions(&self, supportAddingBinaryFunctions: bool);

        #[method(maxCallStackDepth)]
        pub fn maxCallStackDepth(&self) -> NSUInteger;

        #[method(setMaxCallStackDepth:)]
        pub fn setMaxCallStackDepth(&self, maxCallStackDepth: NSUInteger);
    }
);

extern_protocol!(
    pub struct MTLComputePipelineState;

    unsafe impl ProtocolType for MTLComputePipelineState {
        #[method_id(@__retain_semantics Other label)]
        pub fn label(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[method_id(@__retain_semantics Other device)]
        pub fn device(&self) -> Id<Metal::MTLDevice, Shared>;

        #[method(maxTotalThreadsPerThreadgroup)]
        pub fn maxTotalThreadsPerThreadgroup(&self) -> NSUInteger;

        #[method(threadExecutionWidth)]
        pub fn threadExecutionWidth(&self) -> NSUInteger;

        #[method(staticThreadgroupMemoryLength)]
        pub fn staticThreadgroupMemoryLength(&self) -> NSUInteger;

        #[method(imageblockMemoryLengthForDimensions:)]
        pub unsafe fn imageblockMemoryLengthForDimensions(
            &self,
            imageblockDimensions: MTLSize,
        ) -> NSUInteger;

        #[method(supportIndirectCommandBuffers)]
        pub fn supportIndirectCommandBuffers(&self) -> bool;

        #[method_id(@__retain_semantics Other functionHandleWithFunction:)]
        pub fn functionHandleWithFunction(
            &self,
            function: &Metal::MTLFunction,
        ) -> Option<Id<Metal::MTLFunctionHandle, Shared>>;

        #[method_id(@__retain_semantics New newComputePipelineStateWithAdditionalBinaryFunctions:error:_)]
        pub fn newComputePipelineStateWithAdditionalBinaryFunctions_error(
            &self,
            functions: &Foundation::NSArray<Metal::MTLFunction>,
        ) -> Result<Id<Metal::MTLComputePipelineState, Shared>, Id<Foundation::NSError, Shared>>;

        #[method_id(@__retain_semantics New newVisibleFunctionTableWithDescriptor:)]
        pub fn newVisibleFunctionTableWithDescriptor(
            &self,
            descriptor: &Metal::MTLVisibleFunctionTableDescriptor,
        ) -> Option<Id<Metal::MTLVisibleFunctionTable, Shared>>;

        #[method_id(@__retain_semantics New newIntersectionFunctionTableWithDescriptor:)]
        pub fn newIntersectionFunctionTableWithDescriptor(
            &self,
            descriptor: &Metal::MTLIntersectionFunctionTableDescriptor,
        ) -> Option<Id<Metal::MTLIntersectionFunctionTable, Shared>>;
    }
);
