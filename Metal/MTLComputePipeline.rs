//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::Metal::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLComputePipelineReflection;

    unsafe impl ClassType for MTLComputePipelineReflection {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Metal_MTLComputePipelineReflection")]
    unsafe impl MTLComputePipelineReflection {
        #[cfg(feature = "Metal_MTLArgument")]
        #[method_id(@__retain_semantics Other arguments)]
        pub fn arguments(&self) -> Id<NSArray<MTLArgument>, Shared>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLComputePipelineDescriptor;

    unsafe impl ClassType for MTLComputePipelineDescriptor {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Metal_MTLComputePipelineDescriptor")]
    unsafe impl MTLComputePipelineDescriptor {
        #[method_id(@__retain_semantics Other label)]
        pub fn label(&self) -> Option<Id<NSString, Shared>>;

        #[method(setLabel:)]
        pub fn setLabel(&self, label: Option<&NSString>);

        #[cfg(feature = "Metal_MTLFunction")]
        #[method_id(@__retain_semantics Other computeFunction)]
        pub fn computeFunction(&self) -> Option<Id<MTLFunction, Shared>>;

        #[cfg(feature = "Metal_MTLFunction")]
        #[method(setComputeFunction:)]
        pub fn setComputeFunction(&self, computeFunction: Option<&MTLFunction>);

        #[method(threadGroupSizeIsMultipleOfThreadExecutionWidth)]
        pub fn threadGroupSizeIsMultipleOfThreadExecutionWidth(&self) -> bool;

        #[method(setThreadGroupSizeIsMultipleOfThreadExecutionWidth:)]
        pub unsafe fn setThreadGroupSizeIsMultipleOfThreadExecutionWidth(
            &self,
            threadGroupSizeIsMultipleOfThreadExecutionWidth: bool,
        );

        #[method(maxTotalThreadsPerThreadgroup)]
        pub fn maxTotalThreadsPerThreadgroup(&self) -> NSUInteger;

        #[method(setMaxTotalThreadsPerThreadgroup:)]
        pub fn setMaxTotalThreadsPerThreadgroup(&self, maxTotalThreadsPerThreadgroup: NSUInteger);

        #[cfg(feature = "Metal_MTLStageInputOutputDescriptor")]
        #[method_id(@__retain_semantics Other stageInputDescriptor)]
        pub fn stageInputDescriptor(&self) -> Option<Id<MTLStageInputOutputDescriptor, Shared>>;

        #[cfg(feature = "Metal_MTLStageInputOutputDescriptor")]
        #[method(setStageInputDescriptor:)]
        pub fn setStageInputDescriptor(
            &self,
            stageInputDescriptor: Option<&MTLStageInputOutputDescriptor>,
        );

        #[cfg(feature = "Metal_MTLPipelineBufferDescriptorArray")]
        #[method_id(@__retain_semantics Other buffers)]
        pub fn buffers(&self) -> Id<MTLPipelineBufferDescriptorArray, Shared>;

        #[method(supportIndirectCommandBuffers)]
        pub fn supportIndirectCommandBuffers(&self) -> bool;

        #[method(setSupportIndirectCommandBuffers:)]
        pub fn setSupportIndirectCommandBuffers(&self, supportIndirectCommandBuffers: bool);

        #[cfg(feature = "Metal_MTLDynamicLibrary")]
        #[method_id(@__retain_semantics Other insertLibraries)]
        pub fn insertLibraries(&self) -> Option<Id<NSArray<MTLDynamicLibrary>, Shared>>;

        #[cfg(feature = "Metal_MTLDynamicLibrary")]
        #[method(setInsertLibraries:)]
        pub fn setInsertLibraries(&self, insertLibraries: Option<&NSArray<MTLDynamicLibrary>>);

        #[cfg(feature = "Metal_MTLDynamicLibrary")]
        #[method_id(@__retain_semantics Other preloadedLibraries)]
        pub fn preloadedLibraries(&self) -> Id<NSArray<MTLDynamicLibrary>, Shared>;

        #[cfg(feature = "Metal_MTLDynamicLibrary")]
        #[method(setPreloadedLibraries:)]
        pub fn setPreloadedLibraries(&self, preloadedLibraries: &NSArray<MTLDynamicLibrary>);

        #[cfg(feature = "Metal_MTLBinaryArchive")]
        #[method_id(@__retain_semantics Other binaryArchives)]
        pub fn binaryArchives(&self) -> Option<Id<NSArray<MTLBinaryArchive>, Shared>>;

        #[cfg(feature = "Metal_MTLBinaryArchive")]
        #[method(setBinaryArchives:)]
        pub fn setBinaryArchives(&self, binaryArchives: Option<&NSArray<MTLBinaryArchive>>);

        #[method(reset)]
        pub fn reset(&self);

        #[cfg(feature = "Metal_MTLLinkedFunctions")]
        #[method_id(@__retain_semantics Other linkedFunctions)]
        pub fn linkedFunctions(&self) -> Option<Id<MTLLinkedFunctions, Shared>>;

        #[cfg(feature = "Metal_MTLLinkedFunctions")]
        #[method(setLinkedFunctions:)]
        pub fn setLinkedFunctions(&self, linkedFunctions: Option<&MTLLinkedFunctions>);

        #[method(supportAddingBinaryFunctions)]
        pub fn supportAddingBinaryFunctions(&self) -> bool;

        #[method(setSupportAddingBinaryFunctions:)]
        pub fn setSupportAddingBinaryFunctions(&self, supportAddingBinaryFunctions: bool);

        #[method(maxCallStackDepth)]
        pub fn maxCallStackDepth(&self) -> NSUInteger;

        #[method(setMaxCallStackDepth:)]
        pub fn setMaxCallStackDepth(&self, maxCallStackDepth: NSUInteger);
    }
);

extern_protocol!(
    pub struct MTLComputePipelineState;

    unsafe impl ProtocolType for MTLComputePipelineState {
        #[method_id(@__retain_semantics Other label)]
        pub fn label(&self) -> Option<Id<NSString, Shared>>;

        #[method_id(@__retain_semantics Other device)]
        pub fn device(&self) -> Id<MTLDevice, Shared>;

        #[method(maxTotalThreadsPerThreadgroup)]
        pub fn maxTotalThreadsPerThreadgroup(&self) -> NSUInteger;

        #[method(threadExecutionWidth)]
        pub fn threadExecutionWidth(&self) -> NSUInteger;

        #[method(staticThreadgroupMemoryLength)]
        pub fn staticThreadgroupMemoryLength(&self) -> NSUInteger;

        #[method(imageblockMemoryLengthForDimensions:)]
        pub unsafe fn imageblockMemoryLengthForDimensions(
            &self,
            imageblockDimensions: MTLSize,
        ) -> NSUInteger;

        #[method(supportIndirectCommandBuffers)]
        pub fn supportIndirectCommandBuffers(&self) -> bool;

        #[method_id(@__retain_semantics Other functionHandleWithFunction:)]
        pub fn functionHandleWithFunction(
            &self,
            function: &MTLFunction,
        ) -> Option<Id<MTLFunctionHandle, Shared>>;

        #[method_id(@__retain_semantics New newComputePipelineStateWithAdditionalBinaryFunctions:error:_)]
        pub fn newComputePipelineStateWithAdditionalBinaryFunctions_error(
            &self,
            functions: &NSArray<MTLFunction>,
        ) -> Result<Id<MTLComputePipelineState, Shared>, Id<NSError, Shared>>;

        #[method_id(@__retain_semantics New newVisibleFunctionTableWithDescriptor:)]
        pub fn newVisibleFunctionTableWithDescriptor(
            &self,
            descriptor: &MTLVisibleFunctionTableDescriptor,
        ) -> Option<Id<MTLVisibleFunctionTable, Shared>>;

        #[method_id(@__retain_semantics New newIntersectionFunctionTableWithDescriptor:)]
        pub fn newIntersectionFunctionTableWithDescriptor(
            &self,
            descriptor: &MTLIntersectionFunctionTableDescriptor,
        ) -> Option<Id<MTLIntersectionFunctionTable, Shared>>;
    }
);
