//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation;
use crate::Metal;

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum MTLCommandBufferStatus {
        MTLCommandBufferStatusNotEnqueued = 0,
        MTLCommandBufferStatusEnqueued = 1,
        MTLCommandBufferStatusCommitted = 2,
        MTLCommandBufferStatusScheduled = 3,
        MTLCommandBufferStatusCompleted = 4,
        MTLCommandBufferStatusError = 5,
    }
);

extern_static!(MTLCommandBufferErrorDomain: &'static Foundation::NSErrorDomain);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum MTLCommandBufferError {
        MTLCommandBufferErrorNone = 0,
        MTLCommandBufferErrorInternal = 1,
        MTLCommandBufferErrorTimeout = 2,
        MTLCommandBufferErrorPageFault = 3,
        MTLCommandBufferErrorBlacklisted = 4,
        MTLCommandBufferErrorAccessRevoked = 4,
        MTLCommandBufferErrorNotPermitted = 7,
        MTLCommandBufferErrorOutOfMemory = 8,
        MTLCommandBufferErrorInvalidResource = 9,
        MTLCommandBufferErrorMemoryless = 10,
        MTLCommandBufferErrorDeviceRemoved = 11,
        MTLCommandBufferErrorStackOverflow = 12,
    }
);

extern_static!(MTLCommandBufferEncoderInfoErrorKey: &'static Foundation::NSErrorUserInfoKey);

ns_options!(
    #[underlying(NSUInteger)]
    pub enum MTLCommandBufferErrorOption {
        MTLCommandBufferErrorOptionNone = 0,
        MTLCommandBufferErrorOptionEncoderExecutionStatus = 1 << 0,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum MTLCommandEncoderErrorState {
        MTLCommandEncoderErrorStateUnknown = 0,
        MTLCommandEncoderErrorStateCompleted = 1,
        MTLCommandEncoderErrorStateAffected = 2,
        MTLCommandEncoderErrorStatePending = 3,
        MTLCommandEncoderErrorStateFaulted = 4,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLCommandBufferDescriptor;

    unsafe impl ClassType for MTLCommandBufferDescriptor {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Metal_MTLCommandBufferDescriptor")]
    unsafe impl MTLCommandBufferDescriptor {
        #[method(retainedReferences)]
        pub unsafe fn retainedReferences(&self) -> bool;

        #[method(setRetainedReferences:)]
        pub unsafe fn setRetainedReferences(&self, retainedReferences: bool);

        #[method(errorOptions)]
        pub unsafe fn errorOptions(&self) -> Metal::MTLCommandBufferErrorOption;

        #[method(setErrorOptions:)]
        pub unsafe fn setErrorOptions(&self, errorOptions: Metal::MTLCommandBufferErrorOption);
    }
);

extern_protocol!(
    pub struct MTLCommandBufferEncoderInfo;

    unsafe impl ProtocolType for MTLCommandBufferEncoderInfo {
        #[method_id(@__retain_semantics Other label)]
        pub unsafe fn label(&self) -> Id<Foundation::NSString, Shared>;

        #[method_id(@__retain_semantics Other debugSignposts)]
        pub unsafe fn debugSignposts(
            &self,
        ) -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[method(errorState)]
        pub unsafe fn errorState(&self) -> Metal::MTLCommandEncoderErrorState;
    }
);

pub type MTLCommandBufferHandler = *mut Block<(NonNull<Metal::MTLCommandBuffer>,), ()>;

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum MTLDispatchType {
        MTLDispatchTypeSerial = 0,
        MTLDispatchTypeConcurrent = 1,
    }
);

extern_protocol!(
    pub struct MTLCommandBuffer;

    unsafe impl ProtocolType for MTLCommandBuffer {
        #[method_id(@__retain_semantics Other device)]
        pub unsafe fn device(&self) -> Id<Metal::MTLDevice, Shared>;

        #[method_id(@__retain_semantics Other commandQueue)]
        pub unsafe fn commandQueue(&self) -> Id<Metal::MTLCommandQueue, Shared>;

        #[method(retainedReferences)]
        pub unsafe fn retainedReferences(&self) -> bool;

        #[method(errorOptions)]
        pub unsafe fn errorOptions(&self) -> Metal::MTLCommandBufferErrorOption;

        #[method_id(@__retain_semantics Other label)]
        pub fn label(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[method(setLabel:)]
        pub fn setLabel(&self, label: Option<&Foundation::NSString>);

        #[method(kernelStartTime)]
        pub unsafe fn kernelStartTime(&self) -> CoreFoundation::CFTimeInterval;

        #[method(kernelEndTime)]
        pub unsafe fn kernelEndTime(&self) -> CoreFoundation::CFTimeInterval;

        #[method_id(@__retain_semantics Other logs)]
        pub unsafe fn logs(&self) -> Id<Metal::MTLLogContainer, Shared>;

        #[method(GPUStartTime)]
        pub unsafe fn GPUStartTime(&self) -> CoreFoundation::CFTimeInterval;

        #[method(GPUEndTime)]
        pub unsafe fn GPUEndTime(&self) -> CoreFoundation::CFTimeInterval;

        #[method(enqueue)]
        pub fn enqueue(&self);

        #[method(commit)]
        pub fn commit(&self);

        #[method(addScheduledHandler:)]
        pub unsafe fn addScheduledHandler(&self, block: Metal::MTLCommandBufferHandler);

        #[method(presentDrawable:)]
        pub fn presentDrawable(&self, drawable: &Metal::MTLDrawable);

        #[method(presentDrawable:atTime:)]
        pub unsafe fn presentDrawable_atTime(
            &self,
            drawable: &Metal::MTLDrawable,
            presentationTime: CoreFoundation::CFTimeInterval,
        );

        #[method(presentDrawable:afterMinimumDuration:)]
        pub unsafe fn presentDrawable_afterMinimumDuration(
            &self,
            drawable: &Metal::MTLDrawable,
            duration: CoreFoundation::CFTimeInterval,
        );

        #[method(waitUntilScheduled)]
        pub fn waitUntilScheduled(&self);

        #[method(addCompletedHandler:)]
        pub unsafe fn addCompletedHandler(&self, block: Metal::MTLCommandBufferHandler);

        #[method(waitUntilCompleted)]
        pub unsafe fn waitUntilCompleted(&self);

        #[method(status)]
        pub fn status(&self) -> Metal::MTLCommandBufferStatus;

        #[method_id(@__retain_semantics Other error)]
        pub unsafe fn error(&self) -> Option<Id<Foundation::NSError, Shared>>;

        #[method_id(@__retain_semantics Other blitCommandEncoder)]
        pub fn blitCommandEncoder(&self) -> Option<Id<Metal::MTLBlitCommandEncoder, Shared>>;

        #[method_id(@__retain_semantics Other renderCommandEncoderWithDescriptor:)]
        pub fn renderCommandEncoderWithDescriptor(
            &self,
            renderPassDescriptor: &Metal::MTLRenderPassDescriptor,
        ) -> Option<Id<Metal::MTLRenderCommandEncoder, Shared>>;

        #[method_id(@__retain_semantics Other computeCommandEncoderWithDescriptor:)]
        pub unsafe fn computeCommandEncoderWithDescriptor(
            &self,
            computePassDescriptor: &Metal::MTLComputePassDescriptor,
        ) -> Option<Id<Metal::MTLComputeCommandEncoder, Shared>>;

        #[method_id(@__retain_semantics Other blitCommandEncoderWithDescriptor:)]
        pub unsafe fn blitCommandEncoderWithDescriptor(
            &self,
            blitPassDescriptor: &Metal::MTLBlitPassDescriptor,
        ) -> Option<Id<Metal::MTLBlitCommandEncoder, Shared>>;

        #[method_id(@__retain_semantics Other computeCommandEncoder)]
        pub fn computeCommandEncoder(&self) -> Option<Id<Metal::MTLComputeCommandEncoder, Shared>>;

        #[method_id(@__retain_semantics Other computeCommandEncoderWithDispatchType:)]
        pub fn computeCommandEncoderWithDispatchType(
            &self,
            dispatchType: Metal::MTLDispatchType,
        ) -> Option<Id<Metal::MTLComputeCommandEncoder, Shared>>;

        #[method(encodeWaitForEvent:value:)]
        pub fn encodeWaitForEvent_value(&self, event: &Metal::MTLEvent, value: u64);

        #[method(encodeSignalEvent:value:)]
        pub fn encodeSignalEvent_value(&self, event: &Metal::MTLEvent, value: u64);

        #[method_id(@__retain_semantics Other parallelRenderCommandEncoderWithDescriptor:)]
        pub fn parallelRenderCommandEncoderWithDescriptor(
            &self,
            renderPassDescriptor: &Metal::MTLRenderPassDescriptor,
        ) -> Option<Id<Metal::MTLParallelRenderCommandEncoder, Shared>>;

        #[method_id(@__retain_semantics Other resourceStateCommandEncoder)]
        pub unsafe fn resourceStateCommandEncoder(
            &self,
        ) -> Option<Id<Metal::MTLResourceStateCommandEncoder, Shared>>;

        #[method_id(@__retain_semantics Other resourceStateCommandEncoderWithDescriptor:)]
        pub unsafe fn resourceStateCommandEncoderWithDescriptor(
            &self,
            resourceStatePassDescriptor: &Metal::MTLResourceStatePassDescriptor,
        ) -> Option<Id<Metal::MTLResourceStateCommandEncoder, Shared>>;

        #[method_id(@__retain_semantics Other accelerationStructureCommandEncoder)]
        pub fn accelerationStructureCommandEncoder(
            &self,
        ) -> Option<Id<Metal::MTLAccelerationStructureCommandEncoder, Shared>>;

        #[method(pushDebugGroup:)]
        pub fn pushDebugGroup(&self, string: &Foundation::NSString);

        #[method(popDebugGroup)]
        pub fn popDebugGroup(&self);
    }
);
