//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation;
use crate::Metal;

extern_static!(MTLCaptureErrorDomain: &'static Foundation::NSErrorDomain);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum MTLCaptureError {
        MTLCaptureErrorNotSupported = 1,
        MTLCaptureErrorAlreadyCapturing = 2,
        MTLCaptureErrorInvalidDescriptor = 3,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum MTLCaptureDestination {
        MTLCaptureDestinationDeveloperTools = 1,
        MTLCaptureDestinationGPUTraceDocument = 2,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLCaptureDescriptor;

    unsafe impl ClassType for MTLCaptureDescriptor {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Metal_MTLCaptureDescriptor")]
    unsafe impl MTLCaptureDescriptor {
        #[method_id(@__retain_semantics Other captureObject)]
        pub unsafe fn captureObject(&self) -> Option<Id<Object, Shared>>;

        #[method(setCaptureObject:)]
        pub unsafe fn setCaptureObject(&self, captureObject: Option<&Object>);

        #[method(destination)]
        pub fn destination(&self) -> MTLCaptureDestination;

        #[method(setDestination:)]
        pub fn setDestination(&self, destination: MTLCaptureDestination);

        #[cfg(feature = "Foundation_NSURL")]
        #[method_id(@__retain_semantics Other outputURL)]
        pub fn outputURL(&self) -> Option<Id<Foundation::NSURL, Shared>>;

        #[cfg(feature = "Foundation_NSURL")]
        #[method(setOutputURL:)]
        pub fn setOutputURL(&self, outputURL: Option<&Foundation::NSURL>);
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLCaptureManager;

    unsafe impl ClassType for MTLCaptureManager {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Metal_MTLCaptureManager")]
    unsafe impl MTLCaptureManager {
        #[method_id(@__retain_semantics Other sharedCaptureManager)]
        pub unsafe fn sharedCaptureManager() -> Id<Metal::MTLCaptureManager, Shared>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self, Shared>;

        #[method_id(@__retain_semantics New newCaptureScopeWithDevice:)]
        pub fn newCaptureScopeWithDevice(
            &self,
            device: &Metal::MTLDevice,
        ) -> Id<Metal::MTLCaptureScope, Shared>;

        #[method_id(@__retain_semantics New newCaptureScopeWithCommandQueue:)]
        pub fn newCaptureScopeWithCommandQueue(
            &self,
            commandQueue: &Metal::MTLCommandQueue,
        ) -> Id<Metal::MTLCaptureScope, Shared>;

        #[method(supportsDestination:)]
        pub fn supportsDestination(&self, destination: MTLCaptureDestination) -> bool;

        #[cfg(all(feature = "Foundation_NSError", feature = "Metal_MTLCaptureDescriptor"))]
        #[method(startCaptureWithDescriptor:error:_)]
        pub fn startCaptureWithDescriptor_error(
            &self,
            descriptor: &Metal::MTLCaptureDescriptor,
        ) -> Result<(), Id<Foundation::NSError, Shared>>;

        #[method(startCaptureWithDevice:)]
        pub fn startCaptureWithDevice(&self, device: &Metal::MTLDevice);

        #[method(startCaptureWithCommandQueue:)]
        pub fn startCaptureWithCommandQueue(&self, commandQueue: &Metal::MTLCommandQueue);

        #[method(startCaptureWithScope:)]
        pub fn startCaptureWithScope(&self, captureScope: &Metal::MTLCaptureScope);

        #[method(stopCapture)]
        pub fn stopCapture(&self);

        #[method_id(@__retain_semantics Other defaultCaptureScope)]
        pub fn defaultCaptureScope(&self) -> Option<Id<Metal::MTLCaptureScope, Shared>>;

        #[method(setDefaultCaptureScope:)]
        pub fn setDefaultCaptureScope(&self, defaultCaptureScope: Option<&Metal::MTLCaptureScope>);

        #[method(isCapturing)]
        pub fn isCapturing(&self) -> bool;
    }
);
