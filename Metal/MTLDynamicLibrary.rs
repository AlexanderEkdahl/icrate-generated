//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::Metal::*;

extern_static!(MTLDynamicLibraryDomain: &'static NSErrorDomain);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum MTLDynamicLibraryError {
        MTLDynamicLibraryErrorNone = 0,
        MTLDynamicLibraryErrorInvalidFile = 1,
        MTLDynamicLibraryErrorCompilationFailure = 2,
        MTLDynamicLibraryErrorUnresolvedInstallName = 3,
        MTLDynamicLibraryErrorDependencyLoadFailure = 4,
        MTLDynamicLibraryErrorUnsupported = 5,
    }
);

extern_protocol!(
    pub struct MTLDynamicLibrary;

    unsafe impl ProtocolType for MTLDynamicLibrary {
        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other label)]
        pub fn label(&self) -> Option<Id<NSString, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setLabel:)]
        pub fn setLabel(&self, label: Option<&NSString>);

        #[method_id(@__retain_semantics Other device)]
        pub fn device(&self) -> Id<MTLDevice, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other installName)]
        pub fn installName(&self) -> Id<NSString, Shared>;

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[method(serializeToURL:error:_)]
        pub fn serializeToURL_error(&self, url: &NSURL) -> Result<(), Id<NSError, Shared>>;
    }
);
