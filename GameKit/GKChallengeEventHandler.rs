//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;
use crate::GameKit::*;

extern_protocol!(
    #[deprecated = "You should instead implement the GKChallengeListener protocol and register a listener with GKLocalPlayer."]
    pub struct GKChallengeEventHandlerDelegate;

    unsafe impl ProtocolType for GKChallengeEventHandlerDelegate {
        #[cfg(feature = "GameKit_GKChallenge")]
        #[optional]
        #[method(localPlayerDidSelectChallenge:)]
        pub unsafe fn localPlayerDidSelectChallenge(&self, challenge: Option<&GKChallenge>);

        #[cfg(feature = "GameKit_GKChallenge")]
        #[optional]
        #[method(shouldShowBannerForLocallyReceivedChallenge:)]
        pub unsafe fn shouldShowBannerForLocallyReceivedChallenge(
            &self,
            challenge: Option<&GKChallenge>,
        ) -> bool;

        #[cfg(feature = "GameKit_GKChallenge")]
        #[optional]
        #[method(localPlayerDidReceiveChallenge:)]
        pub unsafe fn localPlayerDidReceiveChallenge(&self, challenge: Option<&GKChallenge>);

        #[cfg(feature = "GameKit_GKChallenge")]
        #[optional]
        #[method(shouldShowBannerForLocallyCompletedChallenge:)]
        pub unsafe fn shouldShowBannerForLocallyCompletedChallenge(
            &self,
            challenge: Option<&GKChallenge>,
        ) -> bool;

        #[cfg(feature = "GameKit_GKChallenge")]
        #[optional]
        #[method(localPlayerDidCompleteChallenge:)]
        pub unsafe fn localPlayerDidCompleteChallenge(&self, challenge: Option<&GKChallenge>);

        #[cfg(feature = "GameKit_GKChallenge")]
        #[optional]
        #[method(shouldShowBannerForRemotelyCompletedChallenge:)]
        pub unsafe fn shouldShowBannerForRemotelyCompletedChallenge(
            &self,
            challenge: Option<&GKChallenge>,
        ) -> bool;

        #[cfg(feature = "GameKit_GKChallenge")]
        #[optional]
        #[method(remotePlayerDidCompleteChallenge:)]
        pub unsafe fn remotePlayerDidCompleteChallenge(&self, challenge: Option<&GKChallenge>);
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "GameKit_GKChallengeEventHandler")]
    #[deprecated = "You should instead implement the GKChallengeListener protocol and register a listener with GKLocalPlayer."]
    pub struct GKChallengeEventHandler;

    #[cfg(feature = "GameKit_GKChallengeEventHandler")]
    unsafe impl ClassType for GKChallengeEventHandler {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "GameKit_GKChallengeEventHandler")]
    unsafe impl GKChallengeEventHandler {
        #[deprecated]
        #[method_id(@__retain_semantics Other challengeEventHandler)]
        pub unsafe fn challengeEventHandler() -> Option<Id<GKChallengeEventHandler, Shared>>;

        #[deprecated]
        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(&self) -> Option<Id<GKChallengeEventHandlerDelegate, Shared>>;

        #[deprecated]
        #[method(setDelegate:)]
        pub unsafe fn setDelegate(&self, delegate: Option<&GKChallengeEventHandlerDelegate>);
    }
);
