//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreAnimation;
use crate::Foundation;

typed_enum!(
    pub type CAEmitterLayerEmitterShape = Foundation::NSString;
);

typed_enum!(
    pub type CAEmitterLayerEmitterMode = Foundation::NSString;
);

typed_enum!(
    pub type CAEmitterLayerRenderMode = Foundation::NSString;
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CAEmitterLayer;

    unsafe impl ClassType for CAEmitterLayer {
        #[inherits(NSObject)]
        type Super = CoreAnimation::CALayer;
    }
);

extern_methods!(
    #[cfg(feature = "CoreAnimation_CAEmitterLayer")]
    unsafe impl CAEmitterLayer {
        #[cfg(all(
            feature = "CoreAnimation_CAEmitterCell",
            feature = "Foundation_NSArray"
        ))]
        #[method_id(@__retain_semantics Other emitterCells)]
        pub unsafe fn emitterCells(
            &self,
        ) -> Option<Id<Foundation::NSArray<CoreAnimation::CAEmitterCell>, Shared>>;

        #[cfg(all(
            feature = "CoreAnimation_CAEmitterCell",
            feature = "Foundation_NSArray"
        ))]
        #[method(setEmitterCells:)]
        pub unsafe fn setEmitterCells(
            &self,
            emitterCells: Option<&Foundation::NSArray<CoreAnimation::CAEmitterCell>>,
        );

        #[method(birthRate)]
        pub unsafe fn birthRate(&self) -> c_float;

        #[method(setBirthRate:)]
        pub unsafe fn setBirthRate(&self, birthRate: c_float);

        #[method(lifetime)]
        pub unsafe fn lifetime(&self) -> c_float;

        #[method(setLifetime:)]
        pub unsafe fn setLifetime(&self, lifetime: c_float);

        #[method(emitterPosition)]
        pub unsafe fn emitterPosition(&self) -> CGPoint;

        #[method(setEmitterPosition:)]
        pub unsafe fn setEmitterPosition(&self, emitterPosition: CGPoint);

        #[method(emitterZPosition)]
        pub unsafe fn emitterZPosition(&self) -> CGFloat;

        #[method(setEmitterZPosition:)]
        pub unsafe fn setEmitterZPosition(&self, emitterZPosition: CGFloat);

        #[method(emitterSize)]
        pub unsafe fn emitterSize(&self) -> CGSize;

        #[method(setEmitterSize:)]
        pub unsafe fn setEmitterSize(&self, emitterSize: CGSize);

        #[method(emitterDepth)]
        pub unsafe fn emitterDepth(&self) -> CGFloat;

        #[method(setEmitterDepth:)]
        pub unsafe fn setEmitterDepth(&self, emitterDepth: CGFloat);

        #[method_id(@__retain_semantics Other emitterShape)]
        pub unsafe fn emitterShape(&self) -> Id<CoreAnimation::CAEmitterLayerEmitterShape, Shared>;

        #[method(setEmitterShape:)]
        pub unsafe fn setEmitterShape(
            &self,
            emitterShape: &CoreAnimation::CAEmitterLayerEmitterShape,
        );

        #[method_id(@__retain_semantics Other emitterMode)]
        pub unsafe fn emitterMode(&self) -> Id<CoreAnimation::CAEmitterLayerEmitterMode, Shared>;

        #[method(setEmitterMode:)]
        pub unsafe fn setEmitterMode(&self, emitterMode: &CoreAnimation::CAEmitterLayerEmitterMode);

        #[method_id(@__retain_semantics Other renderMode)]
        pub unsafe fn renderMode(&self) -> Id<CoreAnimation::CAEmitterLayerRenderMode, Shared>;

        #[method(setRenderMode:)]
        pub unsafe fn setRenderMode(&self, renderMode: &CoreAnimation::CAEmitterLayerRenderMode);

        #[method(preservesDepth)]
        pub unsafe fn preservesDepth(&self) -> bool;

        #[method(setPreservesDepth:)]
        pub unsafe fn setPreservesDepth(&self, preservesDepth: bool);

        #[method(velocity)]
        pub unsafe fn velocity(&self) -> c_float;

        #[method(setVelocity:)]
        pub unsafe fn setVelocity(&self, velocity: c_float);

        #[method(scale)]
        pub unsafe fn scale(&self) -> c_float;

        #[method(setScale:)]
        pub unsafe fn setScale(&self, scale: c_float);

        #[method(spin)]
        pub unsafe fn spin(&self) -> c_float;

        #[method(setSpin:)]
        pub unsafe fn setSpin(&self, spin: c_float);

        #[method(seed)]
        pub unsafe fn seed(&self) -> c_uint;

        #[method(setSeed:)]
        pub unsafe fn setSeed(&self, seed: c_uint);
    }
);

extern_static!(kCAEmitterLayerPoint: &'static CoreAnimation::CAEmitterLayerEmitterShape);

extern_static!(kCAEmitterLayerLine: &'static CoreAnimation::CAEmitterLayerEmitterShape);

extern_static!(kCAEmitterLayerRectangle: &'static CoreAnimation::CAEmitterLayerEmitterShape);

extern_static!(kCAEmitterLayerCuboid: &'static CoreAnimation::CAEmitterLayerEmitterShape);

extern_static!(kCAEmitterLayerCircle: &'static CoreAnimation::CAEmitterLayerEmitterShape);

extern_static!(kCAEmitterLayerSphere: &'static CoreAnimation::CAEmitterLayerEmitterShape);

extern_static!(kCAEmitterLayerPoints: &'static CoreAnimation::CAEmitterLayerEmitterMode);

extern_static!(kCAEmitterLayerOutline: &'static CoreAnimation::CAEmitterLayerEmitterMode);

extern_static!(kCAEmitterLayerSurface: &'static CoreAnimation::CAEmitterLayerEmitterMode);

extern_static!(kCAEmitterLayerVolume: &'static CoreAnimation::CAEmitterLayerEmitterMode);

extern_static!(kCAEmitterLayerUnordered: &'static CoreAnimation::CAEmitterLayerRenderMode);

extern_static!(kCAEmitterLayerOldestFirst: &'static CoreAnimation::CAEmitterLayerRenderMode);

extern_static!(kCAEmitterLayerOldestLast: &'static CoreAnimation::CAEmitterLayerRenderMode);

extern_static!(kCAEmitterLayerBackToFront: &'static CoreAnimation::CAEmitterLayerRenderMode);

extern_static!(kCAEmitterLayerAdditive: &'static CoreAnimation::CAEmitterLayerRenderMode);

extern_methods!(
    /// Methods declared on superclass `CALayer`
    #[cfg(feature = "CoreAnimation_CAEmitterLayer")]
    unsafe impl CoreAnimation::CAEmitterLayer {
        #[method_id(@__retain_semantics Other layer)]
        pub unsafe fn layer() -> Id<Self, Shared>;

        #[method_id(@__retain_semantics Init initWithLayer:)]
        pub unsafe fn initWithLayer(
            this: Option<Allocated<Self>>,
            layer: &Object,
        ) -> Id<Self, Shared>;
    }
);
