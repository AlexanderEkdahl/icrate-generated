//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation;

extern_static!(NSGenericException: &'static Foundation::NSExceptionName);

extern_static!(NSRangeException: &'static Foundation::NSExceptionName);

extern_static!(NSInvalidArgumentException: &'static Foundation::NSExceptionName);

extern_static!(NSInternalInconsistencyException: &'static Foundation::NSExceptionName);

extern_static!(NSMallocException: &'static Foundation::NSExceptionName);

extern_static!(NSObjectInaccessibleException: &'static Foundation::NSExceptionName);

extern_static!(NSObjectNotAvailableException: &'static Foundation::NSExceptionName);

extern_static!(NSDestinationInvalidException: &'static Foundation::NSExceptionName);

extern_static!(NSPortTimeoutException: &'static Foundation::NSExceptionName);

extern_static!(NSInvalidSendPortException: &'static Foundation::NSExceptionName);

extern_static!(NSInvalidReceivePortException: &'static Foundation::NSExceptionName);

extern_static!(NSPortSendException: &'static Foundation::NSExceptionName);

extern_static!(NSPortReceiveException: &'static Foundation::NSExceptionName);

extern_static!(NSOldStyleException: &'static Foundation::NSExceptionName);

extern_static!(NSInconsistentArchiveException: &'static Foundation::NSExceptionName);

extern_class!(
    #[derive(PartialEq, Eq, Hash)]
    pub struct NSException;

    unsafe impl ClassType for NSException {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Foundation_NSException")]
    unsafe impl NSException {
        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other exceptionWithName:reason:userInfo:)]
        pub unsafe fn exceptionWithName_reason_userInfo(
            name: &Foundation::NSExceptionName,
            reason: Option<&Foundation::NSString>,
            userInfo: Option<&Foundation::NSDictionary>,
        ) -> Id<Foundation::NSException, Shared>;

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Init initWithName:reason:userInfo:)]
        pub unsafe fn initWithName_reason_userInfo(
            this: Option<Allocated<Self>>,
            aName: &Foundation::NSExceptionName,
            aReason: Option<&Foundation::NSString>,
            aUserInfo: Option<&Foundation::NSDictionary>,
        ) -> Id<Self, Shared>;

        #[method_id(@__retain_semantics Other name)]
        pub fn name(&self) -> Id<Foundation::NSExceptionName, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other reason)]
        pub fn reason(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method_id(@__retain_semantics Other userInfo)]
        pub fn userInfo(&self) -> Option<Id<Foundation::NSDictionary, Shared>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
        #[method_id(@__retain_semantics Other callStackReturnAddresses)]
        pub unsafe fn callStackReturnAddresses(
            &self,
        ) -> Id<Foundation::NSArray<Foundation::NSNumber>, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other callStackSymbols)]
        pub unsafe fn callStackSymbols(
            &self,
        ) -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;
    }
);

extern_methods!(
    /// NSExceptionRaisingConveniences
    #[cfg(feature = "Foundation_NSException")]
    unsafe impl NSException {}
);

pub type NSUncaughtExceptionHandler = TodoFunction;

extern_fn!(
    pub unsafe fn NSGetUncaughtExceptionHandler() -> *mut NSUncaughtExceptionHandler;
);

extern_fn!(
    pub unsafe fn NSSetUncaughtExceptionHandler(_: *mut NSUncaughtExceptionHandler);
);

extern_static!(NSAssertionHandlerKey: &'static Foundation::NSString);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSAssertionHandler;

    unsafe impl ClassType for NSAssertionHandler {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Foundation_NSAssertionHandler")]
    unsafe impl NSAssertionHandler {
        #[method_id(@__retain_semantics Other currentHandler)]
        pub unsafe fn currentHandler() -> Id<Foundation::NSAssertionHandler, Shared>;
    }
);
