//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation;

pub type NSErrorDomain = Foundation::NSString;

extern_static!(NSCocoaErrorDomain: &'static Foundation::NSErrorDomain);

extern_static!(NSPOSIXErrorDomain: &'static Foundation::NSErrorDomain);

extern_static!(NSOSStatusErrorDomain: &'static Foundation::NSErrorDomain);

extern_static!(NSMachErrorDomain: &'static Foundation::NSErrorDomain);

pub type NSErrorUserInfoKey = Foundation::NSString;

extern_static!(NSUnderlyingErrorKey: &'static Foundation::NSErrorUserInfoKey);

extern_static!(NSMultipleUnderlyingErrorsKey: &'static Foundation::NSErrorUserInfoKey);

extern_static!(NSLocalizedDescriptionKey: &'static Foundation::NSErrorUserInfoKey);

extern_static!(NSLocalizedFailureReasonErrorKey: &'static Foundation::NSErrorUserInfoKey);

extern_static!(NSLocalizedRecoverySuggestionErrorKey: &'static Foundation::NSErrorUserInfoKey);

extern_static!(NSLocalizedRecoveryOptionsErrorKey: &'static Foundation::NSErrorUserInfoKey);

extern_static!(NSRecoveryAttempterErrorKey: &'static Foundation::NSErrorUserInfoKey);

extern_static!(NSHelpAnchorErrorKey: &'static Foundation::NSErrorUserInfoKey);

extern_static!(NSDebugDescriptionErrorKey: &'static Foundation::NSErrorUserInfoKey);

extern_static!(NSLocalizedFailureErrorKey: &'static Foundation::NSErrorUserInfoKey);

extern_static!(NSStringEncodingErrorKey: &'static Foundation::NSErrorUserInfoKey);

extern_static!(NSURLErrorKey: &'static Foundation::NSErrorUserInfoKey);

extern_static!(NSFilePathErrorKey: &'static Foundation::NSErrorUserInfoKey);

extern_class!(
    #[derive(PartialEq, Eq, Hash)]
    pub struct NSError;

    unsafe impl ClassType for NSError {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Foundation_NSError")]
    unsafe impl NSError {
        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSErrorDomain",
            feature = "Foundation_NSErrorUserInfoKey"
        ))]
        #[method_id(@__retain_semantics Init initWithDomain:code:userInfo:)]
        pub unsafe fn initWithDomain_code_userInfo(
            this: Option<Allocated<Self>>,
            domain: &Foundation::NSErrorDomain,
            code: NSInteger,
            dict: Option<&Foundation::NSDictionary<Foundation::NSErrorUserInfoKey, Object>>,
        ) -> Id<Self, Shared>;

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSErrorDomain",
            feature = "Foundation_NSErrorUserInfoKey"
        ))]
        #[method_id(@__retain_semantics Other errorWithDomain:code:userInfo:)]
        pub unsafe fn errorWithDomain_code_userInfo(
            domain: &Foundation::NSErrorDomain,
            code: NSInteger,
            dict: Option<&Foundation::NSDictionary<Foundation::NSErrorUserInfoKey, Object>>,
        ) -> Id<Self, Shared>;

        #[cfg(feature = "Foundation_NSErrorDomain")]
        #[method_id(@__retain_semantics Other domain)]
        pub fn domain(&self) -> Id<Foundation::NSErrorDomain, Shared>;

        #[method(code)]
        pub fn code(&self) -> NSInteger;

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSErrorUserInfoKey"
        ))]
        #[method_id(@__retain_semantics Other userInfo)]
        pub fn userInfo(
            &self,
        ) -> Id<Foundation::NSDictionary<Foundation::NSErrorUserInfoKey, Object>, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other localizedDescription)]
        pub fn localizedDescription(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other localizedFailureReason)]
        pub unsafe fn localizedFailureReason(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other localizedRecoverySuggestion)]
        pub unsafe fn localizedRecoverySuggestion(
            &self,
        ) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other localizedRecoveryOptions)]
        pub unsafe fn localizedRecoveryOptions(
            &self,
        ) -> Option<Id<Foundation::NSArray<Foundation::NSString>, Shared>>;

        #[method_id(@__retain_semantics Other recoveryAttempter)]
        pub unsafe fn recoveryAttempter(&self) -> Option<Id<Object, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other helpAnchor)]
        pub unsafe fn helpAnchor(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other underlyingErrors)]
        pub unsafe fn underlyingErrors(
            &self,
        ) -> Id<Foundation::NSArray<Foundation::NSError>, Shared>;

        #[cfg(all(
            feature = "Foundation_NSErrorDomain",
            feature = "Foundation_NSErrorUserInfoKey"
        ))]
        #[method(setUserInfoValueProviderForDomain:provider:)]
        pub unsafe fn setUserInfoValueProviderForDomain_provider(
            errorDomain: &Foundation::NSErrorDomain,
            provider: Option<
                &Block<
                    (
                        NonNull<Foundation::NSError>,
                        NonNull<Foundation::NSErrorUserInfoKey>,
                    ),
                    *mut Object,
                >,
            >,
        );

        #[cfg(all(
            feature = "Foundation_NSErrorDomain",
            feature = "Foundation_NSErrorUserInfoKey"
        ))]
        #[method(userInfoValueProviderForDomain:)]
        pub unsafe fn userInfoValueProviderForDomain(
            errorDomain: &Foundation::NSErrorDomain,
        ) -> *mut Block<
            (
                NonNull<Foundation::NSError>,
                NonNull<Foundation::NSErrorUserInfoKey>,
            ),
            *mut Object,
        >;
    }
);
