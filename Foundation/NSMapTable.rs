//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation;

extern_static!(NSMapTableStrongMemory: NSPointerFunctionsOptions = NSPointerFunctionsStrongMemory);

extern_static!(
    NSMapTableZeroingWeakMemory: NSPointerFunctionsOptions = NSPointerFunctionsZeroingWeakMemory
);

extern_static!(NSMapTableCopyIn: NSPointerFunctionsOptions = NSPointerFunctionsCopyIn);

extern_static!(
    NSMapTableObjectPointerPersonality: NSPointerFunctionsOptions =
        NSPointerFunctionsObjectPointerPersonality
);

extern_static!(NSMapTableWeakMemory: NSPointerFunctionsOptions = NSPointerFunctionsWeakMemory);

pub type NSMapTableOptions = NSUInteger;

__inner_extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSMapTable<
        KeyType: Message = Object,
        ObjectType: Message = Object,
        KeyTypeOwnership: Ownership = Shared,
        ObjectTypeOwnership: Ownership = Shared,
    > {
        _inner0: PhantomData<*mut (KeyType, KeyTypeOwnership)>,
        _inner1: PhantomData<*mut (ObjectType, ObjectTypeOwnership)>,
        notunwindsafe: PhantomData<&'static mut ()>,
    }

    unsafe impl<
            KeyType: Message,
            ObjectType: Message,
            KeyTypeOwnership: Ownership,
            ObjectTypeOwnership: Ownership,
        > ClassType for NSMapTable<KeyType, ObjectType, KeyTypeOwnership, ObjectTypeOwnership>
    {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Foundation_NSMapTable")]
    unsafe impl<
            KeyType: Message,
            ObjectType: Message,
            KeyTypeOwnership: Ownership,
            ObjectTypeOwnership: Ownership,
        > NSMapTable<KeyType, ObjectType, KeyTypeOwnership, ObjectTypeOwnership>
    {
        #[method_id(@__retain_semantics Init initWithKeyOptions:valueOptions:capacity:)]
        pub unsafe fn initWithKeyOptions_valueOptions_capacity(
            this: Option<Allocated<Self>>,
            keyOptions: NSPointerFunctionsOptions,
            valueOptions: NSPointerFunctionsOptions,
            initialCapacity: NSUInteger,
        ) -> Id<Self, Shared>;

        #[cfg(feature = "Foundation_NSPointerFunctions")]
        #[method_id(@__retain_semantics Init initWithKeyPointerFunctions:valuePointerFunctions:capacity:)]
        pub unsafe fn initWithKeyPointerFunctions_valuePointerFunctions_capacity(
            this: Option<Allocated<Self>>,
            keyFunctions: &Foundation::NSPointerFunctions,
            valueFunctions: &Foundation::NSPointerFunctions,
            initialCapacity: NSUInteger,
        ) -> Id<Self, Shared>;

        #[method_id(@__retain_semantics Other mapTableWithKeyOptions:valueOptions:)]
        pub unsafe fn mapTableWithKeyOptions_valueOptions(
            keyOptions: NSPointerFunctionsOptions,
            valueOptions: NSPointerFunctionsOptions,
        ) -> Id<Foundation::NSMapTable<KeyType, ObjectType>, Shared>;

        #[method_id(@__retain_semantics Other mapTableWithStrongToStrongObjects)]
        pub unsafe fn mapTableWithStrongToStrongObjects() -> Id<Object, Shared>;

        #[method_id(@__retain_semantics Other mapTableWithWeakToStrongObjects)]
        pub unsafe fn mapTableWithWeakToStrongObjects() -> Id<Object, Shared>;

        #[method_id(@__retain_semantics Other mapTableWithStrongToWeakObjects)]
        pub unsafe fn mapTableWithStrongToWeakObjects() -> Id<Object, Shared>;

        #[method_id(@__retain_semantics Other mapTableWithWeakToWeakObjects)]
        pub unsafe fn mapTableWithWeakToWeakObjects() -> Id<Object, Shared>;

        #[method_id(@__retain_semantics Other strongToStrongObjectsMapTable)]
        pub unsafe fn strongToStrongObjectsMapTable(
        ) -> Id<Foundation::NSMapTable<KeyType, ObjectType>, Shared>;

        #[method_id(@__retain_semantics Other weakToStrongObjectsMapTable)]
        pub unsafe fn weakToStrongObjectsMapTable(
        ) -> Id<Foundation::NSMapTable<KeyType, ObjectType>, Shared>;

        #[method_id(@__retain_semantics Other strongToWeakObjectsMapTable)]
        pub unsafe fn strongToWeakObjectsMapTable(
        ) -> Id<Foundation::NSMapTable<KeyType, ObjectType>, Shared>;

        #[method_id(@__retain_semantics Other weakToWeakObjectsMapTable)]
        pub unsafe fn weakToWeakObjectsMapTable(
        ) -> Id<Foundation::NSMapTable<KeyType, ObjectType>, Shared>;

        #[cfg(feature = "Foundation_NSPointerFunctions")]
        #[method_id(@__retain_semantics Other keyPointerFunctions)]
        pub unsafe fn keyPointerFunctions(&self) -> Id<Foundation::NSPointerFunctions, Shared>;

        #[cfg(feature = "Foundation_NSPointerFunctions")]
        #[method_id(@__retain_semantics Other valuePointerFunctions)]
        pub unsafe fn valuePointerFunctions(&self) -> Id<Foundation::NSPointerFunctions, Shared>;

        #[method_id(@__retain_semantics Other objectForKey:)]
        pub unsafe fn objectForKey(
            &self,
            aKey: Option<&KeyType>,
        ) -> Option<Id<ObjectType, ObjectTypeOwnership>>;

        #[method(removeObjectForKey:)]
        pub unsafe fn removeObjectForKey(&self, aKey: Option<&KeyType>);

        #[method(setObject:forKey:)]
        pub unsafe fn setObject_forKey(
            &self,
            anObject: Option<&ObjectType>,
            aKey: Option<&KeyType>,
        );

        #[method(count)]
        pub unsafe fn count(&self) -> NSUInteger;

        #[cfg(feature = "Foundation_NSEnumerator")]
        #[method_id(@__retain_semantics Other keyEnumerator)]
        pub unsafe fn keyEnumerator(&self) -> Id<Foundation::NSEnumerator<KeyType>, Shared>;

        #[cfg(feature = "Foundation_NSEnumerator")]
        #[method_id(@__retain_semantics Other objectEnumerator)]
        pub unsafe fn objectEnumerator(
            &self,
        ) -> Option<Id<Foundation::NSEnumerator<ObjectType>, Shared>>;

        #[method(removeAllObjects)]
        pub unsafe fn removeAllObjects(&self);

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method_id(@__retain_semantics Other dictionaryRepresentation)]
        pub unsafe fn dictionaryRepresentation(
            &self,
        ) -> Id<Foundation::NSDictionary<KeyType, ObjectType>, Shared>;
    }
);

extern_struct!(
    pub struct NSMapEnumerator {
        _pi: NSUInteger,
        _si: NSUInteger,
        _bs: *mut c_void,
    }
);

extern_fn!(
    pub unsafe fn NSFreeMapTable(table: &Foundation::NSMapTable);
);

extern_fn!(
    pub unsafe fn NSResetMapTable(table: &Foundation::NSMapTable);
);

extern_fn!(
    pub unsafe fn NSCompareMapTables(
        table1: &Foundation::NSMapTable,
        table2: &Foundation::NSMapTable,
    ) -> Bool;
);

extern_fn!(
    pub unsafe fn NSCopyMapTableWithZone(
        table: &Foundation::NSMapTable,
        zone: *mut NSZone,
    ) -> NonNull<Foundation::NSMapTable>;
);

extern_fn!(
    pub unsafe fn NSMapMember(
        table: &Foundation::NSMapTable,
        key: NonNull<c_void>,
        originalKey: *mut *mut c_void,
        value: *mut *mut c_void,
    ) -> Bool;
);

extern_fn!(
    pub unsafe fn NSMapGet(table: &Foundation::NSMapTable, key: *mut c_void) -> *mut c_void;
);

extern_fn!(
    pub unsafe fn NSMapInsert(table: &Foundation::NSMapTable, key: *mut c_void, value: *mut c_void);
);

extern_fn!(
    pub unsafe fn NSMapInsertKnownAbsent(
        table: &Foundation::NSMapTable,
        key: *mut c_void,
        value: *mut c_void,
    );
);

extern_fn!(
    pub unsafe fn NSMapInsertIfAbsent(
        table: &Foundation::NSMapTable,
        key: *mut c_void,
        value: *mut c_void,
    ) -> *mut c_void;
);

extern_fn!(
    pub unsafe fn NSMapRemove(table: &Foundation::NSMapTable, key: *mut c_void);
);

extern_fn!(
    pub unsafe fn NSEnumerateMapTable(table: &Foundation::NSMapTable) -> NSMapEnumerator;
);

extern_fn!(
    pub unsafe fn NSNextMapEnumeratorPair(
        enumerator: NonNull<NSMapEnumerator>,
        key: *mut *mut c_void,
        value: *mut *mut c_void,
    ) -> Bool;
);

extern_fn!(
    pub unsafe fn NSEndMapTableEnumeration(enumerator: NonNull<NSMapEnumerator>);
);

extern_fn!(
    pub unsafe fn NSCountMapTable(table: &Foundation::NSMapTable) -> NSUInteger;
);

extern_fn!(
    pub unsafe fn NSStringFromMapTable(
        table: &Foundation::NSMapTable,
    ) -> NonNull<Foundation::NSString>;
);

extern_fn!(
    pub unsafe fn NSAllMapTableKeys(table: &Foundation::NSMapTable)
        -> NonNull<Foundation::NSArray>;
);

extern_fn!(
    pub unsafe fn NSAllMapTableValues(
        table: &Foundation::NSMapTable,
    ) -> NonNull<Foundation::NSArray>;
);

extern_struct!(
    pub struct NSMapTableKeyCallBacks {
        pub hash: Option<
            unsafe extern "C" fn(NonNull<Foundation::NSMapTable>, NonNull<c_void>) -> NSUInteger,
        >,
        pub isEqual: Option<
            unsafe extern "C" fn(
                NonNull<Foundation::NSMapTable>,
                NonNull<c_void>,
                NonNull<c_void>,
            ) -> Bool,
        >,
        pub retain: Option<unsafe extern "C" fn(NonNull<Foundation::NSMapTable>, NonNull<c_void>)>,
        pub release: Option<unsafe extern "C" fn(NonNull<Foundation::NSMapTable>, NonNull<c_void>)>,
        pub describe: Option<
            unsafe extern "C" fn(
                NonNull<Foundation::NSMapTable>,
                NonNull<c_void>,
            ) -> *mut Foundation::NSString,
        >,
        pub notAKeyMarker: *mut c_void,
    }
);

extern_struct!(
    pub struct NSMapTableValueCallBacks {
        pub retain: Option<unsafe extern "C" fn(NonNull<Foundation::NSMapTable>, NonNull<c_void>)>,
        pub release: Option<unsafe extern "C" fn(NonNull<Foundation::NSMapTable>, NonNull<c_void>)>,
        pub describe: Option<
            unsafe extern "C" fn(
                NonNull<Foundation::NSMapTable>,
                NonNull<c_void>,
            ) -> *mut Foundation::NSString,
        >,
    }
);

extern_fn!(
    pub unsafe fn NSCreateMapTableWithZone(
        keyCallBacks: NSMapTableKeyCallBacks,
        valueCallBacks: NSMapTableValueCallBacks,
        capacity: NSUInteger,
        zone: *mut NSZone,
    ) -> NonNull<Foundation::NSMapTable>;
);

extern_fn!(
    pub unsafe fn NSCreateMapTable(
        keyCallBacks: NSMapTableKeyCallBacks,
        valueCallBacks: NSMapTableValueCallBacks,
        capacity: NSUInteger,
    ) -> NonNull<Foundation::NSMapTable>;
);

extern_static!(NSIntegerMapKeyCallBacks: NSMapTableKeyCallBacks);

extern_static!(NSNonOwnedPointerMapKeyCallBacks: NSMapTableKeyCallBacks);

extern_static!(NSNonOwnedPointerOrNullMapKeyCallBacks: NSMapTableKeyCallBacks);

extern_static!(NSNonRetainedObjectMapKeyCallBacks: NSMapTableKeyCallBacks);

extern_static!(NSObjectMapKeyCallBacks: NSMapTableKeyCallBacks);

extern_static!(NSOwnedPointerMapKeyCallBacks: NSMapTableKeyCallBacks);

extern_static!(NSIntMapKeyCallBacks: NSMapTableKeyCallBacks);

extern_static!(NSIntegerMapValueCallBacks: NSMapTableValueCallBacks);

extern_static!(NSNonOwnedPointerMapValueCallBacks: NSMapTableValueCallBacks);

extern_static!(NSObjectMapValueCallBacks: NSMapTableValueCallBacks);

extern_static!(NSNonRetainedObjectMapValueCallBacks: NSMapTableValueCallBacks);

extern_static!(NSOwnedPointerMapValueCallBacks: NSMapTableValueCallBacks);

extern_static!(NSIntMapValueCallBacks: NSMapTableValueCallBacks);
