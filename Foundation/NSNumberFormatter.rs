//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation;

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSNumberFormatterBehavior {
        NSNumberFormatterBehaviorDefault = 0,
        NSNumberFormatterBehavior10_0 = 1000,
        NSNumberFormatterBehavior10_4 = 1040,
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSNumberFormatterStyle {
        NSNumberFormatterNoStyle = 0,
        NSNumberFormatterDecimalStyle = 1,
        NSNumberFormatterCurrencyStyle = 2,
        NSNumberFormatterPercentStyle = 3,
        NSNumberFormatterScientificStyle = 4,
        NSNumberFormatterSpellOutStyle = 5,
        NSNumberFormatterOrdinalStyle = 6,
        NSNumberFormatterCurrencyISOCodeStyle = 8,
        NSNumberFormatterCurrencyPluralStyle = 9,
        NSNumberFormatterCurrencyAccountingStyle = 10,
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSNumberFormatterPadPosition {
        NSNumberFormatterPadBeforePrefix = 0,
        NSNumberFormatterPadAfterPrefix = 1,
        NSNumberFormatterPadBeforeSuffix = 2,
        NSNumberFormatterPadAfterSuffix = 3,
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSNumberFormatterRoundingMode {
        NSNumberFormatterRoundCeiling = 0,
        NSNumberFormatterRoundFloor = 1,
        NSNumberFormatterRoundDown = 2,
        NSNumberFormatterRoundUp = 3,
        NSNumberFormatterRoundHalfEven = 4,
        NSNumberFormatterRoundHalfDown = 5,
        NSNumberFormatterRoundHalfUp = 6,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSNumberFormatter;

    unsafe impl ClassType for NSNumberFormatter {
        #[inherits(NSObject)]
        type Super = Foundation::NSFormatter;
    }
);

extern_methods!(
    #[cfg(feature = "Foundation_NSNumberFormatter")]
    unsafe impl NSNumberFormatter {
        #[method(formattingContext)]
        pub unsafe fn formattingContext(&self) -> Foundation::NSFormattingContext;

        #[method(setFormattingContext:)]
        pub unsafe fn setFormattingContext(
            &self,
            formattingContext: Foundation::NSFormattingContext,
        );

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
        #[method(getObjectValue:forString:range:error:_)]
        pub unsafe fn getObjectValue_forString_range_error(
            &self,
            obj: *mut *mut Object,
            string: &Foundation::NSString,
            rangep: *mut Foundation::NSRange,
        ) -> Result<(), Id<Foundation::NSError, Shared>>;

        #[cfg(all(feature = "Foundation_NSNumber", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other stringFromNumber:)]
        pub unsafe fn stringFromNumber(
            &self,
            number: &Foundation::NSNumber,
        ) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(all(feature = "Foundation_NSNumber", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other numberFromString:)]
        pub unsafe fn numberFromString(
            &self,
            string: &Foundation::NSString,
        ) -> Option<Id<Foundation::NSNumber, Shared>>;

        #[cfg(all(feature = "Foundation_NSNumber", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other localizedStringFromNumber:numberStyle:)]
        pub unsafe fn localizedStringFromNumber_numberStyle(
            num: &Foundation::NSNumber,
            nstyle: Foundation::NSNumberFormatterStyle,
        ) -> Id<Foundation::NSString, Shared>;

        #[method(defaultFormatterBehavior)]
        pub unsafe fn defaultFormatterBehavior() -> Foundation::NSNumberFormatterBehavior;

        #[method(setDefaultFormatterBehavior:)]
        pub unsafe fn setDefaultFormatterBehavior(behavior: Foundation::NSNumberFormatterBehavior);

        #[method(numberStyle)]
        pub unsafe fn numberStyle(&self) -> Foundation::NSNumberFormatterStyle;

        #[method(setNumberStyle:)]
        pub unsafe fn setNumberStyle(&self, numberStyle: Foundation::NSNumberFormatterStyle);

        #[cfg(feature = "Foundation_NSLocale")]
        #[method_id(@__retain_semantics Other locale)]
        pub unsafe fn locale(&self) -> Id<Foundation::NSLocale, Shared>;

        #[cfg(feature = "Foundation_NSLocale")]
        #[method(setLocale:)]
        pub unsafe fn setLocale(&self, locale: Option<&Foundation::NSLocale>);

        #[method(generatesDecimalNumbers)]
        pub unsafe fn generatesDecimalNumbers(&self) -> bool;

        #[method(setGeneratesDecimalNumbers:)]
        pub unsafe fn setGeneratesDecimalNumbers(&self, generatesDecimalNumbers: bool);

        #[method(formatterBehavior)]
        pub unsafe fn formatterBehavior(&self) -> Foundation::NSNumberFormatterBehavior;

        #[method(setFormatterBehavior:)]
        pub unsafe fn setFormatterBehavior(
            &self,
            formatterBehavior: Foundation::NSNumberFormatterBehavior,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other negativeFormat)]
        pub unsafe fn negativeFormat(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setNegativeFormat:)]
        pub unsafe fn setNegativeFormat(&self, negativeFormat: Option<&Foundation::NSString>);

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other textAttributesForNegativeValues)]
        pub unsafe fn textAttributesForNegativeValues(
            &self,
        ) -> Option<Id<Foundation::NSDictionary<Foundation::NSString, Object>, Shared>>;

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method(setTextAttributesForNegativeValues:)]
        pub unsafe fn setTextAttributesForNegativeValues(
            &self,
            textAttributesForNegativeValues: Option<
                &Foundation::NSDictionary<Foundation::NSString, Object>,
            >,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other positiveFormat)]
        pub unsafe fn positiveFormat(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setPositiveFormat:)]
        pub unsafe fn setPositiveFormat(&self, positiveFormat: Option<&Foundation::NSString>);

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other textAttributesForPositiveValues)]
        pub unsafe fn textAttributesForPositiveValues(
            &self,
        ) -> Option<Id<Foundation::NSDictionary<Foundation::NSString, Object>, Shared>>;

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method(setTextAttributesForPositiveValues:)]
        pub unsafe fn setTextAttributesForPositiveValues(
            &self,
            textAttributesForPositiveValues: Option<
                &Foundation::NSDictionary<Foundation::NSString, Object>,
            >,
        );

        #[method(allowsFloats)]
        pub unsafe fn allowsFloats(&self) -> bool;

        #[method(setAllowsFloats:)]
        pub unsafe fn setAllowsFloats(&self, allowsFloats: bool);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other decimalSeparator)]
        pub unsafe fn decimalSeparator(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setDecimalSeparator:)]
        pub unsafe fn setDecimalSeparator(&self, decimalSeparator: Option<&Foundation::NSString>);

        #[method(alwaysShowsDecimalSeparator)]
        pub unsafe fn alwaysShowsDecimalSeparator(&self) -> bool;

        #[method(setAlwaysShowsDecimalSeparator:)]
        pub unsafe fn setAlwaysShowsDecimalSeparator(&self, alwaysShowsDecimalSeparator: bool);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other currencyDecimalSeparator)]
        pub unsafe fn currencyDecimalSeparator(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setCurrencyDecimalSeparator:)]
        pub unsafe fn setCurrencyDecimalSeparator(
            &self,
            currencyDecimalSeparator: Option<&Foundation::NSString>,
        );

        #[method(usesGroupingSeparator)]
        pub unsafe fn usesGroupingSeparator(&self) -> bool;

        #[method(setUsesGroupingSeparator:)]
        pub unsafe fn setUsesGroupingSeparator(&self, usesGroupingSeparator: bool);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other groupingSeparator)]
        pub unsafe fn groupingSeparator(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setGroupingSeparator:)]
        pub unsafe fn setGroupingSeparator(&self, groupingSeparator: Option<&Foundation::NSString>);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other zeroSymbol)]
        pub unsafe fn zeroSymbol(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setZeroSymbol:)]
        pub unsafe fn setZeroSymbol(&self, zeroSymbol: Option<&Foundation::NSString>);

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other textAttributesForZero)]
        pub unsafe fn textAttributesForZero(
            &self,
        ) -> Option<Id<Foundation::NSDictionary<Foundation::NSString, Object>, Shared>>;

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method(setTextAttributesForZero:)]
        pub unsafe fn setTextAttributesForZero(
            &self,
            textAttributesForZero: Option<&Foundation::NSDictionary<Foundation::NSString, Object>>,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other nilSymbol)]
        pub unsafe fn nilSymbol(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setNilSymbol:)]
        pub unsafe fn setNilSymbol(&self, nilSymbol: &Foundation::NSString);

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other textAttributesForNil)]
        pub unsafe fn textAttributesForNil(
            &self,
        ) -> Option<Id<Foundation::NSDictionary<Foundation::NSString, Object>, Shared>>;

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method(setTextAttributesForNil:)]
        pub unsafe fn setTextAttributesForNil(
            &self,
            textAttributesForNil: Option<&Foundation::NSDictionary<Foundation::NSString, Object>>,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other notANumberSymbol)]
        pub unsafe fn notANumberSymbol(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setNotANumberSymbol:)]
        pub unsafe fn setNotANumberSymbol(&self, notANumberSymbol: Option<&Foundation::NSString>);

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other textAttributesForNotANumber)]
        pub unsafe fn textAttributesForNotANumber(
            &self,
        ) -> Option<Id<Foundation::NSDictionary<Foundation::NSString, Object>, Shared>>;

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method(setTextAttributesForNotANumber:)]
        pub unsafe fn setTextAttributesForNotANumber(
            &self,
            textAttributesForNotANumber: Option<
                &Foundation::NSDictionary<Foundation::NSString, Object>,
            >,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other positiveInfinitySymbol)]
        pub unsafe fn positiveInfinitySymbol(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setPositiveInfinitySymbol:)]
        pub unsafe fn setPositiveInfinitySymbol(
            &self,
            positiveInfinitySymbol: &Foundation::NSString,
        );

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other textAttributesForPositiveInfinity)]
        pub unsafe fn textAttributesForPositiveInfinity(
            &self,
        ) -> Option<Id<Foundation::NSDictionary<Foundation::NSString, Object>, Shared>>;

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method(setTextAttributesForPositiveInfinity:)]
        pub unsafe fn setTextAttributesForPositiveInfinity(
            &self,
            textAttributesForPositiveInfinity: Option<
                &Foundation::NSDictionary<Foundation::NSString, Object>,
            >,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other negativeInfinitySymbol)]
        pub unsafe fn negativeInfinitySymbol(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setNegativeInfinitySymbol:)]
        pub unsafe fn setNegativeInfinitySymbol(
            &self,
            negativeInfinitySymbol: &Foundation::NSString,
        );

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other textAttributesForNegativeInfinity)]
        pub unsafe fn textAttributesForNegativeInfinity(
            &self,
        ) -> Option<Id<Foundation::NSDictionary<Foundation::NSString, Object>, Shared>>;

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method(setTextAttributesForNegativeInfinity:)]
        pub unsafe fn setTextAttributesForNegativeInfinity(
            &self,
            textAttributesForNegativeInfinity: Option<
                &Foundation::NSDictionary<Foundation::NSString, Object>,
            >,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other positivePrefix)]
        pub unsafe fn positivePrefix(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setPositivePrefix:)]
        pub unsafe fn setPositivePrefix(&self, positivePrefix: Option<&Foundation::NSString>);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other positiveSuffix)]
        pub unsafe fn positiveSuffix(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setPositiveSuffix:)]
        pub unsafe fn setPositiveSuffix(&self, positiveSuffix: Option<&Foundation::NSString>);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other negativePrefix)]
        pub unsafe fn negativePrefix(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setNegativePrefix:)]
        pub unsafe fn setNegativePrefix(&self, negativePrefix: Option<&Foundation::NSString>);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other negativeSuffix)]
        pub unsafe fn negativeSuffix(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setNegativeSuffix:)]
        pub unsafe fn setNegativeSuffix(&self, negativeSuffix: Option<&Foundation::NSString>);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other currencyCode)]
        pub unsafe fn currencyCode(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setCurrencyCode:)]
        pub unsafe fn setCurrencyCode(&self, currencyCode: Option<&Foundation::NSString>);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other currencySymbol)]
        pub unsafe fn currencySymbol(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setCurrencySymbol:)]
        pub unsafe fn setCurrencySymbol(&self, currencySymbol: Option<&Foundation::NSString>);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other internationalCurrencySymbol)]
        pub unsafe fn internationalCurrencySymbol(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setInternationalCurrencySymbol:)]
        pub unsafe fn setInternationalCurrencySymbol(
            &self,
            internationalCurrencySymbol: Option<&Foundation::NSString>,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other percentSymbol)]
        pub unsafe fn percentSymbol(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setPercentSymbol:)]
        pub unsafe fn setPercentSymbol(&self, percentSymbol: Option<&Foundation::NSString>);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other perMillSymbol)]
        pub unsafe fn perMillSymbol(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setPerMillSymbol:)]
        pub unsafe fn setPerMillSymbol(&self, perMillSymbol: Option<&Foundation::NSString>);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other minusSign)]
        pub unsafe fn minusSign(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setMinusSign:)]
        pub unsafe fn setMinusSign(&self, minusSign: Option<&Foundation::NSString>);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other plusSign)]
        pub unsafe fn plusSign(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setPlusSign:)]
        pub unsafe fn setPlusSign(&self, plusSign: Option<&Foundation::NSString>);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other exponentSymbol)]
        pub unsafe fn exponentSymbol(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setExponentSymbol:)]
        pub unsafe fn setExponentSymbol(&self, exponentSymbol: Option<&Foundation::NSString>);

        #[method(groupingSize)]
        pub unsafe fn groupingSize(&self) -> NSUInteger;

        #[method(setGroupingSize:)]
        pub unsafe fn setGroupingSize(&self, groupingSize: NSUInteger);

        #[method(secondaryGroupingSize)]
        pub unsafe fn secondaryGroupingSize(&self) -> NSUInteger;

        #[method(setSecondaryGroupingSize:)]
        pub unsafe fn setSecondaryGroupingSize(&self, secondaryGroupingSize: NSUInteger);

        #[cfg(feature = "Foundation_NSNumber")]
        #[method_id(@__retain_semantics Other multiplier)]
        pub unsafe fn multiplier(&self) -> Option<Id<Foundation::NSNumber, Shared>>;

        #[cfg(feature = "Foundation_NSNumber")]
        #[method(setMultiplier:)]
        pub unsafe fn setMultiplier(&self, multiplier: Option<&Foundation::NSNumber>);

        #[method(formatWidth)]
        pub unsafe fn formatWidth(&self) -> NSUInteger;

        #[method(setFormatWidth:)]
        pub unsafe fn setFormatWidth(&self, formatWidth: NSUInteger);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other paddingCharacter)]
        pub unsafe fn paddingCharacter(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setPaddingCharacter:)]
        pub unsafe fn setPaddingCharacter(&self, paddingCharacter: Option<&Foundation::NSString>);

        #[method(paddingPosition)]
        pub unsafe fn paddingPosition(&self) -> Foundation::NSNumberFormatterPadPosition;

        #[method(setPaddingPosition:)]
        pub unsafe fn setPaddingPosition(
            &self,
            paddingPosition: Foundation::NSNumberFormatterPadPosition,
        );

        #[method(roundingMode)]
        pub unsafe fn roundingMode(&self) -> Foundation::NSNumberFormatterRoundingMode;

        #[method(setRoundingMode:)]
        pub unsafe fn setRoundingMode(
            &self,
            roundingMode: Foundation::NSNumberFormatterRoundingMode,
        );

        #[cfg(feature = "Foundation_NSNumber")]
        #[method_id(@__retain_semantics Other roundingIncrement)]
        pub unsafe fn roundingIncrement(&self) -> Id<Foundation::NSNumber, Shared>;

        #[cfg(feature = "Foundation_NSNumber")]
        #[method(setRoundingIncrement:)]
        pub unsafe fn setRoundingIncrement(&self, roundingIncrement: Option<&Foundation::NSNumber>);

        #[method(minimumIntegerDigits)]
        pub unsafe fn minimumIntegerDigits(&self) -> NSUInteger;

        #[method(setMinimumIntegerDigits:)]
        pub unsafe fn setMinimumIntegerDigits(&self, minimumIntegerDigits: NSUInteger);

        #[method(maximumIntegerDigits)]
        pub unsafe fn maximumIntegerDigits(&self) -> NSUInteger;

        #[method(setMaximumIntegerDigits:)]
        pub unsafe fn setMaximumIntegerDigits(&self, maximumIntegerDigits: NSUInteger);

        #[method(minimumFractionDigits)]
        pub unsafe fn minimumFractionDigits(&self) -> NSUInteger;

        #[method(setMinimumFractionDigits:)]
        pub unsafe fn setMinimumFractionDigits(&self, minimumFractionDigits: NSUInteger);

        #[method(maximumFractionDigits)]
        pub unsafe fn maximumFractionDigits(&self) -> NSUInteger;

        #[method(setMaximumFractionDigits:)]
        pub unsafe fn setMaximumFractionDigits(&self, maximumFractionDigits: NSUInteger);

        #[cfg(feature = "Foundation_NSNumber")]
        #[method_id(@__retain_semantics Other minimum)]
        pub unsafe fn minimum(&self) -> Option<Id<Foundation::NSNumber, Shared>>;

        #[cfg(feature = "Foundation_NSNumber")]
        #[method(setMinimum:)]
        pub unsafe fn setMinimum(&self, minimum: Option<&Foundation::NSNumber>);

        #[cfg(feature = "Foundation_NSNumber")]
        #[method_id(@__retain_semantics Other maximum)]
        pub unsafe fn maximum(&self) -> Option<Id<Foundation::NSNumber, Shared>>;

        #[cfg(feature = "Foundation_NSNumber")]
        #[method(setMaximum:)]
        pub unsafe fn setMaximum(&self, maximum: Option<&Foundation::NSNumber>);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other currencyGroupingSeparator)]
        pub unsafe fn currencyGroupingSeparator(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setCurrencyGroupingSeparator:)]
        pub unsafe fn setCurrencyGroupingSeparator(
            &self,
            currencyGroupingSeparator: Option<&Foundation::NSString>,
        );

        #[method(isLenient)]
        pub unsafe fn isLenient(&self) -> bool;

        #[method(setLenient:)]
        pub unsafe fn setLenient(&self, lenient: bool);

        #[method(usesSignificantDigits)]
        pub unsafe fn usesSignificantDigits(&self) -> bool;

        #[method(setUsesSignificantDigits:)]
        pub unsafe fn setUsesSignificantDigits(&self, usesSignificantDigits: bool);

        #[method(minimumSignificantDigits)]
        pub unsafe fn minimumSignificantDigits(&self) -> NSUInteger;

        #[method(setMinimumSignificantDigits:)]
        pub unsafe fn setMinimumSignificantDigits(&self, minimumSignificantDigits: NSUInteger);

        #[method(maximumSignificantDigits)]
        pub unsafe fn maximumSignificantDigits(&self) -> NSUInteger;

        #[method(setMaximumSignificantDigits:)]
        pub unsafe fn setMaximumSignificantDigits(&self, maximumSignificantDigits: NSUInteger);

        #[method(isPartialStringValidationEnabled)]
        pub unsafe fn isPartialStringValidationEnabled(&self) -> bool;

        #[method(setPartialStringValidationEnabled:)]
        pub unsafe fn setPartialStringValidationEnabled(
            &self,
            partialStringValidationEnabled: bool,
        );
    }
);

extern_methods!(
    /// NSNumberFormatterCompatibility
    #[cfg(feature = "Foundation_NSNumberFormatter")]
    unsafe impl NSNumberFormatter {
        #[method(hasThousandSeparators)]
        pub unsafe fn hasThousandSeparators(&self) -> bool;

        #[method(setHasThousandSeparators:)]
        pub unsafe fn setHasThousandSeparators(&self, hasThousandSeparators: bool);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other thousandSeparator)]
        pub unsafe fn thousandSeparator(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setThousandSeparator:)]
        pub unsafe fn setThousandSeparator(&self, thousandSeparator: Option<&Foundation::NSString>);

        #[method(localizesFormat)]
        pub unsafe fn localizesFormat(&self) -> bool;

        #[method(setLocalizesFormat:)]
        pub unsafe fn setLocalizesFormat(&self, localizesFormat: bool);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other format)]
        pub unsafe fn format(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setFormat:)]
        pub unsafe fn setFormat(&self, format: &Foundation::NSString);

        #[cfg(feature = "Foundation_NSAttributedString")]
        #[method_id(@__retain_semantics Other attributedStringForZero)]
        pub unsafe fn attributedStringForZero(&self) -> Id<Foundation::NSAttributedString, Shared>;

        #[cfg(feature = "Foundation_NSAttributedString")]
        #[method(setAttributedStringForZero:)]
        pub unsafe fn setAttributedStringForZero(
            &self,
            attributedStringForZero: &Foundation::NSAttributedString,
        );

        #[cfg(feature = "Foundation_NSAttributedString")]
        #[method_id(@__retain_semantics Other attributedStringForNil)]
        pub unsafe fn attributedStringForNil(&self) -> Id<Foundation::NSAttributedString, Shared>;

        #[cfg(feature = "Foundation_NSAttributedString")]
        #[method(setAttributedStringForNil:)]
        pub unsafe fn setAttributedStringForNil(
            &self,
            attributedStringForNil: &Foundation::NSAttributedString,
        );

        #[cfg(feature = "Foundation_NSAttributedString")]
        #[method_id(@__retain_semantics Other attributedStringForNotANumber)]
        pub unsafe fn attributedStringForNotANumber(
            &self,
        ) -> Id<Foundation::NSAttributedString, Shared>;

        #[cfg(feature = "Foundation_NSAttributedString")]
        #[method(setAttributedStringForNotANumber:)]
        pub unsafe fn setAttributedStringForNotANumber(
            &self,
            attributedStringForNotANumber: &Foundation::NSAttributedString,
        );

        #[cfg(feature = "Foundation_NSDecimalNumberHandler")]
        #[method_id(@__retain_semantics Other roundingBehavior)]
        pub unsafe fn roundingBehavior(&self) -> Id<Foundation::NSDecimalNumberHandler, Shared>;

        #[cfg(feature = "Foundation_NSDecimalNumberHandler")]
        #[method(setRoundingBehavior:)]
        pub unsafe fn setRoundingBehavior(
            &self,
            roundingBehavior: &Foundation::NSDecimalNumberHandler,
        );
    }
);
