//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSURLResponse;

    unsafe impl ClassType for NSURLResponse {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Foundation_NSURLResponse")]
    unsafe impl NSURLResponse {
        #[cfg(all(feature = "Foundation_NSString", feature = "Foundation_NSURL"))]
        #[method_id(@__retain_semantics Init initWithURL:MIMEType:expectedContentLength:textEncodingName:)]
        pub unsafe fn initWithURL_MIMEType_expectedContentLength_textEncodingName(
            this: Option<Allocated<Self>>,
            URL: &Foundation::NSURL,
            MIMEType: Option<&Foundation::NSString>,
            length: NSInteger,
            name: Option<&Foundation::NSString>,
        ) -> Id<Self, Shared>;

        #[cfg(feature = "Foundation_NSURL")]
        #[method_id(@__retain_semantics Other URL)]
        pub unsafe fn URL(&self) -> Option<Id<Foundation::NSURL, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other MIMEType)]
        pub unsafe fn MIMEType(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[method(expectedContentLength)]
        pub unsafe fn expectedContentLength(&self) -> c_longlong;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other textEncodingName)]
        pub unsafe fn textEncodingName(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other suggestedFilename)]
        pub unsafe fn suggestedFilename(&self) -> Option<Id<Foundation::NSString, Shared>>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSHTTPURLResponse;

    unsafe impl ClassType for NSHTTPURLResponse {
        #[inherits(NSObject)]
        type Super = NSURLResponse;
    }
);

extern_methods!(
    #[cfg(feature = "Foundation_NSHTTPURLResponse")]
    unsafe impl NSHTTPURLResponse {
        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL"
        ))]
        #[method_id(@__retain_semantics Init initWithURL:statusCode:HTTPVersion:headerFields:)]
        pub unsafe fn initWithURL_statusCode_HTTPVersion_headerFields(
            this: Option<Allocated<Self>>,
            url: &Foundation::NSURL,
            statusCode: NSInteger,
            HTTPVersion: Option<&Foundation::NSString>,
            headerFields: Option<
                &Foundation::NSDictionary<Foundation::NSString, Foundation::NSString>,
            >,
        ) -> Option<Id<Self, Shared>>;

        #[method(statusCode)]
        pub unsafe fn statusCode(&self) -> NSInteger;

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method_id(@__retain_semantics Other allHeaderFields)]
        pub unsafe fn allHeaderFields(&self) -> Id<Foundation::NSDictionary, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other valueForHTTPHeaderField:)]
        pub unsafe fn valueForHTTPHeaderField(
            &self,
            field: &Foundation::NSString,
        ) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other localizedStringForStatusCode:)]
        pub unsafe fn localizedStringForStatusCode(
            statusCode: NSInteger,
        ) -> Id<Foundation::NSString, Shared>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSURLResponse`
    #[cfg(feature = "Foundation_NSHTTPURLResponse")]
    unsafe impl NSHTTPURLResponse {
        #[cfg(all(feature = "Foundation_NSString", feature = "Foundation_NSURL"))]
        #[method_id(@__retain_semantics Init initWithURL:MIMEType:expectedContentLength:textEncodingName:)]
        pub unsafe fn initWithURL_MIMEType_expectedContentLength_textEncodingName(
            this: Option<Allocated<Self>>,
            URL: &Foundation::NSURL,
            MIMEType: Option<&Foundation::NSString>,
            length: NSInteger,
            name: Option<&Foundation::NSString>,
        ) -> Id<Self, Shared>;
    }
);
