//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation;

extern_methods!(
    #[cfg(feature = "Foundation_NSProxy")]
    unsafe impl NSProxy {
        #[method(class)]
        pub unsafe fn class() -> &'static Class;

        #[cfg(feature = "Foundation_NSInvocation")]
        #[method(forwardInvocation:)]
        pub unsafe fn forwardInvocation(&self, invocation: &Foundation::NSInvocation);

        #[cfg(feature = "Foundation_NSMethodSignature")]
        #[method_id(@__retain_semantics Other methodSignatureForSelector:)]
        pub unsafe fn methodSignatureForSelector(
            &self,
            sel: Sel,
        ) -> Option<Id<Foundation::NSMethodSignature, Shared>>;

        #[method(dealloc)]
        pub unsafe fn dealloc(&self);

        #[method(finalize)]
        pub unsafe fn finalize(&self);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other description)]
        pub unsafe fn description(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other debugDescription)]
        pub unsafe fn debugDescription(&self) -> Id<Foundation::NSString, Shared>;

        #[method(respondsToSelector:)]
        pub unsafe fn respondsToSelector(aSelector: Sel) -> bool;

        #[method(allowsWeakReference)]
        pub unsafe fn allowsWeakReference(&self) -> bool;

        #[method(retainWeakReference)]
        pub unsafe fn retainWeakReference(&self) -> bool;
    }
);
