//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation;

extern_static!(
    NSHashTableStrongMemory: Foundation::NSPointerFunctionsOptions = NSPointerFunctionsStrongMemory
);

extern_static!(
    NSHashTableZeroingWeakMemory: Foundation::NSPointerFunctionsOptions =
        NSPointerFunctionsZeroingWeakMemory
);

extern_static!(NSHashTableCopyIn: Foundation::NSPointerFunctionsOptions = NSPointerFunctionsCopyIn);

extern_static!(
    NSHashTableObjectPointerPersonality: Foundation::NSPointerFunctionsOptions =
        NSPointerFunctionsObjectPointerPersonality
);

extern_static!(
    NSHashTableWeakMemory: Foundation::NSPointerFunctionsOptions = NSPointerFunctionsWeakMemory
);

pub type NSHashTableOptions = NSUInteger;

__inner_extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSHashTable<ObjectType: Message = Object, ObjectTypeOwnership: Ownership = Shared> {
        _inner0: PhantomData<*mut (ObjectType, ObjectTypeOwnership)>,
        notunwindsafe: PhantomData<&'static mut ()>,
    }

    unsafe impl<ObjectType: Message, ObjectTypeOwnership: Ownership> ClassType
        for NSHashTable<ObjectType, ObjectTypeOwnership>
    {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Foundation_NSHashTable")]
    unsafe impl<ObjectType: Message, ObjectTypeOwnership: Ownership>
        NSHashTable<ObjectType, ObjectTypeOwnership>
    {
        #[method_id(@__retain_semantics Init initWithOptions:capacity:)]
        pub unsafe fn initWithOptions_capacity(
            this: Option<Allocated<Self>>,
            options: Foundation::NSPointerFunctionsOptions,
            initialCapacity: NSUInteger,
        ) -> Id<Self, Shared>;

        #[cfg(feature = "Foundation_NSPointerFunctions")]
        #[method_id(@__retain_semantics Init initWithPointerFunctions:capacity:)]
        pub unsafe fn initWithPointerFunctions_capacity(
            this: Option<Allocated<Self>>,
            functions: &Foundation::NSPointerFunctions,
            initialCapacity: NSUInteger,
        ) -> Id<Self, Shared>;

        #[method_id(@__retain_semantics Other hashTableWithOptions:)]
        pub unsafe fn hashTableWithOptions(
            options: Foundation::NSPointerFunctionsOptions,
        ) -> Id<Foundation::NSHashTable<ObjectType>, Shared>;

        #[method_id(@__retain_semantics Other hashTableWithWeakObjects)]
        pub unsafe fn hashTableWithWeakObjects() -> Id<Object, Shared>;

        #[method_id(@__retain_semantics Other weakObjectsHashTable)]
        pub unsafe fn weakObjectsHashTable() -> Id<Foundation::NSHashTable<ObjectType>, Shared>;

        #[cfg(feature = "Foundation_NSPointerFunctions")]
        #[method_id(@__retain_semantics Other pointerFunctions)]
        pub unsafe fn pointerFunctions(&self) -> Id<Foundation::NSPointerFunctions, Shared>;

        #[method(count)]
        pub unsafe fn count(&self) -> NSUInteger;

        #[method_id(@__retain_semantics Other member:)]
        pub unsafe fn member(
            &self,
            object: Option<&ObjectType>,
        ) -> Option<Id<ObjectType, ObjectTypeOwnership>>;

        #[cfg(feature = "Foundation_NSEnumerator")]
        #[method_id(@__retain_semantics Other objectEnumerator)]
        pub unsafe fn objectEnumerator(&self) -> Id<Foundation::NSEnumerator<ObjectType>, Shared>;

        #[method(addObject:)]
        pub unsafe fn addObject(&self, object: Option<&ObjectType>);

        #[method(removeObject:)]
        pub unsafe fn removeObject(&self, object: Option<&ObjectType>);

        #[method(removeAllObjects)]
        pub unsafe fn removeAllObjects(&self);

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other allObjects)]
        pub unsafe fn allObjects(&self) -> Id<Foundation::NSArray<ObjectType>, Shared>;

        #[method_id(@__retain_semantics Other anyObject)]
        pub unsafe fn anyObject(&self) -> Option<Id<ObjectType, ObjectTypeOwnership>>;

        #[method(containsObject:)]
        pub unsafe fn containsObject(&self, anObject: Option<&ObjectType>) -> bool;

        #[method(intersectsHashTable:)]
        pub unsafe fn intersectsHashTable(
            &self,
            other: &Foundation::NSHashTable<ObjectType>,
        ) -> bool;

        #[method(isEqualToHashTable:)]
        pub unsafe fn isEqualToHashTable(
            &self,
            other: &Foundation::NSHashTable<ObjectType>,
        ) -> bool;

        #[method(isSubsetOfHashTable:)]
        pub unsafe fn isSubsetOfHashTable(
            &self,
            other: &Foundation::NSHashTable<ObjectType>,
        ) -> bool;

        #[method(intersectHashTable:)]
        pub unsafe fn intersectHashTable(&self, other: &Foundation::NSHashTable<ObjectType>);

        #[method(unionHashTable:)]
        pub unsafe fn unionHashTable(&self, other: &Foundation::NSHashTable<ObjectType>);

        #[method(minusHashTable:)]
        pub unsafe fn minusHashTable(&self, other: &Foundation::NSHashTable<ObjectType>);

        #[cfg(feature = "Foundation_NSSet")]
        #[method_id(@__retain_semantics Other setRepresentation)]
        pub unsafe fn setRepresentation(&self) -> Id<Foundation::NSSet<ObjectType>, Shared>;
    }
);

extern_struct!(
    pub struct NSHashEnumerator {
        _pi: NSUInteger,
        _si: NSUInteger,
        _bs: *mut c_void,
    }
);

extern_fn!(
    pub unsafe fn NSFreeHashTable(table: &Foundation::NSHashTable);
);

extern_fn!(
    pub unsafe fn NSResetHashTable(table: &Foundation::NSHashTable);
);

extern_fn!(
    pub unsafe fn NSCompareHashTables(
        table1: &Foundation::NSHashTable,
        table2: &Foundation::NSHashTable,
    ) -> Bool;
);

extern_fn!(
    pub unsafe fn NSCopyHashTableWithZone(
        table: &Foundation::NSHashTable,
        zone: *mut Foundation::NSZone,
    ) -> NonNull<Foundation::NSHashTable>;
);

extern_fn!(
    pub unsafe fn NSHashGet(
        table: &Foundation::NSHashTable,
        pointer: *mut c_void,
    ) -> NonNull<c_void>;
);

extern_fn!(
    pub unsafe fn NSHashInsert(table: &Foundation::NSHashTable, pointer: *mut c_void);
);

extern_fn!(
    pub unsafe fn NSHashInsertKnownAbsent(table: &Foundation::NSHashTable, pointer: *mut c_void);
);

extern_fn!(
    pub unsafe fn NSHashInsertIfAbsent(
        table: &Foundation::NSHashTable,
        pointer: *mut c_void,
    ) -> *mut c_void;
);

extern_fn!(
    pub unsafe fn NSHashRemove(table: &Foundation::NSHashTable, pointer: *mut c_void);
);

extern_fn!(
    pub unsafe fn NSEnumerateHashTable(
        table: &Foundation::NSHashTable,
    ) -> Foundation::NSHashEnumerator;
);

extern_fn!(
    pub unsafe fn NSNextHashEnumeratorItem(
        enumerator: NonNull<Foundation::NSHashEnumerator>,
    ) -> *mut c_void;
);

extern_fn!(
    pub unsafe fn NSEndHashTableEnumeration(enumerator: NonNull<Foundation::NSHashEnumerator>);
);

extern_fn!(
    pub unsafe fn NSCountHashTable(table: &Foundation::NSHashTable) -> NSUInteger;
);

extern_fn!(
    pub unsafe fn NSStringFromHashTable(
        table: &Foundation::NSHashTable,
    ) -> NonNull<Foundation::NSString>;
);

extern_fn!(
    pub unsafe fn NSAllHashTableObjects(
        table: &Foundation::NSHashTable,
    ) -> NonNull<Foundation::NSArray>;
);

extern_struct!(
    pub struct NSHashTableCallBacks {
        pub hash: Option<
            unsafe extern "C" fn(NonNull<Foundation::NSHashTable>, NonNull<c_void>) -> NSUInteger,
        >,
        pub isEqual: Option<
            unsafe extern "C" fn(
                NonNull<Foundation::NSHashTable>,
                NonNull<c_void>,
                NonNull<c_void>,
            ) -> Bool,
        >,
        pub retain: Option<unsafe extern "C" fn(NonNull<Foundation::NSHashTable>, NonNull<c_void>)>,
        pub release:
            Option<unsafe extern "C" fn(NonNull<Foundation::NSHashTable>, NonNull<c_void>)>,
        pub describe: Option<
            unsafe extern "C" fn(
                NonNull<Foundation::NSHashTable>,
                NonNull<c_void>,
            ) -> *mut Foundation::NSString,
        >,
    }
);

extern_fn!(
    pub unsafe fn NSCreateHashTableWithZone(
        callBacks: Foundation::NSHashTableCallBacks,
        capacity: NSUInteger,
        zone: *mut Foundation::NSZone,
    ) -> NonNull<Foundation::NSHashTable>;
);

extern_fn!(
    pub unsafe fn NSCreateHashTable(
        callBacks: Foundation::NSHashTableCallBacks,
        capacity: NSUInteger,
    ) -> NonNull<Foundation::NSHashTable>;
);

extern_static!(NSIntegerHashCallBacks: Foundation::NSHashTableCallBacks);

extern_static!(NSNonOwnedPointerHashCallBacks: Foundation::NSHashTableCallBacks);

extern_static!(NSNonRetainedObjectHashCallBacks: Foundation::NSHashTableCallBacks);

extern_static!(NSObjectHashCallBacks: Foundation::NSHashTableCallBacks);

extern_static!(NSOwnedObjectIdentityHashCallBacks: Foundation::NSHashTableCallBacks);

extern_static!(NSOwnedPointerHashCallBacks: Foundation::NSHashTableCallBacks);

extern_static!(NSPointerToStructHashCallBacks: Foundation::NSHashTableCallBacks);

extern_static!(NSIntHashCallBacks: Foundation::NSHashTableCallBacks);
