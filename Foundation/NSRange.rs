//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation;

pub type NSRangePointer = *mut Foundation::NSRange;

inline_fn!(
    pub unsafe fn NSMakeRange(loc: NSUInteger, len: NSUInteger) -> Foundation::NSRange {
        todo!()
    }
);

inline_fn!(
    pub unsafe fn NSMaxRange(range: Foundation::NSRange) -> NSUInteger {
        todo!()
    }
);

inline_fn!(
    pub unsafe fn NSLocationInRange(loc: NSUInteger, range: Foundation::NSRange) -> Bool {
        todo!()
    }
);

inline_fn!(
    pub unsafe fn NSEqualRanges(range1: Foundation::NSRange, range2: Foundation::NSRange) -> Bool {
        todo!()
    }
);

extern_fn!(
    pub unsafe fn NSUnionRange(
        range1: Foundation::NSRange,
        range2: Foundation::NSRange,
    ) -> Foundation::NSRange;
);

extern_fn!(
    pub unsafe fn NSIntersectionRange(
        range1: Foundation::NSRange,
        range2: Foundation::NSRange,
    ) -> Foundation::NSRange;
);

extern_fn!(
    pub unsafe fn NSStringFromRange(range: Foundation::NSRange) -> NonNull<Foundation::NSString>;
);

extern_fn!(
    pub unsafe fn NSRangeFromString(aString: &Foundation::NSString) -> Foundation::NSRange;
);

extern_methods!(
    /// NSValueRangeExtensions
    #[cfg(feature = "Foundation_NSValue")]
    unsafe impl Foundation::NSValue {
        #[method_id(@__retain_semantics Other valueWithRange:)]
        pub unsafe fn valueWithRange(range: Foundation::NSRange)
            -> Id<Foundation::NSValue, Shared>;

        #[method(rangeValue)]
        pub unsafe fn rangeValue(&self) -> Foundation::NSRange;
    }
);
