//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation;

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSDateFormatterStyle {
        NSDateFormatterNoStyle = 0,
        NSDateFormatterShortStyle = 1,
        NSDateFormatterMediumStyle = 2,
        NSDateFormatterLongStyle = 3,
        NSDateFormatterFullStyle = 4,
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSDateFormatterBehavior {
        NSDateFormatterBehaviorDefault = 0,
        NSDateFormatterBehavior10_0 = 1000,
        NSDateFormatterBehavior10_4 = 1040,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSDateFormatter;

    unsafe impl ClassType for NSDateFormatter {
        #[inherits(NSObject)]
        type Super = Foundation::NSFormatter;
    }
);

extern_methods!(
    #[cfg(feature = "Foundation_NSDateFormatter")]
    unsafe impl NSDateFormatter {
        #[method(formattingContext)]
        pub unsafe fn formattingContext(&self) -> NSFormattingContext;

        #[method(setFormattingContext:)]
        pub unsafe fn setFormattingContext(&self, formattingContext: NSFormattingContext);

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
        #[method(getObjectValue:forString:range:error:_)]
        pub unsafe fn getObjectValue_forString_range_error(
            &self,
            obj: *mut *mut Object,
            string: &Foundation::NSString,
            rangep: *mut NSRange,
        ) -> Result<(), Id<Foundation::NSError, Shared>>;

        #[cfg(all(feature = "Foundation_NSDate", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other stringFromDate:)]
        pub unsafe fn stringFromDate(
            &self,
            date: &Foundation::NSDate,
        ) -> Id<Foundation::NSString, Shared>;

        #[cfg(all(feature = "Foundation_NSDate", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other dateFromString:)]
        pub unsafe fn dateFromString(
            &self,
            string: &Foundation::NSString,
        ) -> Option<Id<Foundation::NSDate, Shared>>;

        #[cfg(all(feature = "Foundation_NSDate", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other localizedStringFromDate:dateStyle:timeStyle:)]
        pub unsafe fn localizedStringFromDate_dateStyle_timeStyle(
            date: &Foundation::NSDate,
            dstyle: NSDateFormatterStyle,
            tstyle: NSDateFormatterStyle,
        ) -> Id<Foundation::NSString, Shared>;

        #[cfg(all(feature = "Foundation_NSLocale", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other dateFormatFromTemplate:options:locale:)]
        pub unsafe fn dateFormatFromTemplate_options_locale(
            tmplate: &Foundation::NSString,
            opts: NSUInteger,
            locale: Option<&Foundation::NSLocale>,
        ) -> Option<Id<Foundation::NSString, Shared>>;

        #[method(defaultFormatterBehavior)]
        pub unsafe fn defaultFormatterBehavior() -> NSDateFormatterBehavior;

        #[method(setDefaultFormatterBehavior:)]
        pub unsafe fn setDefaultFormatterBehavior(
            defaultFormatterBehavior: NSDateFormatterBehavior,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[method(setLocalizedDateFormatFromTemplate:)]
        pub unsafe fn setLocalizedDateFormatFromTemplate(
            &self,
            dateFormatTemplate: &Foundation::NSString,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other dateFormat)]
        pub unsafe fn dateFormat(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setDateFormat:)]
        pub unsafe fn setDateFormat(&self, dateFormat: Option<&Foundation::NSString>);

        #[method(dateStyle)]
        pub unsafe fn dateStyle(&self) -> NSDateFormatterStyle;

        #[method(setDateStyle:)]
        pub unsafe fn setDateStyle(&self, dateStyle: NSDateFormatterStyle);

        #[method(timeStyle)]
        pub unsafe fn timeStyle(&self) -> NSDateFormatterStyle;

        #[method(setTimeStyle:)]
        pub unsafe fn setTimeStyle(&self, timeStyle: NSDateFormatterStyle);

        #[cfg(feature = "Foundation_NSLocale")]
        #[method_id(@__retain_semantics Other locale)]
        pub unsafe fn locale(&self) -> Id<Foundation::NSLocale, Shared>;

        #[cfg(feature = "Foundation_NSLocale")]
        #[method(setLocale:)]
        pub unsafe fn setLocale(&self, locale: Option<&Foundation::NSLocale>);

        #[method(generatesCalendarDates)]
        pub unsafe fn generatesCalendarDates(&self) -> bool;

        #[method(setGeneratesCalendarDates:)]
        pub unsafe fn setGeneratesCalendarDates(&self, generatesCalendarDates: bool);

        #[method(formatterBehavior)]
        pub unsafe fn formatterBehavior(&self) -> NSDateFormatterBehavior;

        #[method(setFormatterBehavior:)]
        pub unsafe fn setFormatterBehavior(&self, formatterBehavior: NSDateFormatterBehavior);

        #[cfg(feature = "Foundation_NSTimeZone")]
        #[method_id(@__retain_semantics Other timeZone)]
        pub unsafe fn timeZone(&self) -> Id<Foundation::NSTimeZone, Shared>;

        #[cfg(feature = "Foundation_NSTimeZone")]
        #[method(setTimeZone:)]
        pub unsafe fn setTimeZone(&self, timeZone: Option<&Foundation::NSTimeZone>);

        #[cfg(feature = "Foundation_NSCalendar")]
        #[method_id(@__retain_semantics Other calendar)]
        pub unsafe fn calendar(&self) -> Id<Foundation::NSCalendar, Shared>;

        #[cfg(feature = "Foundation_NSCalendar")]
        #[method(setCalendar:)]
        pub unsafe fn setCalendar(&self, calendar: Option<&Foundation::NSCalendar>);

        #[method(isLenient)]
        pub unsafe fn isLenient(&self) -> bool;

        #[method(setLenient:)]
        pub unsafe fn setLenient(&self, lenient: bool);

        #[cfg(feature = "Foundation_NSDate")]
        #[method_id(@__retain_semantics Other twoDigitStartDate)]
        pub unsafe fn twoDigitStartDate(&self) -> Option<Id<Foundation::NSDate, Shared>>;

        #[cfg(feature = "Foundation_NSDate")]
        #[method(setTwoDigitStartDate:)]
        pub unsafe fn setTwoDigitStartDate(&self, twoDigitStartDate: Option<&Foundation::NSDate>);

        #[cfg(feature = "Foundation_NSDate")]
        #[method_id(@__retain_semantics Other defaultDate)]
        pub unsafe fn defaultDate(&self) -> Option<Id<Foundation::NSDate, Shared>>;

        #[cfg(feature = "Foundation_NSDate")]
        #[method(setDefaultDate:)]
        pub unsafe fn setDefaultDate(&self, defaultDate: Option<&Foundation::NSDate>);

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other eraSymbols)]
        pub unsafe fn eraSymbols(&self) -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method(setEraSymbols:)]
        pub unsafe fn setEraSymbols(
            &self,
            eraSymbols: Option<&Foundation::NSArray<Foundation::NSString>>,
        );

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other monthSymbols)]
        pub unsafe fn monthSymbols(&self) -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method(setMonthSymbols:)]
        pub unsafe fn setMonthSymbols(
            &self,
            monthSymbols: Option<&Foundation::NSArray<Foundation::NSString>>,
        );

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other shortMonthSymbols)]
        pub unsafe fn shortMonthSymbols(
            &self,
        ) -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method(setShortMonthSymbols:)]
        pub unsafe fn setShortMonthSymbols(
            &self,
            shortMonthSymbols: Option<&Foundation::NSArray<Foundation::NSString>>,
        );

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other weekdaySymbols)]
        pub unsafe fn weekdaySymbols(
            &self,
        ) -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method(setWeekdaySymbols:)]
        pub unsafe fn setWeekdaySymbols(
            &self,
            weekdaySymbols: Option<&Foundation::NSArray<Foundation::NSString>>,
        );

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other shortWeekdaySymbols)]
        pub unsafe fn shortWeekdaySymbols(
            &self,
        ) -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method(setShortWeekdaySymbols:)]
        pub unsafe fn setShortWeekdaySymbols(
            &self,
            shortWeekdaySymbols: Option<&Foundation::NSArray<Foundation::NSString>>,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other AMSymbol)]
        pub unsafe fn AMSymbol(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setAMSymbol:)]
        pub unsafe fn setAMSymbol(&self, AMSymbol: Option<&Foundation::NSString>);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other PMSymbol)]
        pub unsafe fn PMSymbol(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setPMSymbol:)]
        pub unsafe fn setPMSymbol(&self, PMSymbol: Option<&Foundation::NSString>);

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other longEraSymbols)]
        pub unsafe fn longEraSymbols(
            &self,
        ) -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method(setLongEraSymbols:)]
        pub unsafe fn setLongEraSymbols(
            &self,
            longEraSymbols: Option<&Foundation::NSArray<Foundation::NSString>>,
        );

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other veryShortMonthSymbols)]
        pub unsafe fn veryShortMonthSymbols(
            &self,
        ) -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method(setVeryShortMonthSymbols:)]
        pub unsafe fn setVeryShortMonthSymbols(
            &self,
            veryShortMonthSymbols: Option<&Foundation::NSArray<Foundation::NSString>>,
        );

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other standaloneMonthSymbols)]
        pub unsafe fn standaloneMonthSymbols(
            &self,
        ) -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method(setStandaloneMonthSymbols:)]
        pub unsafe fn setStandaloneMonthSymbols(
            &self,
            standaloneMonthSymbols: Option<&Foundation::NSArray<Foundation::NSString>>,
        );

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other shortStandaloneMonthSymbols)]
        pub unsafe fn shortStandaloneMonthSymbols(
            &self,
        ) -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method(setShortStandaloneMonthSymbols:)]
        pub unsafe fn setShortStandaloneMonthSymbols(
            &self,
            shortStandaloneMonthSymbols: Option<&Foundation::NSArray<Foundation::NSString>>,
        );

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other veryShortStandaloneMonthSymbols)]
        pub unsafe fn veryShortStandaloneMonthSymbols(
            &self,
        ) -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method(setVeryShortStandaloneMonthSymbols:)]
        pub unsafe fn setVeryShortStandaloneMonthSymbols(
            &self,
            veryShortStandaloneMonthSymbols: Option<&Foundation::NSArray<Foundation::NSString>>,
        );

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other veryShortWeekdaySymbols)]
        pub unsafe fn veryShortWeekdaySymbols(
            &self,
        ) -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method(setVeryShortWeekdaySymbols:)]
        pub unsafe fn setVeryShortWeekdaySymbols(
            &self,
            veryShortWeekdaySymbols: Option<&Foundation::NSArray<Foundation::NSString>>,
        );

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other standaloneWeekdaySymbols)]
        pub unsafe fn standaloneWeekdaySymbols(
            &self,
        ) -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method(setStandaloneWeekdaySymbols:)]
        pub unsafe fn setStandaloneWeekdaySymbols(
            &self,
            standaloneWeekdaySymbols: Option<&Foundation::NSArray<Foundation::NSString>>,
        );

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other shortStandaloneWeekdaySymbols)]
        pub unsafe fn shortStandaloneWeekdaySymbols(
            &self,
        ) -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method(setShortStandaloneWeekdaySymbols:)]
        pub unsafe fn setShortStandaloneWeekdaySymbols(
            &self,
            shortStandaloneWeekdaySymbols: Option<&Foundation::NSArray<Foundation::NSString>>,
        );

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other veryShortStandaloneWeekdaySymbols)]
        pub unsafe fn veryShortStandaloneWeekdaySymbols(
            &self,
        ) -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method(setVeryShortStandaloneWeekdaySymbols:)]
        pub unsafe fn setVeryShortStandaloneWeekdaySymbols(
            &self,
            veryShortStandaloneWeekdaySymbols: Option<&Foundation::NSArray<Foundation::NSString>>,
        );

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other quarterSymbols)]
        pub unsafe fn quarterSymbols(
            &self,
        ) -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method(setQuarterSymbols:)]
        pub unsafe fn setQuarterSymbols(
            &self,
            quarterSymbols: Option<&Foundation::NSArray<Foundation::NSString>>,
        );

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other shortQuarterSymbols)]
        pub unsafe fn shortQuarterSymbols(
            &self,
        ) -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method(setShortQuarterSymbols:)]
        pub unsafe fn setShortQuarterSymbols(
            &self,
            shortQuarterSymbols: Option<&Foundation::NSArray<Foundation::NSString>>,
        );

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other standaloneQuarterSymbols)]
        pub unsafe fn standaloneQuarterSymbols(
            &self,
        ) -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method(setStandaloneQuarterSymbols:)]
        pub unsafe fn setStandaloneQuarterSymbols(
            &self,
            standaloneQuarterSymbols: Option<&Foundation::NSArray<Foundation::NSString>>,
        );

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other shortStandaloneQuarterSymbols)]
        pub unsafe fn shortStandaloneQuarterSymbols(
            &self,
        ) -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method(setShortStandaloneQuarterSymbols:)]
        pub unsafe fn setShortStandaloneQuarterSymbols(
            &self,
            shortStandaloneQuarterSymbols: Option<&Foundation::NSArray<Foundation::NSString>>,
        );

        #[cfg(feature = "Foundation_NSDate")]
        #[method_id(@__retain_semantics Other gregorianStartDate)]
        pub unsafe fn gregorianStartDate(&self) -> Option<Id<Foundation::NSDate, Shared>>;

        #[cfg(feature = "Foundation_NSDate")]
        #[method(setGregorianStartDate:)]
        pub unsafe fn setGregorianStartDate(&self, gregorianStartDate: Option<&Foundation::NSDate>);

        #[method(doesRelativeDateFormatting)]
        pub unsafe fn doesRelativeDateFormatting(&self) -> bool;

        #[method(setDoesRelativeDateFormatting:)]
        pub unsafe fn setDoesRelativeDateFormatting(&self, doesRelativeDateFormatting: bool);
    }
);

extern_methods!(
    /// NSDateFormatterCompatibility
    #[cfg(feature = "Foundation_NSDateFormatter")]
    unsafe impl NSDateFormatter {
        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Init initWithDateFormat:allowNaturalLanguage:)]
        pub unsafe fn initWithDateFormat_allowNaturalLanguage(
            this: Option<Allocated<Self>>,
            format: &Foundation::NSString,
            flag: bool,
        ) -> Id<Self, Shared>;

        #[method(allowsNaturalLanguage)]
        pub unsafe fn allowsNaturalLanguage(&self) -> bool;
    }
);
