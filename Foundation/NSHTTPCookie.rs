//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation;

typed_extensible_enum!(
    pub type NSHTTPCookiePropertyKey = Foundation::NSString;
);

typed_enum!(
    pub type NSHTTPCookieStringPolicy = Foundation::NSString;
);

extern_static!(NSHTTPCookieName: &'static Foundation::NSHTTPCookiePropertyKey);

extern_static!(NSHTTPCookieValue: &'static Foundation::NSHTTPCookiePropertyKey);

extern_static!(NSHTTPCookieOriginURL: &'static Foundation::NSHTTPCookiePropertyKey);

extern_static!(NSHTTPCookieVersion: &'static Foundation::NSHTTPCookiePropertyKey);

extern_static!(NSHTTPCookieDomain: &'static Foundation::NSHTTPCookiePropertyKey);

extern_static!(NSHTTPCookiePath: &'static Foundation::NSHTTPCookiePropertyKey);

extern_static!(NSHTTPCookieSecure: &'static Foundation::NSHTTPCookiePropertyKey);

extern_static!(NSHTTPCookieExpires: &'static Foundation::NSHTTPCookiePropertyKey);

extern_static!(NSHTTPCookieComment: &'static Foundation::NSHTTPCookiePropertyKey);

extern_static!(NSHTTPCookieCommentURL: &'static Foundation::NSHTTPCookiePropertyKey);

extern_static!(NSHTTPCookieDiscard: &'static Foundation::NSHTTPCookiePropertyKey);

extern_static!(NSHTTPCookieMaximumAge: &'static Foundation::NSHTTPCookiePropertyKey);

extern_static!(NSHTTPCookiePort: &'static Foundation::NSHTTPCookiePropertyKey);

extern_static!(NSHTTPCookieSameSitePolicy: &'static Foundation::NSHTTPCookiePropertyKey);

extern_static!(NSHTTPCookieSameSiteLax: &'static Foundation::NSHTTPCookieStringPolicy);

extern_static!(NSHTTPCookieSameSiteStrict: &'static Foundation::NSHTTPCookieStringPolicy);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSHTTPCookie;

    unsafe impl ClassType for NSHTTPCookie {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Foundation_NSHTTPCookie")]
    unsafe impl NSHTTPCookie {
        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSHTTPCookiePropertyKey"
        ))]
        #[method_id(@__retain_semantics Init initWithProperties:)]
        pub unsafe fn initWithProperties(
            this: Option<Allocated<Self>>,
            properties: &Foundation::NSDictionary<Foundation::NSHTTPCookiePropertyKey, Object>,
        ) -> Option<Id<Self, Shared>>;

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSHTTPCookiePropertyKey"
        ))]
        #[method_id(@__retain_semantics Other cookieWithProperties:)]
        pub unsafe fn cookieWithProperties(
            properties: &Foundation::NSDictionary<Foundation::NSHTTPCookiePropertyKey, Object>,
        ) -> Option<Id<Foundation::NSHTTPCookie, Shared>>;

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other requestHeaderFieldsWithCookies:)]
        pub unsafe fn requestHeaderFieldsWithCookies(
            cookies: &Foundation::NSArray<Foundation::NSHTTPCookie>,
        ) -> Id<Foundation::NSDictionary<Foundation::NSString, Foundation::NSString>, Shared>;

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL"
        ))]
        #[method_id(@__retain_semantics Other cookiesWithResponseHeaderFields:forURL:)]
        pub unsafe fn cookiesWithResponseHeaderFields_forURL(
            headerFields: &Foundation::NSDictionary<Foundation::NSString, Foundation::NSString>,
            URL: &Foundation::NSURL,
        ) -> Id<Foundation::NSArray<Foundation::NSHTTPCookie>, Shared>;

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSHTTPCookiePropertyKey"
        ))]
        #[method_id(@__retain_semantics Other properties)]
        pub unsafe fn properties(
            &self,
        ) -> Option<Id<Foundation::NSDictionary<Foundation::NSHTTPCookiePropertyKey, Object>, Shared>>;

        #[method(version)]
        pub unsafe fn version(&self) -> NSUInteger;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other name)]
        pub unsafe fn name(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other value)]
        pub unsafe fn value(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSDate")]
        #[method_id(@__retain_semantics Other expiresDate)]
        pub unsafe fn expiresDate(&self) -> Option<Id<Foundation::NSDate, Shared>>;

        #[method(isSessionOnly)]
        pub unsafe fn isSessionOnly(&self) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other domain)]
        pub unsafe fn domain(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other path)]
        pub unsafe fn path(&self) -> Id<Foundation::NSString, Shared>;

        #[method(isSecure)]
        pub unsafe fn isSecure(&self) -> bool;

        #[method(isHTTPOnly)]
        pub unsafe fn isHTTPOnly(&self) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other comment)]
        pub unsafe fn comment(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "Foundation_NSURL")]
        #[method_id(@__retain_semantics Other commentURL)]
        pub unsafe fn commentURL(&self) -> Option<Id<Foundation::NSURL, Shared>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
        #[method_id(@__retain_semantics Other portList)]
        pub unsafe fn portList(
            &self,
        ) -> Option<Id<Foundation::NSArray<Foundation::NSNumber>, Shared>>;

        #[cfg(feature = "Foundation_NSHTTPCookieStringPolicy")]
        #[method_id(@__retain_semantics Other sameSitePolicy)]
        pub unsafe fn sameSitePolicy(
            &self,
        ) -> Option<Id<Foundation::NSHTTPCookieStringPolicy, Shared>>;
    }
);
