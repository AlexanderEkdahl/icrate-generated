//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation;

ns_options!(
    #[underlying(NSUInteger)]
    pub enum NSFileCoordinatorReadingOptions {
        NSFileCoordinatorReadingWithoutChanges = 1 << 0,
        NSFileCoordinatorReadingResolvesSymbolicLink = 1 << 1,
        NSFileCoordinatorReadingImmediatelyAvailableMetadataOnly = 1 << 2,
        NSFileCoordinatorReadingForUploading = 1 << 3,
    }
);

ns_options!(
    #[underlying(NSUInteger)]
    pub enum NSFileCoordinatorWritingOptions {
        NSFileCoordinatorWritingForDeleting = 1 << 0,
        NSFileCoordinatorWritingForMoving = 1 << 1,
        NSFileCoordinatorWritingForMerging = 1 << 2,
        NSFileCoordinatorWritingForReplacing = 1 << 3,
        NSFileCoordinatorWritingContentIndependentMetadataOnly = 1 << 4,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSFileAccessIntent;

    unsafe impl ClassType for NSFileAccessIntent {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Foundation_NSFileAccessIntent")]
    unsafe impl NSFileAccessIntent {
        #[cfg(feature = "Foundation_NSURL")]
        #[method_id(@__retain_semantics Other readingIntentWithURL:options:)]
        pub unsafe fn readingIntentWithURL_options(
            url: &Foundation::NSURL,
            options: NSFileCoordinatorReadingOptions,
        ) -> Id<Self, Shared>;

        #[cfg(feature = "Foundation_NSURL")]
        #[method_id(@__retain_semantics Other writingIntentWithURL:options:)]
        pub unsafe fn writingIntentWithURL_options(
            url: &Foundation::NSURL,
            options: NSFileCoordinatorWritingOptions,
        ) -> Id<Self, Shared>;

        #[cfg(feature = "Foundation_NSURL")]
        #[method_id(@__retain_semantics Other URL)]
        pub unsafe fn URL(&self) -> Id<Foundation::NSURL, Shared>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSFileCoordinator;

    unsafe impl ClassType for NSFileCoordinator {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Foundation_NSFileCoordinator")]
    unsafe impl NSFileCoordinator {
        #[cfg(feature = "Foundation_NSFilePresenter")]
        #[method(addFilePresenter:)]
        pub unsafe fn addFilePresenter(filePresenter: &Foundation::NSFilePresenter);

        #[cfg(feature = "Foundation_NSFilePresenter")]
        #[method(removeFilePresenter:)]
        pub unsafe fn removeFilePresenter(filePresenter: &Foundation::NSFilePresenter);

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSFilePresenter"))]
        #[method_id(@__retain_semantics Other filePresenters)]
        pub unsafe fn filePresenters(
        ) -> Id<Foundation::NSArray<Foundation::NSFilePresenter>, Shared>;

        #[cfg(feature = "Foundation_NSFilePresenter")]
        #[method_id(@__retain_semantics Init initWithFilePresenter:)]
        pub unsafe fn initWithFilePresenter(
            this: Option<Allocated<Self>>,
            filePresenterOrNil: Option<&Foundation::NSFilePresenter>,
        ) -> Id<Self, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other purposeIdentifier)]
        pub unsafe fn purposeIdentifier(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setPurposeIdentifier:)]
        pub unsafe fn setPurposeIdentifier(&self, purposeIdentifier: &Foundation::NSString);

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSError",
            feature = "Foundation_NSFileAccessIntent",
            feature = "Foundation_NSOperationQueue"
        ))]
        #[method(coordinateAccessWithIntents:queue:byAccessor:)]
        pub unsafe fn coordinateAccessWithIntents_queue_byAccessor(
            &self,
            intents: &Foundation::NSArray<Foundation::NSFileAccessIntent>,
            queue: &Foundation::NSOperationQueue,
            accessor: &Block<(*mut Foundation::NSError,), ()>,
        );

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[method(coordinateReadingItemAtURL:options:error:byAccessor:)]
        pub unsafe fn coordinateReadingItemAtURL_options_error_byAccessor(
            &self,
            url: &Foundation::NSURL,
            options: NSFileCoordinatorReadingOptions,
            outError: *mut *mut Foundation::NSError,
            reader: &Block<(NonNull<Foundation::NSURL>,), ()>,
        );

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[method(coordinateWritingItemAtURL:options:error:byAccessor:)]
        pub unsafe fn coordinateWritingItemAtURL_options_error_byAccessor(
            &self,
            url: &Foundation::NSURL,
            options: NSFileCoordinatorWritingOptions,
            outError: *mut *mut Foundation::NSError,
            writer: &Block<(NonNull<Foundation::NSURL>,), ()>,
        );

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[method(coordinateReadingItemAtURL:options:writingItemAtURL:options:error:byAccessor:)]
        pub unsafe fn coordinateReadingItemAtURL_options_writingItemAtURL_options_error_byAccessor(
            &self,
            readingURL: &Foundation::NSURL,
            readingOptions: NSFileCoordinatorReadingOptions,
            writingURL: &Foundation::NSURL,
            writingOptions: NSFileCoordinatorWritingOptions,
            outError: *mut *mut Foundation::NSError,
            readerWriter: &Block<(NonNull<Foundation::NSURL>, NonNull<Foundation::NSURL>), ()>,
        );

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[method(coordinateWritingItemAtURL:options:writingItemAtURL:options:error:byAccessor:)]
        pub unsafe fn coordinateWritingItemAtURL_options_writingItemAtURL_options_error_byAccessor(
            &self,
            url1: &Foundation::NSURL,
            options1: NSFileCoordinatorWritingOptions,
            url2: &Foundation::NSURL,
            options2: NSFileCoordinatorWritingOptions,
            outError: *mut *mut Foundation::NSError,
            writer: &Block<(NonNull<Foundation::NSURL>, NonNull<Foundation::NSURL>), ()>,
        );

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSError",
            feature = "Foundation_NSURL"
        ))]
        #[method(prepareForReadingItemsAtURLs:options:writingItemsAtURLs:options:error:byAccessor:)]
        pub unsafe fn prepareForReadingItemsAtURLs_options_writingItemsAtURLs_options_error_byAccessor(
            &self,
            readingURLs: &Foundation::NSArray<Foundation::NSURL>,
            readingOptions: NSFileCoordinatorReadingOptions,
            writingURLs: &Foundation::NSArray<Foundation::NSURL>,
            writingOptions: NSFileCoordinatorWritingOptions,
            outError: *mut *mut Foundation::NSError,
            batchAccessor: &Block<(NonNull<Block<(), ()>>,), ()>,
        );

        #[cfg(feature = "Foundation_NSURL")]
        #[method(itemAtURL:willMoveToURL:)]
        pub unsafe fn itemAtURL_willMoveToURL(
            &self,
            oldURL: &Foundation::NSURL,
            newURL: &Foundation::NSURL,
        );

        #[cfg(feature = "Foundation_NSURL")]
        #[method(itemAtURL:didMoveToURL:)]
        pub unsafe fn itemAtURL_didMoveToURL(
            &self,
            oldURL: &Foundation::NSURL,
            newURL: &Foundation::NSURL,
        );

        #[cfg(all(
            feature = "Foundation_NSSet",
            feature = "Foundation_NSURL",
            feature = "Foundation_NSURLResourceKey"
        ))]
        #[method(itemAtURL:didChangeUbiquityAttributes:)]
        pub unsafe fn itemAtURL_didChangeUbiquityAttributes(
            &self,
            url: &Foundation::NSURL,
            attributes: &Foundation::NSSet<Foundation::NSURLResourceKey>,
        );

        #[method(cancel)]
        pub unsafe fn cancel(&self);
    }
);
