//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSConnection;

    unsafe impl ClassType for NSConnection {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Foundation_NSConnection")]
    unsafe impl NSConnection {
        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSNumber",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other statistics)]
        pub unsafe fn statistics(
            &self,
        ) -> Id<Foundation::NSDictionary<Foundation::NSString, Foundation::NSNumber>, Shared>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other allConnections)]
        pub unsafe fn allConnections() -> Id<Foundation::NSArray<Foundation::NSConnection>, Shared>;

        #[method_id(@__retain_semantics Other defaultConnection)]
        pub unsafe fn defaultConnection() -> Id<Foundation::NSConnection, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other connectionWithRegisteredName:host:)]
        pub unsafe fn connectionWithRegisteredName_host(
            name: &Foundation::NSString,
            hostName: Option<&Foundation::NSString>,
        ) -> Option<Id<Self, Shared>>;

        #[cfg(all(
            feature = "Foundation_NSPortNameServer",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other connectionWithRegisteredName:host:usingNameServer:)]
        pub unsafe fn connectionWithRegisteredName_host_usingNameServer(
            name: &Foundation::NSString,
            hostName: Option<&Foundation::NSString>,
            server: &Foundation::NSPortNameServer,
        ) -> Option<Id<Self, Shared>>;

        #[cfg(all(
            feature = "Foundation_NSDistantObject",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other rootProxyForConnectionWithRegisteredName:host:)]
        pub unsafe fn rootProxyForConnectionWithRegisteredName_host(
            name: &Foundation::NSString,
            hostName: Option<&Foundation::NSString>,
        ) -> Option<Id<Foundation::NSDistantObject, Shared>>;

        #[cfg(all(
            feature = "Foundation_NSDistantObject",
            feature = "Foundation_NSPortNameServer",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other rootProxyForConnectionWithRegisteredName:host:usingNameServer:)]
        pub unsafe fn rootProxyForConnectionWithRegisteredName_host_usingNameServer(
            name: &Foundation::NSString,
            hostName: Option<&Foundation::NSString>,
            server: &Foundation::NSPortNameServer,
        ) -> Option<Id<Foundation::NSDistantObject, Shared>>;

        #[cfg(all(
            feature = "Foundation_NSPortNameServer",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other serviceConnectionWithName:rootObject:usingNameServer:)]
        pub unsafe fn serviceConnectionWithName_rootObject_usingNameServer(
            name: &Foundation::NSString,
            root: &Object,
            server: &Foundation::NSPortNameServer,
        ) -> Option<Id<Self, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other serviceConnectionWithName:rootObject:)]
        pub unsafe fn serviceConnectionWithName_rootObject(
            name: &Foundation::NSString,
            root: &Object,
        ) -> Option<Id<Self, Shared>>;

        #[method(requestTimeout)]
        pub unsafe fn requestTimeout(&self) -> NSTimeInterval;

        #[method(setRequestTimeout:)]
        pub unsafe fn setRequestTimeout(&self, requestTimeout: NSTimeInterval);

        #[method(replyTimeout)]
        pub unsafe fn replyTimeout(&self) -> NSTimeInterval;

        #[method(setReplyTimeout:)]
        pub unsafe fn setReplyTimeout(&self, replyTimeout: NSTimeInterval);

        #[method_id(@__retain_semantics Other rootObject)]
        pub unsafe fn rootObject(&self) -> Option<Id<Object, Shared>>;

        #[method(setRootObject:)]
        pub unsafe fn setRootObject(&self, rootObject: Option<&Object>);

        #[cfg(feature = "Foundation_NSConnectionDelegate")]
        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(&self) -> Option<Id<Foundation::NSConnectionDelegate, Shared>>;

        #[cfg(feature = "Foundation_NSConnectionDelegate")]
        #[method(setDelegate:)]
        pub unsafe fn setDelegate(&self, delegate: Option<&Foundation::NSConnectionDelegate>);

        #[method(independentConversationQueueing)]
        pub unsafe fn independentConversationQueueing(&self) -> bool;

        #[method(setIndependentConversationQueueing:)]
        pub unsafe fn setIndependentConversationQueueing(
            &self,
            independentConversationQueueing: bool,
        );

        #[method(isValid)]
        pub unsafe fn isValid(&self) -> bool;

        #[cfg(feature = "Foundation_NSDistantObject")]
        #[method_id(@__retain_semantics Other rootProxy)]
        pub unsafe fn rootProxy(&self) -> Id<Foundation::NSDistantObject, Shared>;

        #[method(invalidate)]
        pub unsafe fn invalidate(&self);

        #[cfg(feature = "Foundation_NSString")]
        #[method(addRequestMode:)]
        pub unsafe fn addRequestMode(&self, rmode: &Foundation::NSString);

        #[cfg(feature = "Foundation_NSString")]
        #[method(removeRequestMode:)]
        pub unsafe fn removeRequestMode(&self, rmode: &Foundation::NSString);

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other requestModes)]
        pub unsafe fn requestModes(&self) -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(registerName:)]
        pub unsafe fn registerName(&self, name: Option<&Foundation::NSString>) -> bool;

        #[cfg(all(
            feature = "Foundation_NSPortNameServer",
            feature = "Foundation_NSString"
        ))]
        #[method(registerName:withNameServer:)]
        pub unsafe fn registerName_withNameServer(
            &self,
            name: Option<&Foundation::NSString>,
            server: &Foundation::NSPortNameServer,
        ) -> bool;

        #[cfg(feature = "Foundation_NSPort")]
        #[method_id(@__retain_semantics Other connectionWithReceivePort:sendPort:)]
        pub unsafe fn connectionWithReceivePort_sendPort(
            receivePort: Option<&Foundation::NSPort>,
            sendPort: Option<&Foundation::NSPort>,
        ) -> Option<Id<Self, Shared>>;

        #[method_id(@__retain_semantics Other currentConversation)]
        pub unsafe fn currentConversation() -> Option<Id<Object, Shared>>;

        #[cfg(feature = "Foundation_NSPort")]
        #[method_id(@__retain_semantics Init initWithReceivePort:sendPort:)]
        pub unsafe fn initWithReceivePort_sendPort(
            this: Option<Allocated<Self>>,
            receivePort: Option<&Foundation::NSPort>,
            sendPort: Option<&Foundation::NSPort>,
        ) -> Option<Id<Self, Shared>>;

        #[cfg(feature = "Foundation_NSPort")]
        #[method_id(@__retain_semantics Other sendPort)]
        pub unsafe fn sendPort(&self) -> Id<Foundation::NSPort, Shared>;

        #[cfg(feature = "Foundation_NSPort")]
        #[method_id(@__retain_semantics Other receivePort)]
        pub unsafe fn receivePort(&self) -> Id<Foundation::NSPort, Shared>;

        #[method(enableMultipleThreads)]
        pub unsafe fn enableMultipleThreads(&self);

        #[method(multipleThreadsEnabled)]
        pub unsafe fn multipleThreadsEnabled(&self) -> bool;

        #[cfg(feature = "Foundation_NSRunLoop")]
        #[method(addRunLoop:)]
        pub unsafe fn addRunLoop(&self, runloop: &Foundation::NSRunLoop);

        #[cfg(feature = "Foundation_NSRunLoop")]
        #[method(removeRunLoop:)]
        pub unsafe fn removeRunLoop(&self, runloop: &Foundation::NSRunLoop);

        #[method(runInNewThread)]
        pub unsafe fn runInNewThread(&self);

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other remoteObjects)]
        pub unsafe fn remoteObjects(&self) -> Id<Foundation::NSArray, Shared>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other localObjects)]
        pub unsafe fn localObjects(&self) -> Id<Foundation::NSArray, Shared>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method(dispatchWithComponents:)]
        pub unsafe fn dispatchWithComponents(&self, components: &Foundation::NSArray);
    }
);

extern_static!(NSConnectionReplyMode: &'static Foundation::NSString);

extern_static!(NSConnectionDidDieNotification: &'static Foundation::NSString);

extern_protocol!(
    pub struct NSConnectionDelegate;

    unsafe impl ProtocolType for NSConnectionDelegate {
        #[optional]
        #[method(makeNewConnection:sender:)]
        pub unsafe fn makeNewConnection_sender(
            &self,
            conn: &Foundation::NSConnection,
            ancestor: &Foundation::NSConnection,
        ) -> bool;

        #[optional]
        #[method(connection:shouldMakeNewConnection:)]
        pub unsafe fn connection_shouldMakeNewConnection(
            &self,
            ancestor: &Foundation::NSConnection,
            conn: &Foundation::NSConnection,
        ) -> bool;

        #[optional]
        #[method_id(@__retain_semantics Other authenticationDataForComponents:)]
        pub unsafe fn authenticationDataForComponents(
            &self,
            components: &Foundation::NSArray,
        ) -> Id<Foundation::NSData, Shared>;

        #[optional]
        #[method(authenticateComponents:withData:)]
        pub unsafe fn authenticateComponents_withData(
            &self,
            components: &Foundation::NSArray,
            signature: &Foundation::NSData,
        ) -> bool;

        #[optional]
        #[method_id(@__retain_semantics Other createConversationForConnection:)]
        pub unsafe fn createConversationForConnection(
            &self,
            conn: &Foundation::NSConnection,
        ) -> Id<Object, Shared>;

        #[optional]
        #[method(connection:handleRequest:)]
        pub unsafe fn connection_handleRequest(
            &self,
            connection: &Foundation::NSConnection,
            doreq: &Foundation::NSDistantObjectRequest,
        ) -> bool;
    }
);

extern_static!(NSFailedAuthenticationException: &'static Foundation::NSString);

extern_static!(NSConnectionDidInitializeNotification: &'static Foundation::NSString);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSDistantObjectRequest;

    unsafe impl ClassType for NSDistantObjectRequest {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Foundation_NSDistantObjectRequest")]
    unsafe impl NSDistantObjectRequest {
        #[cfg(feature = "Foundation_NSInvocation")]
        #[method_id(@__retain_semantics Other invocation)]
        pub unsafe fn invocation(&self) -> Id<Foundation::NSInvocation, Shared>;

        #[cfg(feature = "Foundation_NSConnection")]
        #[method_id(@__retain_semantics Other connection)]
        pub unsafe fn connection(&self) -> Id<Foundation::NSConnection, Shared>;

        #[method_id(@__retain_semantics Other conversation)]
        pub unsafe fn conversation(&self) -> Id<Object, Shared>;

        #[cfg(feature = "Foundation_NSException")]
        #[method(replyWithException:)]
        pub unsafe fn replyWithException(&self, exception: Option<&Foundation::NSException>);
    }
);
