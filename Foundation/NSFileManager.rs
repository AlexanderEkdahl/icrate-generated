//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation;

typed_extensible_enum!(
    pub type NSFileAttributeKey = Foundation::NSString;
);

typed_enum!(
    pub type NSFileAttributeType = Foundation::NSString;
);

typed_enum!(
    pub type NSFileProtectionType = Foundation::NSString;
);

typed_extensible_enum!(
    pub type NSFileProviderServiceName = Foundation::NSString;
);

ns_options!(
    #[underlying(NSUInteger)]
    pub enum NSVolumeEnumerationOptions {
        NSVolumeEnumerationSkipHiddenVolumes = 1 << 1,
        NSVolumeEnumerationProduceFileReferenceURLs = 1 << 2,
    }
);

ns_options!(
    #[underlying(NSUInteger)]
    pub enum NSDirectoryEnumerationOptions {
        NSDirectoryEnumerationSkipsSubdirectoryDescendants = 1 << 0,
        NSDirectoryEnumerationSkipsPackageDescendants = 1 << 1,
        NSDirectoryEnumerationSkipsHiddenFiles = 1 << 2,
        NSDirectoryEnumerationIncludesDirectoriesPostOrder = 1 << 3,
        NSDirectoryEnumerationProducesRelativePathURLs = 1 << 4,
    }
);

ns_options!(
    #[underlying(NSUInteger)]
    pub enum NSFileManagerItemReplacementOptions {
        NSFileManagerItemReplacementUsingNewMetadataOnly = 1 << 0,
        NSFileManagerItemReplacementWithoutDeletingBackupItem = 1 << 1,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSURLRelationship {
        NSURLRelationshipContains = 0,
        NSURLRelationshipSame = 1,
        NSURLRelationshipOther = 2,
    }
);

ns_options!(
    #[underlying(NSUInteger)]
    pub enum NSFileManagerUnmountOptions {
        NSFileManagerUnmountAllPartitionsAndEjectDisk = 1 << 0,
        NSFileManagerUnmountWithoutUI = 1 << 1,
    }
);

extern_static!(
    NSFileManagerUnmountDissentingProcessIdentifierErrorKey: &'static Foundation::NSString
);

extern_static!(NSUbiquityIdentityDidChangeNotification: &'static Foundation::NSNotificationName);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSFileManager;

    unsafe impl ClassType for NSFileManager {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Foundation_NSFileManager")]
    unsafe impl NSFileManager {
        #[method_id(@__retain_semantics Other defaultManager)]
        pub unsafe fn defaultManager() -> Id<Foundation::NSFileManager, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSURL"))]
        #[method_id(@__retain_semantics Other mountedVolumeURLsIncludingResourceValuesForKeys:options:)]
        pub unsafe fn mountedVolumeURLsIncludingResourceValuesForKeys_options(
            &self,
            propertyKeys: Option<&Foundation::NSArray<Foundation::NSURLResourceKey>>,
            options: NSVolumeEnumerationOptions,
        ) -> Option<Id<Foundation::NSArray<Foundation::NSURL>, Shared>>;

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[method(unmountVolumeAtURL:options:completionHandler:)]
        pub unsafe fn unmountVolumeAtURL_options_completionHandler(
            &self,
            url: &Foundation::NSURL,
            mask: NSFileManagerUnmountOptions,
            completionHandler: &Block<(*mut Foundation::NSError,), ()>,
        );

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSError",
            feature = "Foundation_NSURL"
        ))]
        #[method_id(@__retain_semantics Other contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:_)]
        pub unsafe fn contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error(
            &self,
            url: &Foundation::NSURL,
            keys: Option<&Foundation::NSArray<Foundation::NSURLResourceKey>>,
            mask: NSDirectoryEnumerationOptions,
        ) -> Result<
            Id<Foundation::NSArray<Foundation::NSURL>, Shared>,
            Id<Foundation::NSError, Shared>,
        >;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSURL"))]
        #[method_id(@__retain_semantics Other URLsForDirectory:inDomains:)]
        pub unsafe fn URLsForDirectory_inDomains(
            &self,
            directory: NSSearchPathDirectory,
            domainMask: NSSearchPathDomainMask,
        ) -> Id<Foundation::NSArray<Foundation::NSURL>, Shared>;

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[method_id(@__retain_semantics Other URLForDirectory:inDomain:appropriateForURL:create:error:_)]
        pub unsafe fn URLForDirectory_inDomain_appropriateForURL_create_error(
            &self,
            directory: NSSearchPathDirectory,
            domain: NSSearchPathDomainMask,
            url: Option<&Foundation::NSURL>,
            shouldCreate: bool,
        ) -> Result<Id<Foundation::NSURL, Shared>, Id<Foundation::NSError, Shared>>;

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[method(getRelationship:ofDirectoryAtURL:toItemAtURL:error:_)]
        pub unsafe fn getRelationship_ofDirectoryAtURL_toItemAtURL_error(
            &self,
            outRelationship: NonNull<NSURLRelationship>,
            directoryURL: &Foundation::NSURL,
            otherURL: &Foundation::NSURL,
        ) -> Result<(), Id<Foundation::NSError, Shared>>;

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[method(getRelationship:ofDirectory:inDomain:toItemAtURL:error:_)]
        pub unsafe fn getRelationship_ofDirectory_inDomain_toItemAtURL_error(
            &self,
            outRelationship: NonNull<NSURLRelationship>,
            directory: NSSearchPathDirectory,
            domainMask: NSSearchPathDomainMask,
            url: &Foundation::NSURL,
        ) -> Result<(), Id<Foundation::NSError, Shared>>;

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSURL"
        ))]
        #[method(createDirectoryAtURL:withIntermediateDirectories:attributes:error:_)]
        pub unsafe fn createDirectoryAtURL_withIntermediateDirectories_attributes_error(
            &self,
            url: &Foundation::NSURL,
            createIntermediates: bool,
            attributes: Option<&Foundation::NSDictionary<Foundation::NSFileAttributeKey, Object>>,
        ) -> Result<(), Id<Foundation::NSError, Shared>>;

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[method(createSymbolicLinkAtURL:withDestinationURL:error:_)]
        pub unsafe fn createSymbolicLinkAtURL_withDestinationURL_error(
            &self,
            url: &Foundation::NSURL,
            destURL: &Foundation::NSURL,
        ) -> Result<(), Id<Foundation::NSError, Shared>>;

        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(&self) -> Option<Id<Foundation::NSFileManagerDelegate, Shared>>;

        #[method(setDelegate:)]
        pub unsafe fn setDelegate(&self, delegate: Option<&Foundation::NSFileManagerDelegate>);

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSString"
        ))]
        #[method(setAttributes:ofItemAtPath:error:_)]
        pub unsafe fn setAttributes_ofItemAtPath_error(
            &self,
            attributes: &Foundation::NSDictionary<Foundation::NSFileAttributeKey, Object>,
            path: &Foundation::NSString,
        ) -> Result<(), Id<Foundation::NSError, Shared>>;

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSString"
        ))]
        #[method(createDirectoryAtPath:withIntermediateDirectories:attributes:error:_)]
        pub unsafe fn createDirectoryAtPath_withIntermediateDirectories_attributes_error(
            &self,
            path: &Foundation::NSString,
            createIntermediates: bool,
            attributes: Option<&Foundation::NSDictionary<Foundation::NSFileAttributeKey, Object>>,
        ) -> Result<(), Id<Foundation::NSError, Shared>>;

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSError",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other contentsOfDirectoryAtPath:error:_)]
        pub unsafe fn contentsOfDirectoryAtPath_error(
            &self,
            path: &Foundation::NSString,
        ) -> Result<
            Id<Foundation::NSArray<Foundation::NSString>, Shared>,
            Id<Foundation::NSError, Shared>,
        >;

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSError",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other subpathsOfDirectoryAtPath:error:_)]
        pub unsafe fn subpathsOfDirectoryAtPath_error(
            &self,
            path: &Foundation::NSString,
        ) -> Result<
            Id<Foundation::NSArray<Foundation::NSString>, Shared>,
            Id<Foundation::NSError, Shared>,
        >;

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other attributesOfItemAtPath:error:_)]
        pub unsafe fn attributesOfItemAtPath_error(
            &self,
            path: &Foundation::NSString,
        ) -> Result<
            Id<Foundation::NSDictionary<Foundation::NSFileAttributeKey, Object>, Shared>,
            Id<Foundation::NSError, Shared>,
        >;

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other attributesOfFileSystemForPath:error:_)]
        pub unsafe fn attributesOfFileSystemForPath_error(
            &self,
            path: &Foundation::NSString,
        ) -> Result<
            Id<Foundation::NSDictionary<Foundation::NSFileAttributeKey, Object>, Shared>,
            Id<Foundation::NSError, Shared>,
        >;

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
        #[method(createSymbolicLinkAtPath:withDestinationPath:error:_)]
        pub unsafe fn createSymbolicLinkAtPath_withDestinationPath_error(
            &self,
            path: &Foundation::NSString,
            destPath: &Foundation::NSString,
        ) -> Result<(), Id<Foundation::NSError, Shared>>;

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other destinationOfSymbolicLinkAtPath:error:_)]
        pub unsafe fn destinationOfSymbolicLinkAtPath_error(
            &self,
            path: &Foundation::NSString,
        ) -> Result<Id<Foundation::NSString, Shared>, Id<Foundation::NSError, Shared>>;

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
        #[method(copyItemAtPath:toPath:error:_)]
        pub unsafe fn copyItemAtPath_toPath_error(
            &self,
            srcPath: &Foundation::NSString,
            dstPath: &Foundation::NSString,
        ) -> Result<(), Id<Foundation::NSError, Shared>>;

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
        #[method(moveItemAtPath:toPath:error:_)]
        pub unsafe fn moveItemAtPath_toPath_error(
            &self,
            srcPath: &Foundation::NSString,
            dstPath: &Foundation::NSString,
        ) -> Result<(), Id<Foundation::NSError, Shared>>;

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
        #[method(linkItemAtPath:toPath:error:_)]
        pub unsafe fn linkItemAtPath_toPath_error(
            &self,
            srcPath: &Foundation::NSString,
            dstPath: &Foundation::NSString,
        ) -> Result<(), Id<Foundation::NSError, Shared>>;

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSString"))]
        #[method(removeItemAtPath:error:_)]
        pub unsafe fn removeItemAtPath_error(
            &self,
            path: &Foundation::NSString,
        ) -> Result<(), Id<Foundation::NSError, Shared>>;

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[method(copyItemAtURL:toURL:error:_)]
        pub unsafe fn copyItemAtURL_toURL_error(
            &self,
            srcURL: &Foundation::NSURL,
            dstURL: &Foundation::NSURL,
        ) -> Result<(), Id<Foundation::NSError, Shared>>;

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[method(moveItemAtURL:toURL:error:_)]
        pub unsafe fn moveItemAtURL_toURL_error(
            &self,
            srcURL: &Foundation::NSURL,
            dstURL: &Foundation::NSURL,
        ) -> Result<(), Id<Foundation::NSError, Shared>>;

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[method(linkItemAtURL:toURL:error:_)]
        pub unsafe fn linkItemAtURL_toURL_error(
            &self,
            srcURL: &Foundation::NSURL,
            dstURL: &Foundation::NSURL,
        ) -> Result<(), Id<Foundation::NSError, Shared>>;

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[method(removeItemAtURL:error:_)]
        pub unsafe fn removeItemAtURL_error(
            &self,
            URL: &Foundation::NSURL,
        ) -> Result<(), Id<Foundation::NSError, Shared>>;

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[method(trashItemAtURL:resultingItemURL:error:_)]
        pub unsafe fn trashItemAtURL_resultingItemURL_error(
            &self,
            url: &Foundation::NSURL,
            outResultingURL: *mut *mut Foundation::NSURL,
        ) -> Result<(), Id<Foundation::NSError, Shared>>;

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other fileAttributesAtPath:traverseLink:)]
        pub unsafe fn fileAttributesAtPath_traverseLink(
            &self,
            path: &Foundation::NSString,
            yorn: bool,
        ) -> Option<Id<Foundation::NSDictionary, Shared>>;

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method(changeFileAttributes:atPath:)]
        pub unsafe fn changeFileAttributes_atPath(
            &self,
            attributes: &Foundation::NSDictionary,
            path: &Foundation::NSString,
        ) -> bool;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other directoryContentsAtPath:)]
        pub unsafe fn directoryContentsAtPath(
            &self,
            path: &Foundation::NSString,
        ) -> Option<Id<Foundation::NSArray, Shared>>;

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other fileSystemAttributesAtPath:)]
        pub unsafe fn fileSystemAttributesAtPath(
            &self,
            path: &Foundation::NSString,
        ) -> Option<Id<Foundation::NSDictionary, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other pathContentOfSymbolicLinkAtPath:)]
        pub unsafe fn pathContentOfSymbolicLinkAtPath(
            &self,
            path: &Foundation::NSString,
        ) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(createSymbolicLinkAtPath:pathContent:)]
        pub unsafe fn createSymbolicLinkAtPath_pathContent(
            &self,
            path: &Foundation::NSString,
            otherpath: &Foundation::NSString,
        ) -> bool;

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method(createDirectoryAtPath:attributes:)]
        pub unsafe fn createDirectoryAtPath_attributes(
            &self,
            path: &Foundation::NSString,
            attributes: &Foundation::NSDictionary,
        ) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method(linkPath:toPath:handler:)]
        pub unsafe fn linkPath_toPath_handler(
            &self,
            src: &Foundation::NSString,
            dest: &Foundation::NSString,
            handler: Option<&Object>,
        ) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method(copyPath:toPath:handler:)]
        pub unsafe fn copyPath_toPath_handler(
            &self,
            src: &Foundation::NSString,
            dest: &Foundation::NSString,
            handler: Option<&Object>,
        ) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method(movePath:toPath:handler:)]
        pub unsafe fn movePath_toPath_handler(
            &self,
            src: &Foundation::NSString,
            dest: &Foundation::NSString,
            handler: Option<&Object>,
        ) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method(removeFileAtPath:handler:)]
        pub unsafe fn removeFileAtPath_handler(
            &self,
            path: &Foundation::NSString,
            handler: Option<&Object>,
        ) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other currentDirectoryPath)]
        pub unsafe fn currentDirectoryPath(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(changeCurrentDirectoryPath:)]
        pub unsafe fn changeCurrentDirectoryPath(&self, path: &Foundation::NSString) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method(fileExistsAtPath:)]
        pub unsafe fn fileExistsAtPath(&self, path: &Foundation::NSString) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method(fileExistsAtPath:isDirectory:)]
        pub unsafe fn fileExistsAtPath_isDirectory(
            &self,
            path: &Foundation::NSString,
            isDirectory: *mut Bool,
        ) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method(isReadableFileAtPath:)]
        pub unsafe fn isReadableFileAtPath(&self, path: &Foundation::NSString) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method(isWritableFileAtPath:)]
        pub unsafe fn isWritableFileAtPath(&self, path: &Foundation::NSString) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method(isExecutableFileAtPath:)]
        pub unsafe fn isExecutableFileAtPath(&self, path: &Foundation::NSString) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method(isDeletableFileAtPath:)]
        pub unsafe fn isDeletableFileAtPath(&self, path: &Foundation::NSString) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method(contentsEqualAtPath:andPath:)]
        pub unsafe fn contentsEqualAtPath_andPath(
            &self,
            path1: &Foundation::NSString,
            path2: &Foundation::NSString,
        ) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other displayNameAtPath:)]
        pub unsafe fn displayNameAtPath(
            &self,
            path: &Foundation::NSString,
        ) -> Id<Foundation::NSString, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other componentsToDisplayForPath:)]
        pub unsafe fn componentsToDisplayForPath(
            &self,
            path: &Foundation::NSString,
        ) -> Option<Id<Foundation::NSArray<Foundation::NSString>, Shared>>;

        #[cfg(all(
            feature = "Foundation_NSDirectoryEnumerator",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other enumeratorAtPath:)]
        pub unsafe fn enumeratorAtPath(
            &self,
            path: &Foundation::NSString,
        ) -> Option<Id<Foundation::NSDirectoryEnumerator<Foundation::NSString>, Shared>>;

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSDirectoryEnumerator",
            feature = "Foundation_NSError",
            feature = "Foundation_NSURL"
        ))]
        #[method_id(@__retain_semantics Other enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:)]
        pub unsafe fn enumeratorAtURL_includingPropertiesForKeys_options_errorHandler(
            &self,
            url: &Foundation::NSURL,
            keys: Option<&Foundation::NSArray<Foundation::NSURLResourceKey>>,
            mask: NSDirectoryEnumerationOptions,
            handler: Option<
                &Block<(NonNull<Foundation::NSURL>, NonNull<Foundation::NSError>), Bool>,
            >,
        ) -> Option<Id<Foundation::NSDirectoryEnumerator<Foundation::NSURL>, Shared>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other subpathsAtPath:)]
        pub unsafe fn subpathsAtPath(
            &self,
            path: &Foundation::NSString,
        ) -> Option<Id<Foundation::NSArray<Foundation::NSString>, Shared>>;

        #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other contentsAtPath:)]
        pub unsafe fn contentsAtPath(
            &self,
            path: &Foundation::NSString,
        ) -> Option<Id<Foundation::NSData, Shared>>;

        #[cfg(all(
            feature = "Foundation_NSData",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[method(createFileAtPath:contents:attributes:)]
        pub unsafe fn createFileAtPath_contents_attributes(
            &self,
            path: &Foundation::NSString,
            data: Option<&Foundation::NSData>,
            attr: Option<&Foundation::NSDictionary<Foundation::NSFileAttributeKey, Object>>,
        ) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method(fileSystemRepresentationWithPath:)]
        pub unsafe fn fileSystemRepresentationWithPath(
            &self,
            path: &Foundation::NSString,
        ) -> NonNull<c_char>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other stringWithFileSystemRepresentation:length:)]
        pub unsafe fn stringWithFileSystemRepresentation_length(
            &self,
            str: NonNull<c_char>,
            len: NSUInteger,
        ) -> Id<Foundation::NSString, Shared>;

        #[cfg(all(
            feature = "Foundation_NSError",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL"
        ))]
        #[method(replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:_)]
        pub unsafe fn replaceItemAtURL_withItemAtURL_backupItemName_options_resultingItemURL_error(
            &self,
            originalItemURL: &Foundation::NSURL,
            newItemURL: &Foundation::NSURL,
            backupItemName: Option<&Foundation::NSString>,
            options: NSFileManagerItemReplacementOptions,
            resultingURL: *mut *mut Foundation::NSURL,
        ) -> Result<(), Id<Foundation::NSError, Shared>>;

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[method(setUbiquitous:itemAtURL:destinationURL:error:_)]
        pub unsafe fn setUbiquitous_itemAtURL_destinationURL_error(
            &self,
            flag: bool,
            url: &Foundation::NSURL,
            destinationURL: &Foundation::NSURL,
        ) -> Result<(), Id<Foundation::NSError, Shared>>;

        #[cfg(feature = "Foundation_NSURL")]
        #[method(isUbiquitousItemAtURL:)]
        pub unsafe fn isUbiquitousItemAtURL(&self, url: &Foundation::NSURL) -> bool;

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[method(startDownloadingUbiquitousItemAtURL:error:_)]
        pub unsafe fn startDownloadingUbiquitousItemAtURL_error(
            &self,
            url: &Foundation::NSURL,
        ) -> Result<(), Id<Foundation::NSError, Shared>>;

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[method(evictUbiquitousItemAtURL:error:_)]
        pub unsafe fn evictUbiquitousItemAtURL_error(
            &self,
            url: &Foundation::NSURL,
        ) -> Result<(), Id<Foundation::NSError, Shared>>;

        #[cfg(all(feature = "Foundation_NSString", feature = "Foundation_NSURL"))]
        #[method_id(@__retain_semantics Other URLForUbiquityContainerIdentifier:)]
        pub unsafe fn URLForUbiquityContainerIdentifier(
            &self,
            containerIdentifier: Option<&Foundation::NSString>,
        ) -> Option<Id<Foundation::NSURL, Shared>>;

        #[cfg(all(
            feature = "Foundation_NSDate",
            feature = "Foundation_NSError",
            feature = "Foundation_NSURL"
        ))]
        #[method_id(@__retain_semantics Other URLForPublishingUbiquitousItemAtURL:expirationDate:error:_)]
        pub unsafe fn URLForPublishingUbiquitousItemAtURL_expirationDate_error(
            &self,
            url: &Foundation::NSURL,
            outDate: *mut *mut Foundation::NSDate,
        ) -> Result<Id<Foundation::NSURL, Shared>, Id<Foundation::NSError, Shared>>;

        #[method_id(@__retain_semantics Other ubiquityIdentityToken)]
        pub unsafe fn ubiquityIdentityToken(&self) -> Option<Id<TodoProtocols, Shared>>;

        #[cfg(all(
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSError",
            feature = "Foundation_NSFileProviderService",
            feature = "Foundation_NSURL"
        ))]
        #[method(getFileProviderServicesForItemAtURL:completionHandler:)]
        pub unsafe fn getFileProviderServicesForItemAtURL_completionHandler(
            &self,
            url: &Foundation::NSURL,
            completionHandler: &Block<
                (
                    *mut Foundation::NSDictionary<
                        Foundation::NSFileProviderServiceName,
                        Foundation::NSFileProviderService,
                    >,
                    *mut Foundation::NSError,
                ),
                (),
            >,
        );

        #[cfg(all(feature = "Foundation_NSString", feature = "Foundation_NSURL"))]
        #[method_id(@__retain_semantics Other containerURLForSecurityApplicationGroupIdentifier:)]
        pub unsafe fn containerURLForSecurityApplicationGroupIdentifier(
            &self,
            groupIdentifier: &Foundation::NSString,
        ) -> Option<Id<Foundation::NSURL, Shared>>;
    }
);

extern_methods!(
    /// NSUserInformation
    #[cfg(feature = "Foundation_NSFileManager")]
    unsafe impl NSFileManager {
        #[cfg(feature = "Foundation_NSURL")]
        #[method_id(@__retain_semantics Other homeDirectoryForCurrentUser)]
        pub unsafe fn homeDirectoryForCurrentUser(&self) -> Id<Foundation::NSURL, Shared>;

        #[cfg(feature = "Foundation_NSURL")]
        #[method_id(@__retain_semantics Other temporaryDirectory)]
        pub unsafe fn temporaryDirectory(&self) -> Id<Foundation::NSURL, Shared>;

        #[cfg(all(feature = "Foundation_NSString", feature = "Foundation_NSURL"))]
        #[method_id(@__retain_semantics Other homeDirectoryForUser:)]
        pub unsafe fn homeDirectoryForUser(
            &self,
            userName: &Foundation::NSString,
        ) -> Option<Id<Foundation::NSURL, Shared>>;
    }
);

extern_protocol!(
    pub struct NSFileManagerDelegate;

    unsafe impl ProtocolType for NSFileManagerDelegate {
        #[optional]
        #[method(fileManager:shouldCopyItemAtPath:toPath:)]
        pub unsafe fn fileManager_shouldCopyItemAtPath_toPath(
            &self,
            fileManager: &Foundation::NSFileManager,
            srcPath: &Foundation::NSString,
            dstPath: &Foundation::NSString,
        ) -> bool;

        #[optional]
        #[method(fileManager:shouldCopyItemAtURL:toURL:)]
        pub unsafe fn fileManager_shouldCopyItemAtURL_toURL(
            &self,
            fileManager: &Foundation::NSFileManager,
            srcURL: &Foundation::NSURL,
            dstURL: &Foundation::NSURL,
        ) -> bool;

        #[optional]
        #[method(fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:)]
        pub unsafe fn fileManager_shouldProceedAfterError_copyingItemAtPath_toPath(
            &self,
            fileManager: &Foundation::NSFileManager,
            error: &Foundation::NSError,
            srcPath: &Foundation::NSString,
            dstPath: &Foundation::NSString,
        ) -> bool;

        #[optional]
        #[method(fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:)]
        pub unsafe fn fileManager_shouldProceedAfterError_copyingItemAtURL_toURL(
            &self,
            fileManager: &Foundation::NSFileManager,
            error: &Foundation::NSError,
            srcURL: &Foundation::NSURL,
            dstURL: &Foundation::NSURL,
        ) -> bool;

        #[optional]
        #[method(fileManager:shouldMoveItemAtPath:toPath:)]
        pub unsafe fn fileManager_shouldMoveItemAtPath_toPath(
            &self,
            fileManager: &Foundation::NSFileManager,
            srcPath: &Foundation::NSString,
            dstPath: &Foundation::NSString,
        ) -> bool;

        #[optional]
        #[method(fileManager:shouldMoveItemAtURL:toURL:)]
        pub unsafe fn fileManager_shouldMoveItemAtURL_toURL(
            &self,
            fileManager: &Foundation::NSFileManager,
            srcURL: &Foundation::NSURL,
            dstURL: &Foundation::NSURL,
        ) -> bool;

        #[optional]
        #[method(fileManager:shouldProceedAfterError:movingItemAtPath:toPath:)]
        pub unsafe fn fileManager_shouldProceedAfterError_movingItemAtPath_toPath(
            &self,
            fileManager: &Foundation::NSFileManager,
            error: &Foundation::NSError,
            srcPath: &Foundation::NSString,
            dstPath: &Foundation::NSString,
        ) -> bool;

        #[optional]
        #[method(fileManager:shouldProceedAfterError:movingItemAtURL:toURL:)]
        pub unsafe fn fileManager_shouldProceedAfterError_movingItemAtURL_toURL(
            &self,
            fileManager: &Foundation::NSFileManager,
            error: &Foundation::NSError,
            srcURL: &Foundation::NSURL,
            dstURL: &Foundation::NSURL,
        ) -> bool;

        #[optional]
        #[method(fileManager:shouldLinkItemAtPath:toPath:)]
        pub unsafe fn fileManager_shouldLinkItemAtPath_toPath(
            &self,
            fileManager: &Foundation::NSFileManager,
            srcPath: &Foundation::NSString,
            dstPath: &Foundation::NSString,
        ) -> bool;

        #[optional]
        #[method(fileManager:shouldLinkItemAtURL:toURL:)]
        pub unsafe fn fileManager_shouldLinkItemAtURL_toURL(
            &self,
            fileManager: &Foundation::NSFileManager,
            srcURL: &Foundation::NSURL,
            dstURL: &Foundation::NSURL,
        ) -> bool;

        #[optional]
        #[method(fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:)]
        pub unsafe fn fileManager_shouldProceedAfterError_linkingItemAtPath_toPath(
            &self,
            fileManager: &Foundation::NSFileManager,
            error: &Foundation::NSError,
            srcPath: &Foundation::NSString,
            dstPath: &Foundation::NSString,
        ) -> bool;

        #[optional]
        #[method(fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:)]
        pub unsafe fn fileManager_shouldProceedAfterError_linkingItemAtURL_toURL(
            &self,
            fileManager: &Foundation::NSFileManager,
            error: &Foundation::NSError,
            srcURL: &Foundation::NSURL,
            dstURL: &Foundation::NSURL,
        ) -> bool;

        #[optional]
        #[method(fileManager:shouldRemoveItemAtPath:)]
        pub unsafe fn fileManager_shouldRemoveItemAtPath(
            &self,
            fileManager: &Foundation::NSFileManager,
            path: &Foundation::NSString,
        ) -> bool;

        #[optional]
        #[method(fileManager:shouldRemoveItemAtURL:)]
        pub unsafe fn fileManager_shouldRemoveItemAtURL(
            &self,
            fileManager: &Foundation::NSFileManager,
            URL: &Foundation::NSURL,
        ) -> bool;

        #[optional]
        #[method(fileManager:shouldProceedAfterError:removingItemAtPath:)]
        pub unsafe fn fileManager_shouldProceedAfterError_removingItemAtPath(
            &self,
            fileManager: &Foundation::NSFileManager,
            error: &Foundation::NSError,
            path: &Foundation::NSString,
        ) -> bool;

        #[optional]
        #[method(fileManager:shouldProceedAfterError:removingItemAtURL:)]
        pub unsafe fn fileManager_shouldProceedAfterError_removingItemAtURL(
            &self,
            fileManager: &Foundation::NSFileManager,
            error: &Foundation::NSError,
            URL: &Foundation::NSURL,
        ) -> bool;
    }
);

__inner_extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSDirectoryEnumerator<
        ObjectType: Message = Object,
        ObjectTypeOwnership: Ownership = Shared,
    > {
        _inner0: PhantomData<*mut (ObjectType, ObjectTypeOwnership)>,
        notunwindsafe: PhantomData<&'static mut ()>,
    }

    unsafe impl<ObjectType: Message, ObjectTypeOwnership: Ownership> ClassType
        for NSDirectoryEnumerator<ObjectType, ObjectTypeOwnership>
    {
        #[inherits(NSObject)]
        type Super = Foundation::NSEnumerator<ObjectType, ObjectTypeOwnership>;
    }
);

extern_methods!(
    #[cfg(feature = "Foundation_NSDirectoryEnumerator")]
    unsafe impl<ObjectType: Message, ObjectTypeOwnership: Ownership>
        NSDirectoryEnumerator<ObjectType, ObjectTypeOwnership>
    {
        #[cfg(feature = "Foundation_NSDictionary")]
        #[method_id(@__retain_semantics Other fileAttributes)]
        pub unsafe fn fileAttributes(
            &self,
        ) -> Option<Id<Foundation::NSDictionary<Foundation::NSFileAttributeKey, Object>, Shared>>;

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method_id(@__retain_semantics Other directoryAttributes)]
        pub unsafe fn directoryAttributes(
            &self,
        ) -> Option<Id<Foundation::NSDictionary<Foundation::NSFileAttributeKey, Object>, Shared>>;

        #[method(isEnumeratingDirectoryPostOrder)]
        pub unsafe fn isEnumeratingDirectoryPostOrder(&self) -> bool;

        #[method(skipDescendents)]
        pub unsafe fn skipDescendents(&self);

        #[method(level)]
        pub unsafe fn level(&self) -> NSUInteger;

        #[method(skipDescendants)]
        pub unsafe fn skipDescendants(&self);
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSFileProviderService;

    unsafe impl ClassType for NSFileProviderService {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Foundation_NSFileProviderService")]
    unsafe impl NSFileProviderService {
        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSXPCConnection"))]
        #[method(getFileProviderConnectionWithCompletionHandler:)]
        pub unsafe fn getFileProviderConnectionWithCompletionHandler(
            &self,
            completionHandler: &Block<
                (*mut Foundation::NSXPCConnection, *mut Foundation::NSError),
                (),
            >,
        );

        #[method_id(@__retain_semantics Other name)]
        pub unsafe fn name(&self) -> Id<Foundation::NSFileProviderServiceName, Shared>;
    }
);

extern_static!(NSFileType: &'static Foundation::NSFileAttributeKey);

extern_static!(NSFileTypeDirectory: &'static Foundation::NSFileAttributeType);

extern_static!(NSFileTypeRegular: &'static Foundation::NSFileAttributeType);

extern_static!(NSFileTypeSymbolicLink: &'static Foundation::NSFileAttributeType);

extern_static!(NSFileTypeSocket: &'static Foundation::NSFileAttributeType);

extern_static!(NSFileTypeCharacterSpecial: &'static Foundation::NSFileAttributeType);

extern_static!(NSFileTypeBlockSpecial: &'static Foundation::NSFileAttributeType);

extern_static!(NSFileTypeUnknown: &'static Foundation::NSFileAttributeType);

extern_static!(NSFileSize: &'static Foundation::NSFileAttributeKey);

extern_static!(NSFileModificationDate: &'static Foundation::NSFileAttributeKey);

extern_static!(NSFileReferenceCount: &'static Foundation::NSFileAttributeKey);

extern_static!(NSFileDeviceIdentifier: &'static Foundation::NSFileAttributeKey);

extern_static!(NSFileOwnerAccountName: &'static Foundation::NSFileAttributeKey);

extern_static!(NSFileGroupOwnerAccountName: &'static Foundation::NSFileAttributeKey);

extern_static!(NSFilePosixPermissions: &'static Foundation::NSFileAttributeKey);

extern_static!(NSFileSystemNumber: &'static Foundation::NSFileAttributeKey);

extern_static!(NSFileSystemFileNumber: &'static Foundation::NSFileAttributeKey);

extern_static!(NSFileExtensionHidden: &'static Foundation::NSFileAttributeKey);

extern_static!(NSFileHFSCreatorCode: &'static Foundation::NSFileAttributeKey);

extern_static!(NSFileHFSTypeCode: &'static Foundation::NSFileAttributeKey);

extern_static!(NSFileImmutable: &'static Foundation::NSFileAttributeKey);

extern_static!(NSFileAppendOnly: &'static Foundation::NSFileAttributeKey);

extern_static!(NSFileCreationDate: &'static Foundation::NSFileAttributeKey);

extern_static!(NSFileOwnerAccountID: &'static Foundation::NSFileAttributeKey);

extern_static!(NSFileGroupOwnerAccountID: &'static Foundation::NSFileAttributeKey);

extern_static!(NSFileBusy: &'static Foundation::NSFileAttributeKey);

extern_static!(NSFileProtectionKey: &'static Foundation::NSFileAttributeKey);

extern_static!(NSFileProtectionNone: &'static Foundation::NSFileProtectionType);

extern_static!(NSFileProtectionComplete: &'static Foundation::NSFileProtectionType);

extern_static!(NSFileProtectionCompleteUnlessOpen: &'static Foundation::NSFileProtectionType);

extern_static!(
    NSFileProtectionCompleteUntilFirstUserAuthentication: &'static Foundation::NSFileProtectionType
);

extern_static!(NSFileSystemSize: &'static Foundation::NSFileAttributeKey);

extern_static!(NSFileSystemFreeSize: &'static Foundation::NSFileAttributeKey);

extern_static!(NSFileSystemNodes: &'static Foundation::NSFileAttributeKey);

extern_static!(NSFileSystemFreeNodes: &'static Foundation::NSFileAttributeKey);

extern_methods!(
    /// NSFileAttributes
    #[cfg(feature = "Foundation_NSDictionary")]
    unsafe impl<
            KeyType: Message,
            ObjectType: Message,
            KeyTypeOwnership: Ownership,
            ObjectTypeOwnership: Ownership,
        > Foundation::NSDictionary<KeyType, ObjectType, KeyTypeOwnership, ObjectTypeOwnership>
    {
        #[method(fileSize)]
        pub unsafe fn fileSize(&self) -> c_ulonglong;

        #[cfg(feature = "Foundation_NSDate")]
        #[method_id(@__retain_semantics Other fileModificationDate)]
        pub unsafe fn fileModificationDate(&self) -> Option<Id<Foundation::NSDate, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other fileType)]
        pub unsafe fn fileType(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[method(filePosixPermissions)]
        pub unsafe fn filePosixPermissions(&self) -> NSUInteger;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other fileOwnerAccountName)]
        pub unsafe fn fileOwnerAccountName(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other fileGroupOwnerAccountName)]
        pub unsafe fn fileGroupOwnerAccountName(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[method(fileSystemNumber)]
        pub unsafe fn fileSystemNumber(&self) -> NSInteger;

        #[method(fileSystemFileNumber)]
        pub unsafe fn fileSystemFileNumber(&self) -> NSUInteger;

        #[method(fileExtensionHidden)]
        pub unsafe fn fileExtensionHidden(&self) -> bool;

        #[method(fileHFSCreatorCode)]
        pub unsafe fn fileHFSCreatorCode(&self) -> OSType;

        #[method(fileHFSTypeCode)]
        pub unsafe fn fileHFSTypeCode(&self) -> OSType;

        #[method(fileIsImmutable)]
        pub unsafe fn fileIsImmutable(&self) -> bool;

        #[method(fileIsAppendOnly)]
        pub unsafe fn fileIsAppendOnly(&self) -> bool;

        #[cfg(feature = "Foundation_NSDate")]
        #[method_id(@__retain_semantics Other fileCreationDate)]
        pub unsafe fn fileCreationDate(&self) -> Option<Id<Foundation::NSDate, Shared>>;

        #[cfg(feature = "Foundation_NSNumber")]
        #[method_id(@__retain_semantics Other fileOwnerAccountID)]
        pub unsafe fn fileOwnerAccountID(&self) -> Option<Id<Foundation::NSNumber, Shared>>;

        #[cfg(feature = "Foundation_NSNumber")]
        #[method_id(@__retain_semantics Other fileGroupOwnerAccountID)]
        pub unsafe fn fileGroupOwnerAccountID(&self) -> Option<Id<Foundation::NSNumber, Shared>>;
    }
);
