//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSPortNameServer;

    unsafe impl ClassType for NSPortNameServer {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Foundation_NSPortNameServer")]
    unsafe impl NSPortNameServer {
        #[method_id(@__retain_semantics Other systemDefaultPortNameServer)]
        pub unsafe fn systemDefaultPortNameServer() -> Id<Foundation::NSPortNameServer, Shared>;

        #[cfg(all(feature = "Foundation_NSPort", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other portForName:)]
        pub unsafe fn portForName(
            &self,
            name: &Foundation::NSString,
        ) -> Option<Id<Foundation::NSPort, Shared>>;

        #[cfg(all(feature = "Foundation_NSPort", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other portForName:host:)]
        pub unsafe fn portForName_host(
            &self,
            name: &Foundation::NSString,
            host: Option<&Foundation::NSString>,
        ) -> Option<Id<Foundation::NSPort, Shared>>;

        #[cfg(all(feature = "Foundation_NSPort", feature = "Foundation_NSString"))]
        #[method(registerPort:name:)]
        pub unsafe fn registerPort_name(
            &self,
            port: &Foundation::NSPort,
            name: &Foundation::NSString,
        ) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method(removePortForName:)]
        pub unsafe fn removePortForName(&self, name: &Foundation::NSString) -> bool;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSMachBootstrapServer;

    unsafe impl ClassType for NSMachBootstrapServer {
        #[inherits(NSObject)]
        type Super = NSPortNameServer;
    }
);

extern_methods!(
    #[cfg(feature = "Foundation_NSMachBootstrapServer")]
    unsafe impl NSMachBootstrapServer {
        #[method_id(@__retain_semantics Other sharedInstance)]
        pub unsafe fn sharedInstance() -> Id<Object, Shared>;

        #[cfg(all(feature = "Foundation_NSPort", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other portForName:)]
        pub unsafe fn portForName(
            &self,
            name: &Foundation::NSString,
        ) -> Option<Id<Foundation::NSPort, Shared>>;

        #[cfg(all(feature = "Foundation_NSPort", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other portForName:host:)]
        pub unsafe fn portForName_host(
            &self,
            name: &Foundation::NSString,
            host: Option<&Foundation::NSString>,
        ) -> Option<Id<Foundation::NSPort, Shared>>;

        #[cfg(all(feature = "Foundation_NSPort", feature = "Foundation_NSString"))]
        #[method(registerPort:name:)]
        pub unsafe fn registerPort_name(
            &self,
            port: &Foundation::NSPort,
            name: &Foundation::NSString,
        ) -> bool;

        #[cfg(all(feature = "Foundation_NSPort", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other servicePortWithName:)]
        pub unsafe fn servicePortWithName(
            &self,
            name: &Foundation::NSString,
        ) -> Option<Id<Foundation::NSPort, Shared>>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSMessagePortNameServer;

    unsafe impl ClassType for NSMessagePortNameServer {
        #[inherits(NSObject)]
        type Super = NSPortNameServer;
    }
);

extern_methods!(
    #[cfg(feature = "Foundation_NSMessagePortNameServer")]
    unsafe impl NSMessagePortNameServer {
        #[method_id(@__retain_semantics Other sharedInstance)]
        pub unsafe fn sharedInstance() -> Id<Object, Shared>;

        #[cfg(all(feature = "Foundation_NSPort", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other portForName:)]
        pub unsafe fn portForName(
            &self,
            name: &Foundation::NSString,
        ) -> Option<Id<Foundation::NSPort, Shared>>;

        #[cfg(all(feature = "Foundation_NSPort", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other portForName:host:)]
        pub unsafe fn portForName_host(
            &self,
            name: &Foundation::NSString,
            host: Option<&Foundation::NSString>,
        ) -> Option<Id<Foundation::NSPort, Shared>>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSSocketPortNameServer;

    unsafe impl ClassType for NSSocketPortNameServer {
        #[inherits(NSObject)]
        type Super = NSPortNameServer;
    }
);

extern_methods!(
    #[cfg(feature = "Foundation_NSSocketPortNameServer")]
    unsafe impl NSSocketPortNameServer {
        #[method_id(@__retain_semantics Other sharedInstance)]
        pub unsafe fn sharedInstance() -> Id<Object, Shared>;

        #[cfg(all(feature = "Foundation_NSPort", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other portForName:)]
        pub unsafe fn portForName(
            &self,
            name: &Foundation::NSString,
        ) -> Option<Id<Foundation::NSPort, Shared>>;

        #[cfg(all(feature = "Foundation_NSPort", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other portForName:host:)]
        pub unsafe fn portForName_host(
            &self,
            name: &Foundation::NSString,
            host: Option<&Foundation::NSString>,
        ) -> Option<Id<Foundation::NSPort, Shared>>;

        #[cfg(all(feature = "Foundation_NSPort", feature = "Foundation_NSString"))]
        #[method(registerPort:name:)]
        pub unsafe fn registerPort_name(
            &self,
            port: &Foundation::NSPort,
            name: &Foundation::NSString,
        ) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method(removePortForName:)]
        pub unsafe fn removePortForName(&self, name: &Foundation::NSString) -> bool;

        #[cfg(all(feature = "Foundation_NSPort", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other portForName:host:nameServerPortNumber:)]
        pub unsafe fn portForName_host_nameServerPortNumber(
            &self,
            name: &Foundation::NSString,
            host: Option<&Foundation::NSString>,
            portNumber: u16,
        ) -> Option<Id<Foundation::NSPort, Shared>>;

        #[cfg(all(feature = "Foundation_NSPort", feature = "Foundation_NSString"))]
        #[method(registerPort:name:nameServerPortNumber:)]
        pub unsafe fn registerPort_name_nameServerPortNumber(
            &self,
            port: &Foundation::NSPort,
            name: &Foundation::NSString,
            portNumber: u16,
        ) -> bool;

        #[method(defaultNameServerPortNumber)]
        pub unsafe fn defaultNameServerPortNumber(&self) -> u16;

        #[method(setDefaultNameServerPortNumber:)]
        pub unsafe fn setDefaultNameServerPortNumber(&self, defaultNameServerPortNumber: u16);
    }
);
