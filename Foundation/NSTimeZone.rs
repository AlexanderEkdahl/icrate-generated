//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSTimeZone;

    unsafe impl ClassType for NSTimeZone {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Foundation_NSTimeZone")]
    unsafe impl NSTimeZone {
        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other name)]
        pub unsafe fn name(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSData")]
        #[method_id(@__retain_semantics Other data)]
        pub unsafe fn data(&self) -> Id<Foundation::NSData, Shared>;

        #[cfg(feature = "Foundation_NSDate")]
        #[method(secondsFromGMTForDate:)]
        pub unsafe fn secondsFromGMTForDate(&self, aDate: &Foundation::NSDate) -> NSInteger;

        #[cfg(all(feature = "Foundation_NSDate", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other abbreviationForDate:)]
        pub unsafe fn abbreviationForDate(
            &self,
            aDate: &Foundation::NSDate,
        ) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "Foundation_NSDate")]
        #[method(isDaylightSavingTimeForDate:)]
        pub unsafe fn isDaylightSavingTimeForDate(&self, aDate: &Foundation::NSDate) -> bool;

        #[cfg(feature = "Foundation_NSDate")]
        #[method(daylightSavingTimeOffsetForDate:)]
        pub unsafe fn daylightSavingTimeOffsetForDate(
            &self,
            aDate: &Foundation::NSDate,
        ) -> NSTimeInterval;

        #[cfg(feature = "Foundation_NSDate")]
        #[method_id(@__retain_semantics Other nextDaylightSavingTimeTransitionAfterDate:)]
        pub unsafe fn nextDaylightSavingTimeTransitionAfterDate(
            &self,
            aDate: &Foundation::NSDate,
        ) -> Option<Id<Foundation::NSDate, Shared>>;
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSTimeZoneNameStyle {
        NSTimeZoneNameStyleStandard = 0,
        NSTimeZoneNameStyleShortStandard = 1,
        NSTimeZoneNameStyleDaylightSaving = 2,
        NSTimeZoneNameStyleShortDaylightSaving = 3,
        NSTimeZoneNameStyleGeneric = 4,
        NSTimeZoneNameStyleShortGeneric = 5,
    }
);

extern_methods!(
    /// NSExtendedTimeZone
    #[cfg(feature = "Foundation_NSTimeZone")]
    unsafe impl NSTimeZone {
        #[method_id(@__retain_semantics Other systemTimeZone)]
        pub unsafe fn systemTimeZone() -> Id<Foundation::NSTimeZone, Shared>;

        #[method(resetSystemTimeZone)]
        pub unsafe fn resetSystemTimeZone();

        #[method_id(@__retain_semantics Other defaultTimeZone)]
        pub unsafe fn defaultTimeZone() -> Id<Foundation::NSTimeZone, Shared>;

        #[method(setDefaultTimeZone:)]
        pub unsafe fn setDefaultTimeZone(defaultTimeZone: &Foundation::NSTimeZone);

        #[method_id(@__retain_semantics Other localTimeZone)]
        pub unsafe fn localTimeZone() -> Id<Foundation::NSTimeZone, Shared>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other knownTimeZoneNames)]
        pub unsafe fn knownTimeZoneNames() -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other abbreviationDictionary)]
        pub unsafe fn abbreviationDictionary(
        ) -> Id<Foundation::NSDictionary<Foundation::NSString, Foundation::NSString>, Shared>;

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method(setAbbreviationDictionary:)]
        pub unsafe fn setAbbreviationDictionary(
            abbreviationDictionary: &Foundation::NSDictionary<
                Foundation::NSString,
                Foundation::NSString,
            >,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other timeZoneDataVersion)]
        pub unsafe fn timeZoneDataVersion() -> Id<Foundation::NSString, Shared>;

        #[method(secondsFromGMT)]
        pub unsafe fn secondsFromGMT(&self) -> NSInteger;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other abbreviation)]
        pub unsafe fn abbreviation(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[method(isDaylightSavingTime)]
        pub unsafe fn isDaylightSavingTime(&self) -> bool;

        #[method(daylightSavingTimeOffset)]
        pub unsafe fn daylightSavingTimeOffset(&self) -> NSTimeInterval;

        #[cfg(feature = "Foundation_NSDate")]
        #[method_id(@__retain_semantics Other nextDaylightSavingTimeTransition)]
        pub unsafe fn nextDaylightSavingTimeTransition(
            &self,
        ) -> Option<Id<Foundation::NSDate, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other description)]
        pub unsafe fn description(&self) -> Id<Foundation::NSString, Shared>;

        #[method(isEqualToTimeZone:)]
        pub unsafe fn isEqualToTimeZone(&self, aTimeZone: &Foundation::NSTimeZone) -> bool;

        #[cfg(all(feature = "Foundation_NSLocale", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other localizedName:locale:)]
        pub unsafe fn localizedName_locale(
            &self,
            style: NSTimeZoneNameStyle,
            locale: Option<&Foundation::NSLocale>,
        ) -> Option<Id<Foundation::NSString, Shared>>;
    }
);

extern_methods!(
    /// NSTimeZoneCreation
    #[cfg(feature = "Foundation_NSTimeZone")]
    unsafe impl NSTimeZone {
        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other timeZoneWithName:)]
        pub unsafe fn timeZoneWithName(tzName: &Foundation::NSString) -> Option<Id<Self, Shared>>;

        #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other timeZoneWithName:data:)]
        pub unsafe fn timeZoneWithName_data(
            tzName: &Foundation::NSString,
            aData: Option<&Foundation::NSData>,
        ) -> Option<Id<Self, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Init initWithName:)]
        pub unsafe fn initWithName(
            this: Option<Allocated<Self>>,
            tzName: &Foundation::NSString,
        ) -> Option<Id<Self, Shared>>;

        #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Init initWithName:data:)]
        pub unsafe fn initWithName_data(
            this: Option<Allocated<Self>>,
            tzName: &Foundation::NSString,
            aData: Option<&Foundation::NSData>,
        ) -> Option<Id<Self, Shared>>;

        #[method_id(@__retain_semantics Other timeZoneForSecondsFromGMT:)]
        pub unsafe fn timeZoneForSecondsFromGMT(seconds: NSInteger) -> Id<Self, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other timeZoneWithAbbreviation:)]
        pub unsafe fn timeZoneWithAbbreviation(
            abbreviation: &Foundation::NSString,
        ) -> Option<Id<Self, Shared>>;
    }
);

extern_static!(NSSystemTimeZoneDidChangeNotification: &'static Foundation::NSNotificationName);
