//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation;

extern_protocol!(
    pub struct NSURLProtocolClient;

    unsafe impl ProtocolType for NSURLProtocolClient {
        #[method(URLProtocol:wasRedirectedToRequest:redirectResponse:)]
        pub unsafe fn URLProtocol_wasRedirectedToRequest_redirectResponse(
            &self,
            protocol: &Foundation::NSURLProtocol,
            request: &Foundation::NSURLRequest,
            redirectResponse: &Foundation::NSURLResponse,
        );

        #[method(URLProtocol:cachedResponseIsValid:)]
        pub unsafe fn URLProtocol_cachedResponseIsValid(
            &self,
            protocol: &Foundation::NSURLProtocol,
            cachedResponse: &Foundation::NSCachedURLResponse,
        );

        #[method(URLProtocol:didReceiveResponse:cacheStoragePolicy:)]
        pub unsafe fn URLProtocol_didReceiveResponse_cacheStoragePolicy(
            &self,
            protocol: &Foundation::NSURLProtocol,
            response: &Foundation::NSURLResponse,
            policy: NSURLCacheStoragePolicy,
        );

        #[method(URLProtocol:didLoadData:)]
        pub unsafe fn URLProtocol_didLoadData(
            &self,
            protocol: &Foundation::NSURLProtocol,
            data: &Foundation::NSData,
        );

        #[method(URLProtocolDidFinishLoading:)]
        pub unsafe fn URLProtocolDidFinishLoading(&self, protocol: &Foundation::NSURLProtocol);

        #[method(URLProtocol:didFailWithError:)]
        pub unsafe fn URLProtocol_didFailWithError(
            &self,
            protocol: &Foundation::NSURLProtocol,
            error: &Foundation::NSError,
        );

        #[method(URLProtocol:didReceiveAuthenticationChallenge:)]
        pub unsafe fn URLProtocol_didReceiveAuthenticationChallenge(
            &self,
            protocol: &Foundation::NSURLProtocol,
            challenge: &Foundation::NSURLAuthenticationChallenge,
        );

        #[method(URLProtocol:didCancelAuthenticationChallenge:)]
        pub unsafe fn URLProtocol_didCancelAuthenticationChallenge(
            &self,
            protocol: &Foundation::NSURLProtocol,
            challenge: &Foundation::NSURLAuthenticationChallenge,
        );
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSURLProtocol;

    unsafe impl ClassType for NSURLProtocol {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Foundation_NSURLProtocol")]
    unsafe impl NSURLProtocol {
        #[cfg(all(
            feature = "Foundation_NSCachedURLResponse",
            feature = "Foundation_NSURLProtocolClient",
            feature = "Foundation_NSURLRequest"
        ))]
        #[method_id(@__retain_semantics Init initWithRequest:cachedResponse:client:)]
        pub unsafe fn initWithRequest_cachedResponse_client(
            this: Option<Allocated<Self>>,
            request: &Foundation::NSURLRequest,
            cachedResponse: Option<&Foundation::NSCachedURLResponse>,
            client: Option<&Foundation::NSURLProtocolClient>,
        ) -> Id<Self, Shared>;

        #[cfg(feature = "Foundation_NSURLProtocolClient")]
        #[method_id(@__retain_semantics Other client)]
        pub unsafe fn client(&self) -> Option<Id<Foundation::NSURLProtocolClient, Shared>>;

        #[cfg(feature = "Foundation_NSURLRequest")]
        #[method_id(@__retain_semantics Other request)]
        pub unsafe fn request(&self) -> Id<Foundation::NSURLRequest, Shared>;

        #[cfg(feature = "Foundation_NSCachedURLResponse")]
        #[method_id(@__retain_semantics Other cachedResponse)]
        pub unsafe fn cachedResponse(&self) -> Option<Id<Foundation::NSCachedURLResponse, Shared>>;

        #[cfg(feature = "Foundation_NSURLRequest")]
        #[method(canInitWithRequest:)]
        pub unsafe fn canInitWithRequest(request: &Foundation::NSURLRequest) -> bool;

        #[cfg(feature = "Foundation_NSURLRequest")]
        #[method_id(@__retain_semantics Other canonicalRequestForRequest:)]
        pub unsafe fn canonicalRequestForRequest(
            request: &Foundation::NSURLRequest,
        ) -> Id<Foundation::NSURLRequest, Shared>;

        #[cfg(feature = "Foundation_NSURLRequest")]
        #[method(requestIsCacheEquivalent:toRequest:)]
        pub unsafe fn requestIsCacheEquivalent_toRequest(
            a: &Foundation::NSURLRequest,
            b: &Foundation::NSURLRequest,
        ) -> bool;

        #[method(startLoading)]
        pub unsafe fn startLoading(&self);

        #[method(stopLoading)]
        pub unsafe fn stopLoading(&self);

        #[cfg(all(feature = "Foundation_NSString", feature = "Foundation_NSURLRequest"))]
        #[method_id(@__retain_semantics Other propertyForKey:inRequest:)]
        pub unsafe fn propertyForKey_inRequest(
            key: &Foundation::NSString,
            request: &Foundation::NSURLRequest,
        ) -> Option<Id<Object, Shared>>;

        #[cfg(all(
            feature = "Foundation_NSMutableURLRequest",
            feature = "Foundation_NSString"
        ))]
        #[method(setProperty:forKey:inRequest:)]
        pub unsafe fn setProperty_forKey_inRequest(
            value: &Object,
            key: &Foundation::NSString,
            request: &Foundation::NSMutableURLRequest,
        );

        #[cfg(all(
            feature = "Foundation_NSMutableURLRequest",
            feature = "Foundation_NSString"
        ))]
        #[method(removePropertyForKey:inRequest:)]
        pub unsafe fn removePropertyForKey_inRequest(
            key: &Foundation::NSString,
            request: &Foundation::NSMutableURLRequest,
        );

        #[method(registerClass:)]
        pub unsafe fn registerClass(protocolClass: &Class) -> bool;

        #[method(unregisterClass:)]
        pub unsafe fn unregisterClass(protocolClass: &Class);
    }
);

extern_methods!(
    /// NSURLSessionTaskAdditions
    #[cfg(feature = "Foundation_NSURLProtocol")]
    unsafe impl NSURLProtocol {
        #[cfg(feature = "Foundation_NSURLSessionTask")]
        #[method(canInitWithTask:)]
        pub unsafe fn canInitWithTask(task: &Foundation::NSURLSessionTask) -> bool;

        #[cfg(all(
            feature = "Foundation_NSCachedURLResponse",
            feature = "Foundation_NSURLProtocolClient",
            feature = "Foundation_NSURLSessionTask"
        ))]
        #[method_id(@__retain_semantics Init initWithTask:cachedResponse:client:)]
        pub unsafe fn initWithTask_cachedResponse_client(
            this: Option<Allocated<Self>>,
            task: &Foundation::NSURLSessionTask,
            cachedResponse: Option<&Foundation::NSCachedURLResponse>,
            client: Option<&Foundation::NSURLProtocolClient>,
        ) -> Id<Self, Shared>;

        #[cfg(feature = "Foundation_NSURLSessionTask")]
        #[method_id(@__retain_semantics Other task)]
        pub unsafe fn task(&self) -> Option<Id<Foundation::NSURLSessionTask, Shared>>;
    }
);
