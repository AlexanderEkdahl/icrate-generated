//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::BackgroundAssets::*;
use crate::Foundation::*;

extern_protocol!(
    pub struct BADownloaderExtension;

    unsafe impl ProtocolType for BADownloaderExtension {
        #[cfg(all(
            feature = "BackgroundAssets_BAAppExtensionInfo",
            feature = "BackgroundAssets_BADownload",
            feature = "Foundation_NSSet",
            feature = "Foundation_NSURL"
        ))]
        #[optional]
        #[method_id(@__retain_semantics Other downloadsForRequest:manifestURL:extensionInfo:)]
        pub unsafe fn downloadsForRequest_manifestURL_extensionInfo(
            &self,
            content_request: BAContentRequest,
            manifest_url: &NSURL,
            extension_info: &BAAppExtensionInfo,
        ) -> Id<NSSet<BADownload>, Shared>;

        #[cfg(all(
            feature = "BackgroundAssets_BADownload",
            feature = "Foundation_NSURLAuthenticationChallenge",
            feature = "Foundation_NSURLCredential"
        ))]
        #[optional]
        #[method(backgroundDownload:didReceiveChallenge:completionHandler:)]
        pub unsafe fn backgroundDownload_didReceiveChallenge_completionHandler(
            &self,
            download: &BADownload,
            challenge: &NSURLAuthenticationChallenge,
            completion_handler: &Block<
                (NSURLSessionAuthChallengeDisposition, *mut NSURLCredential),
                (),
            >,
        );

        #[cfg(all(
            feature = "BackgroundAssets_BADownload",
            feature = "Foundation_NSError"
        ))]
        #[optional]
        #[method(backgroundDownload:failedWithError:)]
        pub unsafe fn backgroundDownload_failedWithError(
            &self,
            download: &BADownload,
            error: &NSError,
        );

        #[cfg(all(feature = "BackgroundAssets_BADownload", feature = "Foundation_NSURL"))]
        #[optional]
        #[method(backgroundDownload:finishedWithFileURL:)]
        pub unsafe fn backgroundDownload_finishedWithFileURL(
            &self,
            download: &BADownload,
            file_url: &NSURL,
        );

        #[optional]
        #[method(extensionWillTerminate)]
        pub unsafe fn extensionWillTerminate(&self);
    }
);
