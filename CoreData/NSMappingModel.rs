//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreData;
use crate::Foundation;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSMappingModel;

    unsafe impl ClassType for NSMappingModel {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "CoreData_NSMappingModel")]
    unsafe impl NSMappingModel {
        #[cfg(all(
            feature = "CoreData_NSManagedObjectModel",
            feature = "Foundation_NSArray",
            feature = "Foundation_NSBundle"
        ))]
        #[method_id(@__retain_semantics Other mappingModelFromBundles:forSourceModel:destinationModel:)]
        pub unsafe fn mappingModelFromBundles_forSourceModel_destinationModel(
            bundles: Option<&Foundation::NSArray<Foundation::NSBundle>>,
            sourceModel: Option<&CoreData::NSManagedObjectModel>,
            destinationModel: Option<&CoreData::NSManagedObjectModel>,
        ) -> Option<Id<CoreData::NSMappingModel, Shared>>;

        #[cfg(all(
            feature = "CoreData_NSManagedObjectModel",
            feature = "Foundation_NSError"
        ))]
        #[method_id(@__retain_semantics Other inferredMappingModelForSourceModel:destinationModel:error:_)]
        pub unsafe fn inferredMappingModelForSourceModel_destinationModel_error(
            sourceModel: &CoreData::NSManagedObjectModel,
            destinationModel: &CoreData::NSManagedObjectModel,
        ) -> Result<Id<CoreData::NSMappingModel, Shared>, Id<NSError, Shared>>;

        #[cfg(feature = "Foundation_NSURL")]
        #[method_id(@__retain_semantics Init initWithContentsOfURL:)]
        pub unsafe fn initWithContentsOfURL(
            this: Option<Allocated<Self>>,
            url: Option<&Foundation::NSURL>,
        ) -> Option<Id<Self, Shared>>;

        #[cfg(all(feature = "CoreData_NSEntityMapping", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Other entityMappings)]
        pub unsafe fn entityMappings(
            &self,
        ) -> Option<Id<Foundation::NSArray<CoreData::NSEntityMapping>, Shared>>;

        #[cfg(all(feature = "CoreData_NSEntityMapping", feature = "Foundation_NSArray"))]
        #[method(setEntityMappings:)]
        pub unsafe fn setEntityMappings(
            &self,
            entityMappings: Option<&Foundation::NSArray<CoreData::NSEntityMapping>>,
        );

        #[cfg(all(
            feature = "CoreData_NSEntityMapping",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other entityMappingsByName)]
        pub unsafe fn entityMappingsByName(
            &self,
        ) -> Id<Foundation::NSDictionary<Foundation::NSString, CoreData::NSEntityMapping>, Shared>;
    }
);
