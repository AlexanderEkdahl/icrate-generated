//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreData;
use crate::Foundation;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSAtomicStore;

    unsafe impl ClassType for NSAtomicStore {
        #[inherits(NSObject)]
        type Super = CoreData::NSPersistentStore;
    }
);

extern_methods!(
    #[cfg(feature = "CoreData_NSAtomicStore")]
    unsafe impl NSAtomicStore {
        #[cfg(all(
            feature = "CoreData_NSPersistentStoreCoordinator",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString",
            feature = "Foundation_NSURL"
        ))]
        #[method_id(@__retain_semantics Init initWithPersistentStoreCoordinator:configurationName:URL:options:)]
        pub unsafe fn initWithPersistentStoreCoordinator_configurationName_URL_options(
            this: Option<Allocated<Self>>,
            coordinator: Option<&CoreData::NSPersistentStoreCoordinator>,
            configurationName: Option<&Foundation::NSString>,
            url: &Foundation::NSURL,
            options: Option<&Foundation::NSDictionary>,
        ) -> Id<Self, Shared>;

        #[cfg(feature = "Foundation_NSError")]
        #[method(load:_)]
        pub unsafe fn load(&self) -> Result<(), Id<Foundation::NSError, Shared>>;

        #[cfg(feature = "Foundation_NSError")]
        #[method(save:_)]
        pub unsafe fn save(&self) -> Result<(), Id<Foundation::NSError, Shared>>;

        #[cfg(all(
            feature = "CoreData_NSAtomicStoreCacheNode",
            feature = "CoreData_NSManagedObject"
        ))]
        #[method_id(@__retain_semantics New newCacheNodeForManagedObject:)]
        pub unsafe fn newCacheNodeForManagedObject(
            &self,
            managedObject: &CoreData::NSManagedObject,
        ) -> Id<CoreData::NSAtomicStoreCacheNode, Shared>;

        #[cfg(all(
            feature = "CoreData_NSAtomicStoreCacheNode",
            feature = "CoreData_NSManagedObject"
        ))]
        #[method(updateCacheNode:fromManagedObject:)]
        pub unsafe fn updateCacheNode_fromManagedObject(
            &self,
            node: &CoreData::NSAtomicStoreCacheNode,
            managedObject: &CoreData::NSManagedObject,
        );

        #[cfg(all(
            feature = "CoreData_NSAtomicStoreCacheNode",
            feature = "Foundation_NSSet"
        ))]
        #[method_id(@__retain_semantics Other cacheNodes)]
        pub unsafe fn cacheNodes(
            &self,
        ) -> Id<Foundation::NSSet<CoreData::NSAtomicStoreCacheNode>, Shared>;

        #[cfg(all(
            feature = "CoreData_NSAtomicStoreCacheNode",
            feature = "Foundation_NSSet"
        ))]
        #[method(addCacheNodes:)]
        pub unsafe fn addCacheNodes(
            &self,
            cacheNodes: &Foundation::NSSet<CoreData::NSAtomicStoreCacheNode>,
        );

        #[cfg(all(
            feature = "CoreData_NSAtomicStoreCacheNode",
            feature = "Foundation_NSSet"
        ))]
        #[method(willRemoveCacheNodes:)]
        pub unsafe fn willRemoveCacheNodes(
            &self,
            cacheNodes: &Foundation::NSSet<CoreData::NSAtomicStoreCacheNode>,
        );

        #[cfg(all(
            feature = "CoreData_NSAtomicStoreCacheNode",
            feature = "CoreData_NSManagedObjectID"
        ))]
        #[method_id(@__retain_semantics Other cacheNodeForObjectID:)]
        pub unsafe fn cacheNodeForObjectID(
            &self,
            objectID: &CoreData::NSManagedObjectID,
        ) -> Option<Id<CoreData::NSAtomicStoreCacheNode, Shared>>;

        #[cfg(all(
            feature = "CoreData_NSEntityDescription",
            feature = "CoreData_NSManagedObjectID"
        ))]
        #[method_id(@__retain_semantics Other objectIDForEntity:referenceObject:)]
        pub unsafe fn objectIDForEntity_referenceObject(
            &self,
            entity: &CoreData::NSEntityDescription,
            data: &Object,
        ) -> Id<CoreData::NSManagedObjectID, Shared>;

        #[cfg(feature = "CoreData_NSManagedObject")]
        #[method_id(@__retain_semantics New newReferenceObjectForManagedObject:)]
        pub unsafe fn newReferenceObjectForManagedObject(
            &self,
            managedObject: &CoreData::NSManagedObject,
        ) -> Id<Object, Shared>;

        #[cfg(feature = "CoreData_NSManagedObjectID")]
        #[method_id(@__retain_semantics Other referenceObjectForObjectID:)]
        pub unsafe fn referenceObjectForObjectID(
            &self,
            objectID: &CoreData::NSManagedObjectID,
        ) -> Id<Object, Shared>;
    }
);
