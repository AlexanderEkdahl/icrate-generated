//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreData;
use crate::Foundation;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSEntityDescription;

    unsafe impl ClassType for NSEntityDescription {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "CoreData_NSEntityDescription")]
    unsafe impl NSEntityDescription {
        #[cfg(all(
            feature = "CoreData_NSManagedObjectContext",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other entityForName:inManagedObjectContext:)]
        pub unsafe fn entityForName_inManagedObjectContext(
            entityName: &Foundation::NSString,
            context: &CoreData::NSManagedObjectContext,
        ) -> Option<Id<CoreData::NSEntityDescription, Shared>>;

        #[cfg(all(
            feature = "CoreData_NSManagedObject",
            feature = "CoreData_NSManagedObjectContext",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other insertNewObjectForEntityForName:inManagedObjectContext:)]
        pub unsafe fn insertNewObjectForEntityForName_inManagedObjectContext(
            entityName: &Foundation::NSString,
            context: &CoreData::NSManagedObjectContext,
        ) -> Id<CoreData::NSManagedObject, Shared>;

        #[cfg(feature = "CoreData_NSManagedObjectModel")]
        #[method_id(@__retain_semantics Other managedObjectModel)]
        pub unsafe fn managedObjectModel(&self) -> Id<CoreData::NSManagedObjectModel, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other managedObjectClassName)]
        pub unsafe fn managedObjectClassName(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setManagedObjectClassName:)]
        pub unsafe fn setManagedObjectClassName(
            &self,
            managedObjectClassName: Option<&Foundation::NSString>,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other name)]
        pub unsafe fn name(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setName:)]
        pub unsafe fn setName(&self, name: Option<&Foundation::NSString>);

        #[method(isAbstract)]
        pub unsafe fn isAbstract(&self) -> bool;

        #[method(setAbstract:)]
        pub unsafe fn setAbstract(&self, abstract_: bool);

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other subentitiesByName)]
        pub unsafe fn subentitiesByName(
            &self,
        ) -> Id<Foundation::NSDictionary<Foundation::NSString, CoreData::NSEntityDescription>, Shared>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other subentities)]
        pub unsafe fn subentities(
            &self,
        ) -> Id<Foundation::NSArray<CoreData::NSEntityDescription>, Shared>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method(setSubentities:)]
        pub unsafe fn setSubentities(
            &self,
            subentities: &Foundation::NSArray<CoreData::NSEntityDescription>,
        );

        #[method_id(@__retain_semantics Other superentity)]
        pub unsafe fn superentity(&self) -> Option<Id<CoreData::NSEntityDescription, Shared>>;

        #[cfg(all(
            feature = "CoreData_NSPropertyDescription",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other propertiesByName)]
        pub unsafe fn propertiesByName(
            &self,
        ) -> Id<
            Foundation::NSDictionary<Foundation::NSString, CoreData::NSPropertyDescription>,
            Shared,
        >;

        #[cfg(all(
            feature = "CoreData_NSPropertyDescription",
            feature = "Foundation_NSArray"
        ))]
        #[method_id(@__retain_semantics Other properties)]
        pub unsafe fn properties(
            &self,
        ) -> Id<Foundation::NSArray<CoreData::NSPropertyDescription>, Shared>;

        #[cfg(all(
            feature = "CoreData_NSPropertyDescription",
            feature = "Foundation_NSArray"
        ))]
        #[method(setProperties:)]
        pub unsafe fn setProperties(
            &self,
            properties: &Foundation::NSArray<CoreData::NSPropertyDescription>,
        );

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method_id(@__retain_semantics Other userInfo)]
        pub unsafe fn userInfo(&self) -> Option<Id<Foundation::NSDictionary, Shared>>;

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method(setUserInfo:)]
        pub unsafe fn setUserInfo(&self, userInfo: Option<&Foundation::NSDictionary>);

        #[cfg(all(
            feature = "CoreData_NSAttributeDescription",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other attributesByName)]
        pub unsafe fn attributesByName(
            &self,
        ) -> Id<
            Foundation::NSDictionary<Foundation::NSString, CoreData::NSAttributeDescription>,
            Shared,
        >;

        #[cfg(all(
            feature = "CoreData_NSRelationshipDescription",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other relationshipsByName)]
        pub unsafe fn relationshipsByName(
            &self,
        ) -> Id<
            Foundation::NSDictionary<Foundation::NSString, CoreData::NSRelationshipDescription>,
            Shared,
        >;

        #[cfg(all(
            feature = "CoreData_NSRelationshipDescription",
            feature = "Foundation_NSArray"
        ))]
        #[method_id(@__retain_semantics Other relationshipsWithDestinationEntity:)]
        pub unsafe fn relationshipsWithDestinationEntity(
            &self,
            entity: &CoreData::NSEntityDescription,
        ) -> Id<Foundation::NSArray<CoreData::NSRelationshipDescription>, Shared>;

        #[method(isKindOfEntity:)]
        pub unsafe fn isKindOfEntity(&self, entity: &CoreData::NSEntityDescription) -> bool;

        #[cfg(feature = "Foundation_NSData")]
        #[method_id(@__retain_semantics Other versionHash)]
        pub unsafe fn versionHash(&self) -> Id<Foundation::NSData, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other versionHashModifier)]
        pub unsafe fn versionHashModifier(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setVersionHashModifier:)]
        pub unsafe fn setVersionHashModifier(
            &self,
            versionHashModifier: Option<&Foundation::NSString>,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other renamingIdentifier)]
        pub unsafe fn renamingIdentifier(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setRenamingIdentifier:)]
        pub unsafe fn setRenamingIdentifier(
            &self,
            renamingIdentifier: Option<&Foundation::NSString>,
        );

        #[cfg(all(
            feature = "CoreData_NSFetchIndexDescription",
            feature = "Foundation_NSArray"
        ))]
        #[method_id(@__retain_semantics Other indexes)]
        pub unsafe fn indexes(
            &self,
        ) -> Id<Foundation::NSArray<CoreData::NSFetchIndexDescription>, Shared>;

        #[cfg(all(
            feature = "CoreData_NSFetchIndexDescription",
            feature = "Foundation_NSArray"
        ))]
        #[method(setIndexes:)]
        pub unsafe fn setIndexes(
            &self,
            indexes: &Foundation::NSArray<CoreData::NSFetchIndexDescription>,
        );

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other uniquenessConstraints)]
        pub unsafe fn uniquenessConstraints(
            &self,
        ) -> Id<Foundation::NSArray<Foundation::NSArray<Object>>, Shared>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method(setUniquenessConstraints:)]
        pub unsafe fn setUniquenessConstraints(
            &self,
            uniquenessConstraints: &Foundation::NSArray<Foundation::NSArray<Object>>,
        );

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other compoundIndexes)]
        pub unsafe fn compoundIndexes(
            &self,
        ) -> Id<Foundation::NSArray<Foundation::NSArray<Object>>, Shared>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method(setCompoundIndexes:)]
        pub unsafe fn setCompoundIndexes(
            &self,
            compoundIndexes: &Foundation::NSArray<Foundation::NSArray<Object>>,
        );

        #[cfg(feature = "Foundation_NSExpression")]
        #[method_id(@__retain_semantics Other coreSpotlightDisplayNameExpression)]
        pub unsafe fn coreSpotlightDisplayNameExpression(
            &self,
        ) -> Id<Foundation::NSExpression, Shared>;

        #[cfg(feature = "Foundation_NSExpression")]
        #[method(setCoreSpotlightDisplayNameExpression:)]
        pub unsafe fn setCoreSpotlightDisplayNameExpression(
            &self,
            coreSpotlightDisplayNameExpression: &Foundation::NSExpression,
        );
    }
);
