//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreData;
use crate::Foundation;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSManagedObjectModel;

    unsafe impl ClassType for NSManagedObjectModel {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "CoreData_NSManagedObjectModel")]
    unsafe impl NSManagedObjectModel {
        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSBundle"))]
        #[method_id(@__retain_semantics Other mergedModelFromBundles:)]
        pub unsafe fn mergedModelFromBundles(
            bundles: Option<&Foundation::NSArray<Foundation::NSBundle>>,
        ) -> Option<Id<CoreData::NSManagedObjectModel, Shared>>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other modelByMergingModels:)]
        pub unsafe fn modelByMergingModels(
            models: Option<&Foundation::NSArray<CoreData::NSManagedObjectModel>>,
        ) -> Option<Id<CoreData::NSManagedObjectModel, Shared>>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self, Shared>;

        #[cfg(feature = "Foundation_NSURL")]
        #[method_id(@__retain_semantics Init initWithContentsOfURL:)]
        pub unsafe fn initWithContentsOfURL(
            this: Option<Allocated<Self>>,
            url: &Foundation::NSURL,
        ) -> Option<Id<Self, Shared>>;

        #[cfg(all(
            feature = "CoreData_NSEntityDescription",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other entitiesByName)]
        pub unsafe fn entitiesByName(
            &self,
        ) -> Id<Foundation::NSDictionary<Foundation::NSString, CoreData::NSEntityDescription>, Shared>;

        #[cfg(all(
            feature = "CoreData_NSEntityDescription",
            feature = "Foundation_NSArray"
        ))]
        #[method_id(@__retain_semantics Other entities)]
        pub unsafe fn entities(
            &self,
        ) -> Id<Foundation::NSArray<CoreData::NSEntityDescription>, Shared>;

        #[cfg(all(
            feature = "CoreData_NSEntityDescription",
            feature = "Foundation_NSArray"
        ))]
        #[method(setEntities:)]
        pub unsafe fn setEntities(
            &self,
            entities: &Foundation::NSArray<CoreData::NSEntityDescription>,
        );

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other configurations)]
        pub unsafe fn configurations(
            &self,
        ) -> Id<Foundation::NSArray<Foundation::NSString>, Shared>;

        #[cfg(all(
            feature = "CoreData_NSEntityDescription",
            feature = "Foundation_NSArray",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other entitiesForConfiguration:)]
        pub unsafe fn entitiesForConfiguration(
            &self,
            configuration: Option<&Foundation::NSString>,
        ) -> Option<Id<Foundation::NSArray<CoreData::NSEntityDescription>, Shared>>;

        #[cfg(all(
            feature = "CoreData_NSEntityDescription",
            feature = "Foundation_NSArray",
            feature = "Foundation_NSString"
        ))]
        #[method(setEntities:forConfiguration:)]
        pub unsafe fn setEntities_forConfiguration(
            &self,
            entities: &Foundation::NSArray<CoreData::NSEntityDescription>,
            configuration: &Foundation::NSString,
        );

        #[cfg(all(feature = "CoreData_NSFetchRequest", feature = "Foundation_NSString"))]
        #[method(setFetchRequestTemplate:forName:)]
        pub unsafe fn setFetchRequestTemplate_forName(
            &self,
            fetchRequestTemplate: Option<&CoreData::NSFetchRequest>,
            name: &Foundation::NSString,
        );

        #[cfg(all(feature = "CoreData_NSFetchRequest", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other fetchRequestTemplateForName:)]
        pub unsafe fn fetchRequestTemplateForName(
            &self,
            name: &Foundation::NSString,
        ) -> Option<Id<CoreData::NSFetchRequest, Shared>>;

        #[cfg(all(
            feature = "CoreData_NSFetchRequest",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other fetchRequestFromTemplateWithName:substitutionVariables:)]
        pub unsafe fn fetchRequestFromTemplateWithName_substitutionVariables(
            &self,
            name: &Foundation::NSString,
            variables: &Foundation::NSDictionary<Foundation::NSString, Object>,
        ) -> Option<Id<CoreData::NSFetchRequest, Shared>>;

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other localizationDictionary)]
        pub unsafe fn localizationDictionary(
            &self,
        ) -> Option<Id<Foundation::NSDictionary<Foundation::NSString, Foundation::NSString>, Shared>>;

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method(setLocalizationDictionary:)]
        pub unsafe fn setLocalizationDictionary(
            &self,
            localizationDictionary: Option<
                &Foundation::NSDictionary<Foundation::NSString, Foundation::NSString>,
            >,
        );

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSBundle",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other mergedModelFromBundles:forStoreMetadata:)]
        pub unsafe fn mergedModelFromBundles_forStoreMetadata(
            bundles: Option<&Foundation::NSArray<Foundation::NSBundle>>,
            metadata: &Foundation::NSDictionary<Foundation::NSString, Object>,
        ) -> Option<Id<CoreData::NSManagedObjectModel, Shared>>;

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other modelByMergingModels:forStoreMetadata:)]
        pub unsafe fn modelByMergingModels_forStoreMetadata(
            models: &Foundation::NSArray<CoreData::NSManagedObjectModel>,
            metadata: &Foundation::NSDictionary<Foundation::NSString, Object>,
        ) -> Option<Id<CoreData::NSManagedObjectModel, Shared>>;

        #[cfg(all(
            feature = "CoreData_NSFetchRequest",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other fetchRequestTemplatesByName)]
        pub unsafe fn fetchRequestTemplatesByName(
            &self,
        ) -> Id<Foundation::NSDictionary<Foundation::NSString, CoreData::NSFetchRequest>, Shared>;

        #[cfg(feature = "Foundation_NSSet")]
        #[method_id(@__retain_semantics Other versionIdentifiers)]
        pub unsafe fn versionIdentifiers(&self) -> Id<Foundation::NSSet, Shared>;

        #[cfg(feature = "Foundation_NSSet")]
        #[method(setVersionIdentifiers:)]
        pub unsafe fn setVersionIdentifiers(&self, versionIdentifiers: &Foundation::NSSet);

        #[cfg(all(feature = "Foundation_NSDictionary", feature = "Foundation_NSString"))]
        #[method(isConfiguration:compatibleWithStoreMetadata:)]
        pub unsafe fn isConfiguration_compatibleWithStoreMetadata(
            &self,
            configuration: Option<&Foundation::NSString>,
            metadata: &Foundation::NSDictionary<Foundation::NSString, Object>,
        ) -> bool;

        #[cfg(all(
            feature = "Foundation_NSData",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[method_id(@__retain_semantics Other entityVersionHashesByName)]
        pub unsafe fn entityVersionHashesByName(
            &self,
        ) -> Id<Foundation::NSDictionary<Foundation::NSString, Foundation::NSData>, Shared>;
    }
);
