//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreData;
use crate::Foundation;

extern_static!(NSFetchRequestExpressionType: NSExpressionType = 50);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSFetchRequestExpression;

    unsafe impl ClassType for NSFetchRequestExpression {
        #[inherits(NSObject)]
        type Super = Foundation::NSExpression;
    }
);

extern_methods!(
    #[cfg(feature = "CoreData_NSFetchRequestExpression")]
    unsafe impl NSFetchRequestExpression {
        #[method_id(@__retain_semantics Other expressionForFetch:context:countOnly:)]
        pub unsafe fn expressionForFetch_context_countOnly(
            fetch: &Foundation::NSExpression,
            context: &Foundation::NSExpression,
            countFlag: bool,
        ) -> Id<Foundation::NSExpression, Shared>;

        #[method_id(@__retain_semantics Other requestExpression)]
        pub unsafe fn requestExpression(&self) -> Id<Foundation::NSExpression, Shared>;

        #[method_id(@__retain_semantics Other contextExpression)]
        pub unsafe fn contextExpression(&self) -> Id<Foundation::NSExpression, Shared>;

        #[method(isCountOnlyRequest)]
        pub unsafe fn isCountOnlyRequest(&self) -> bool;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSExpression`
    #[cfg(feature = "CoreData_NSFetchRequestExpression")]
    unsafe impl CoreData::NSFetchRequestExpression {
        #[method_id(@__retain_semantics Init initWithExpressionType:)]
        pub unsafe fn initWithExpressionType(
            this: Option<Allocated<Self>>,
            type_: NSExpressionType,
        ) -> Id<Self, Shared>;
    }
);
