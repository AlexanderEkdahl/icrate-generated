//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreData;
use crate::Foundation;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSPersistentHistoryTransaction;

    unsafe impl ClassType for NSPersistentHistoryTransaction {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "CoreData_NSPersistentHistoryTransaction")]
    unsafe impl NSPersistentHistoryTransaction {
        #[cfg(all(
            feature = "CoreData_NSEntityDescription",
            feature = "CoreData_NSManagedObjectContext"
        ))]
        #[method_id(@__retain_semantics Other entityDescriptionWithContext:)]
        pub unsafe fn entityDescriptionWithContext(
            context: &CoreData::NSManagedObjectContext,
        ) -> Option<Id<CoreData::NSEntityDescription, Shared>>;

        #[cfg(feature = "CoreData_NSEntityDescription")]
        #[method_id(@__retain_semantics Other entityDescription)]
        pub unsafe fn entityDescription() -> Option<Id<CoreData::NSEntityDescription, Shared>>;

        #[cfg(feature = "CoreData_NSFetchRequest")]
        #[method_id(@__retain_semantics Other fetchRequest)]
        pub unsafe fn fetchRequest() -> Option<Id<CoreData::NSFetchRequest, Shared>>;

        #[cfg(feature = "Foundation_NSDate")]
        #[method_id(@__retain_semantics Other timestamp)]
        pub unsafe fn timestamp(&self) -> Id<Foundation::NSDate, Shared>;

        #[cfg(all(
            feature = "CoreData_NSPersistentHistoryChange",
            feature = "Foundation_NSArray"
        ))]
        #[method_id(@__retain_semantics Other changes)]
        pub unsafe fn changes(
            &self,
        ) -> Option<Id<Foundation::NSArray<CoreData::NSPersistentHistoryChange>, Shared>>;

        #[method(transactionNumber)]
        pub unsafe fn transactionNumber(&self) -> i64;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other storeID)]
        pub unsafe fn storeID(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other bundleID)]
        pub unsafe fn bundleID(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other processID)]
        pub unsafe fn processID(&self) -> Id<Foundation::NSString, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other contextName)]
        pub unsafe fn contextName(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other author)]
        pub unsafe fn author(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "CoreData_NSPersistentHistoryToken")]
        #[method_id(@__retain_semantics Other token)]
        pub unsafe fn token(&self) -> Id<CoreData::NSPersistentHistoryToken, Shared>;

        #[cfg(feature = "Foundation_NSNotification")]
        #[method_id(@__retain_semantics Other objectIDNotification)]
        pub unsafe fn objectIDNotification(&self) -> Id<Foundation::NSNotification, Shared>;
    }
);
