//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AuthenticationServices;
use crate::Foundation;

typed_extensible_enum!(
    pub type ASAuthorizationOpenIDOperation = Foundation::NSString;
);

extern_static!(
    ASAuthorizationOperationImplicit:
        &'static AuthenticationServices::ASAuthorizationOpenIDOperation
);

extern_static!(
    ASAuthorizationOperationLogin: &'static AuthenticationServices::ASAuthorizationOpenIDOperation
);

extern_static!(
    ASAuthorizationOperationRefresh:
        &'static AuthenticationServices::ASAuthorizationOpenIDOperation
);

extern_static!(
    ASAuthorizationOperationLogout: &'static AuthenticationServices::ASAuthorizationOpenIDOperation
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct ASAuthorizationOpenIDRequest;

    unsafe impl ClassType for ASAuthorizationOpenIDRequest {
        #[inherits(NSObject)]
        type Super = AuthenticationServices::ASAuthorizationRequest;
    }
);

extern_methods!(
    #[cfg(feature = "AuthenticationServices_ASAuthorizationOpenIDRequest")]
    unsafe impl ASAuthorizationOpenIDRequest {
        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other requestedScopes)]
        pub unsafe fn requestedScopes(
            &self,
        ) -> Option<Id<Foundation::NSArray<AuthenticationServices::ASAuthorizationScope>, Shared>>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method(setRequestedScopes:)]
        pub unsafe fn setRequestedScopes(
            &self,
            requestedScopes: Option<
                &Foundation::NSArray<AuthenticationServices::ASAuthorizationScope>,
            >,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other state)]
        pub unsafe fn state(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setState:)]
        pub unsafe fn setState(&self, state: Option<&Foundation::NSString>);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other nonce)]
        pub unsafe fn nonce(&self) -> Option<Id<Foundation::NSString, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setNonce:)]
        pub unsafe fn setNonce(&self, nonce: Option<&Foundation::NSString>);

        #[method_id(@__retain_semantics Other requestedOperation)]
        pub unsafe fn requestedOperation(
            &self,
        ) -> Id<AuthenticationServices::ASAuthorizationOpenIDOperation, Shared>;

        #[method(setRequestedOperation:)]
        pub unsafe fn setRequestedOperation(
            &self,
            requestedOperation: &AuthenticationServices::ASAuthorizationOpenIDOperation,
        );
    }
);
