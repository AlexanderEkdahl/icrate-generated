//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AuthenticationServices;
use crate::Foundation;

extern_protocol!(
    pub struct ASAuthorizationPublicKeyCredentialAssertionRequest;

    unsafe impl ProtocolType for ASAuthorizationPublicKeyCredentialAssertionRequest {
        #[method_id(@__retain_semantics Other challenge)]
        pub unsafe fn challenge(&self) -> Id<Foundation::NSData, Shared>;

        #[method(setChallenge:)]
        pub unsafe fn setChallenge(&self, challenge: &Foundation::NSData);

        #[method_id(@__retain_semantics Other relyingPartyIdentifier)]
        pub unsafe fn relyingPartyIdentifier(&self) -> Id<Foundation::NSString, Shared>;

        #[method(setRelyingPartyIdentifier:)]
        pub unsafe fn setRelyingPartyIdentifier(
            &self,
            relyingPartyIdentifier: &Foundation::NSString,
        );

        #[method_id(@__retain_semantics Other allowedCredentials)]
        pub unsafe fn allowedCredentials(
            &self,
        ) -> Id<
            Foundation::NSArray<
                AuthenticationServices::ASAuthorizationPublicKeyCredentialDescriptor,
            >,
            Shared,
        >;

        #[method(setAllowedCredentials:)]
        pub unsafe fn setAllowedCredentials(
            &self,
            allowedCredentials: &Foundation::NSArray<
                AuthenticationServices::ASAuthorizationPublicKeyCredentialDescriptor,
            >,
        );

        #[method_id(@__retain_semantics Other userVerificationPreference)]
        pub unsafe fn userVerificationPreference(
            &self,
        ) -> Id<
            AuthenticationServices::ASAuthorizationPublicKeyCredentialUserVerificationPreference,
            Shared,
        >;

        #[method(setUserVerificationPreference:)]
        pub unsafe fn setUserVerificationPreference(
            &self,
            userVerificationPreference: &AuthenticationServices::ASAuthorizationPublicKeyCredentialUserVerificationPreference,
        );
    }
);
