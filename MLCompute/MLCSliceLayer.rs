//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::MLCompute::*;
use crate::Metal::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MLCompute_MLCSliceLayer")]
    pub struct MLCSliceLayer;

    #[cfg(feature = "MLCompute_MLCSliceLayer")]
    unsafe impl ClassType for MLCSliceLayer {
        #[inherits(NSObject)]
        type Super = MLCLayer;
        type Mutability = InteriorMutable;
    }
);

#[cfg(feature = "MLCompute_MLCSliceLayer")]
unsafe impl NSObjectProtocol for MLCSliceLayer {}

extern_methods!(
    #[cfg(feature = "MLCompute_MLCSliceLayer")]
    unsafe impl MLCSliceLayer {
        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
        #[method_id(@__retain_semantics Other start)]
        pub unsafe fn start(&self) -> Id<NSArray<NSNumber>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
        #[method_id(@__retain_semantics Other end)]
        pub unsafe fn end(&self) -> Id<NSArray<NSNumber>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
        #[method_id(@__retain_semantics Other stride)]
        pub unsafe fn stride(&self) -> Option<Id<NSArray<NSNumber>>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
        #[method_id(@__retain_semantics Other sliceLayerWithStart:end:stride:)]
        pub unsafe fn sliceLayerWithStart_end_stride(
            start: &NSArray<NSNumber>,
            end: &NSArray<NSNumber>,
            stride: Option<&NSArray<NSNumber>>,
        ) -> Option<Id<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MLCLayer`
    #[cfg(feature = "MLCompute_MLCSliceLayer")]
    unsafe impl MLCSliceLayer {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;
    }
);
