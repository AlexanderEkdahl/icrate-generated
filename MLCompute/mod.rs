//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
#![allow(unused_imports)]
#![allow(deprecated)]
#[path = "MLCActivationDescriptor.rs"]
mod __MLCActivationDescriptor;
#[path = "MLCActivationLayer.rs"]
mod __MLCActivationLayer;
#[path = "MLCAdamOptimizer.rs"]
mod __MLCAdamOptimizer;
#[path = "MLCAdamWOptimizer.rs"]
mod __MLCAdamWOptimizer;
#[path = "MLCArithmeticLayer.rs"]
mod __MLCArithmeticLayer;
#[path = "MLCBatchNormalizationLayer.rs"]
mod __MLCBatchNormalizationLayer;
#[path = "MLCComparisonLayer.rs"]
mod __MLCComparisonLayer;
#[path = "MLCConcatenationLayer.rs"]
mod __MLCConcatenationLayer;
#[path = "MLCConvolutionDescriptor.rs"]
mod __MLCConvolutionDescriptor;
#[path = "MLCConvolutionLayer.rs"]
mod __MLCConvolutionLayer;
#[path = "MLCDefines.rs"]
mod __MLCDefines;
#[path = "MLCDevice.rs"]
mod __MLCDevice;
#[path = "MLCDropoutLayer.rs"]
mod __MLCDropoutLayer;
#[path = "MLCEmbeddingDescriptor.rs"]
mod __MLCEmbeddingDescriptor;
#[path = "MLCEmbeddingLayer.rs"]
mod __MLCEmbeddingLayer;
#[path = "MLCFullyConnectedLayer.rs"]
mod __MLCFullyConnectedLayer;
#[path = "MLCGatherLayer.rs"]
mod __MLCGatherLayer;
#[path = "MLCGramMatrixLayer.rs"]
mod __MLCGramMatrixLayer;
#[path = "MLCGraph.rs"]
mod __MLCGraph;
#[path = "MLCGroupNormalizationLayer.rs"]
mod __MLCGroupNormalizationLayer;
#[path = "MLCInferenceGraph.rs"]
mod __MLCInferenceGraph;
#[path = "MLCInstanceNormalizationLayer.rs"]
mod __MLCInstanceNormalizationLayer;
#[path = "MLCLSTMDescriptor.rs"]
mod __MLCLSTMDescriptor;
#[path = "MLCLSTMLayer.rs"]
mod __MLCLSTMLayer;
#[path = "MLCLayer.rs"]
mod __MLCLayer;
#[path = "MLCLayerNormalizationLayer.rs"]
mod __MLCLayerNormalizationLayer;
#[path = "MLCLossDescriptor.rs"]
mod __MLCLossDescriptor;
#[path = "MLCLossLayer.rs"]
mod __MLCLossLayer;
#[path = "MLCMatMulDescriptor.rs"]
mod __MLCMatMulDescriptor;
#[path = "MLCMatMulLayer.rs"]
mod __MLCMatMulLayer;
#[path = "MLCMultiheadAttentionDescriptor.rs"]
mod __MLCMultiheadAttentionDescriptor;
#[path = "MLCMultiheadAttentionLayer.rs"]
mod __MLCMultiheadAttentionLayer;
#[path = "MLCOptimizer.rs"]
mod __MLCOptimizer;
#[path = "MLCOptimizerDescriptor.rs"]
mod __MLCOptimizerDescriptor;
#[path = "MLCPaddingLayer.rs"]
mod __MLCPaddingLayer;
#[path = "MLCPlatform.rs"]
mod __MLCPlatform;
#[path = "MLCPoolingDescriptor.rs"]
mod __MLCPoolingDescriptor;
#[path = "MLCPoolingLayer.rs"]
mod __MLCPoolingLayer;
#[path = "MLCRMSPropOptimizer.rs"]
mod __MLCRMSPropOptimizer;
#[path = "MLCReductionLayer.rs"]
mod __MLCReductionLayer;
#[path = "MLCReshapeLayer.rs"]
mod __MLCReshapeLayer;
#[path = "MLCSGDOptimizer.rs"]
mod __MLCSGDOptimizer;
#[path = "MLCScatterLayer.rs"]
mod __MLCScatterLayer;
#[path = "MLCSelectionLayer.rs"]
mod __MLCSelectionLayer;
#[path = "MLCSliceLayer.rs"]
mod __MLCSliceLayer;
#[path = "MLCSoftmaxLayer.rs"]
mod __MLCSoftmaxLayer;
#[path = "MLCSplitLayer.rs"]
mod __MLCSplitLayer;
#[path = "MLCTensor.rs"]
mod __MLCTensor;
#[path = "MLCTensorData.rs"]
mod __MLCTensorData;
#[path = "MLCTensorDescriptor.rs"]
mod __MLCTensorDescriptor;
#[path = "MLCTensorOptimizerDeviceData.rs"]
mod __MLCTensorOptimizerDeviceData;
#[path = "MLCTensorParameter.rs"]
mod __MLCTensorParameter;
#[path = "MLCTrainingGraph.rs"]
mod __MLCTrainingGraph;
#[path = "MLCTransposeLayer.rs"]
mod __MLCTransposeLayer;
#[path = "MLCTypes.rs"]
mod __MLCTypes;
#[path = "MLCUpsampleLayer.rs"]
mod __MLCUpsampleLayer;
#[path = "MLCYOLOLossDescriptor.rs"]
mod __MLCYOLOLossDescriptor;
#[path = "MLCYOLOLossLayer.rs"]
mod __MLCYOLOLossLayer;

#[cfg(feature = "MLCompute_MLCActivationDescriptor")]
pub use self::__MLCActivationDescriptor::MLCActivationDescriptor;
#[cfg(feature = "MLCompute_MLCActivationLayer")]
pub use self::__MLCActivationLayer::MLCActivationLayer;
#[cfg(feature = "MLCompute_MLCAdamOptimizer")]
pub use self::__MLCAdamOptimizer::MLCAdamOptimizer;
#[cfg(feature = "MLCompute_MLCAdamWOptimizer")]
pub use self::__MLCAdamWOptimizer::MLCAdamWOptimizer;
#[cfg(feature = "MLCompute_MLCArithmeticLayer")]
pub use self::__MLCArithmeticLayer::MLCArithmeticLayer;
#[cfg(feature = "MLCompute_MLCBatchNormalizationLayer")]
pub use self::__MLCBatchNormalizationLayer::MLCBatchNormalizationLayer;
#[cfg(feature = "MLCompute_MLCComparisonLayer")]
pub use self::__MLCComparisonLayer::MLCComparisonLayer;
#[cfg(feature = "MLCompute_MLCConcatenationLayer")]
pub use self::__MLCConcatenationLayer::MLCConcatenationLayer;
#[cfg(feature = "MLCompute_MLCConvolutionDescriptor")]
pub use self::__MLCConvolutionDescriptor::MLCConvolutionDescriptor;
#[cfg(feature = "MLCompute_MLCConvolutionLayer")]
pub use self::__MLCConvolutionLayer::MLCConvolutionLayer;
#[cfg(feature = "MLCompute_MLCDevice")]
pub use self::__MLCDevice::MLCDevice;
#[cfg(feature = "MLCompute_MLCDropoutLayer")]
pub use self::__MLCDropoutLayer::MLCDropoutLayer;
#[cfg(feature = "MLCompute_MLCEmbeddingDescriptor")]
pub use self::__MLCEmbeddingDescriptor::MLCEmbeddingDescriptor;
#[cfg(feature = "MLCompute_MLCEmbeddingLayer")]
pub use self::__MLCEmbeddingLayer::MLCEmbeddingLayer;
#[cfg(feature = "MLCompute_MLCFullyConnectedLayer")]
pub use self::__MLCFullyConnectedLayer::MLCFullyConnectedLayer;
#[cfg(feature = "MLCompute_MLCGatherLayer")]
pub use self::__MLCGatherLayer::MLCGatherLayer;
#[cfg(feature = "MLCompute_MLCGramMatrixLayer")]
pub use self::__MLCGramMatrixLayer::MLCGramMatrixLayer;
#[cfg(feature = "MLCompute_MLCGraph")]
pub use self::__MLCGraph::MLCGraph;
#[cfg(feature = "MLCompute_MLCGroupNormalizationLayer")]
pub use self::__MLCGroupNormalizationLayer::MLCGroupNormalizationLayer;
#[cfg(feature = "MLCompute_MLCInferenceGraph")]
pub use self::__MLCInferenceGraph::MLCInferenceGraph;
#[cfg(feature = "MLCompute_MLCInstanceNormalizationLayer")]
pub use self::__MLCInstanceNormalizationLayer::MLCInstanceNormalizationLayer;
#[cfg(feature = "MLCompute_MLCLSTMDescriptor")]
pub use self::__MLCLSTMDescriptor::MLCLSTMDescriptor;
#[cfg(feature = "MLCompute_MLCLSTMLayer")]
pub use self::__MLCLSTMLayer::MLCLSTMLayer;
#[cfg(feature = "MLCompute_MLCLayer")]
pub use self::__MLCLayer::MLCLayer;
#[cfg(feature = "MLCompute_MLCLayerNormalizationLayer")]
pub use self::__MLCLayerNormalizationLayer::MLCLayerNormalizationLayer;
#[cfg(feature = "MLCompute_MLCLossDescriptor")]
pub use self::__MLCLossDescriptor::MLCLossDescriptor;
#[cfg(feature = "MLCompute_MLCLossLayer")]
pub use self::__MLCLossLayer::MLCLossLayer;
#[cfg(feature = "MLCompute_MLCMatMulDescriptor")]
pub use self::__MLCMatMulDescriptor::MLCMatMulDescriptor;
#[cfg(feature = "MLCompute_MLCMatMulLayer")]
pub use self::__MLCMatMulLayer::MLCMatMulLayer;
#[cfg(feature = "MLCompute_MLCMultiheadAttentionDescriptor")]
pub use self::__MLCMultiheadAttentionDescriptor::MLCMultiheadAttentionDescriptor;
#[cfg(feature = "MLCompute_MLCMultiheadAttentionLayer")]
pub use self::__MLCMultiheadAttentionLayer::MLCMultiheadAttentionLayer;
#[cfg(feature = "MLCompute_MLCOptimizer")]
pub use self::__MLCOptimizer::MLCOptimizer;
#[cfg(feature = "MLCompute_MLCOptimizerDescriptor")]
pub use self::__MLCOptimizerDescriptor::MLCOptimizerDescriptor;
#[cfg(feature = "MLCompute_MLCPaddingLayer")]
pub use self::__MLCPaddingLayer::MLCPaddingLayer;
#[cfg(feature = "MLCompute_MLCPlatform")]
pub use self::__MLCPlatform::MLCPlatform;
#[cfg(feature = "MLCompute_MLCPoolingDescriptor")]
pub use self::__MLCPoolingDescriptor::MLCPoolingDescriptor;
#[cfg(feature = "MLCompute_MLCPoolingLayer")]
pub use self::__MLCPoolingLayer::MLCPoolingLayer;
#[cfg(feature = "MLCompute_MLCRMSPropOptimizer")]
pub use self::__MLCRMSPropOptimizer::MLCRMSPropOptimizer;
#[cfg(feature = "MLCompute_MLCReductionLayer")]
pub use self::__MLCReductionLayer::MLCReductionLayer;
#[cfg(feature = "MLCompute_MLCReshapeLayer")]
pub use self::__MLCReshapeLayer::MLCReshapeLayer;
#[cfg(feature = "MLCompute_MLCSGDOptimizer")]
pub use self::__MLCSGDOptimizer::MLCSGDOptimizer;
#[cfg(feature = "MLCompute_MLCScatterLayer")]
pub use self::__MLCScatterLayer::MLCScatterLayer;
#[cfg(feature = "MLCompute_MLCSelectionLayer")]
pub use self::__MLCSelectionLayer::MLCSelectionLayer;
#[cfg(feature = "MLCompute_MLCSliceLayer")]
pub use self::__MLCSliceLayer::MLCSliceLayer;
#[cfg(feature = "MLCompute_MLCSoftmaxLayer")]
pub use self::__MLCSoftmaxLayer::MLCSoftmaxLayer;
#[cfg(feature = "MLCompute_MLCSplitLayer")]
pub use self::__MLCSplitLayer::MLCSplitLayer;
#[cfg(feature = "MLCompute_MLCTensor")]
pub use self::__MLCTensor::MLCTensor;
#[cfg(feature = "MLCompute_MLCTensorData")]
pub use self::__MLCTensorData::MLCTensorData;
#[cfg(feature = "MLCompute_MLCTensorDescriptor")]
pub use self::__MLCTensorDescriptor::MLCTensorDescriptor;
#[cfg(feature = "MLCompute_MLCTensorOptimizerDeviceData")]
pub use self::__MLCTensorOptimizerDeviceData::MLCTensorOptimizerDeviceData;
#[cfg(feature = "MLCompute_MLCTensorParameter")]
pub use self::__MLCTensorParameter::MLCTensorParameter;
#[cfg(feature = "MLCompute_MLCTrainingGraph")]
pub use self::__MLCTrainingGraph::MLCTrainingGraph;
#[cfg(feature = "MLCompute_MLCTransposeLayer")]
pub use self::__MLCTransposeLayer::MLCTransposeLayer;
#[cfg(feature = "Foundation_NSString")]
pub use self::__MLCTypes::MLCActivationTypeDebugDescription;
#[cfg(feature = "Foundation_NSString")]
pub use self::__MLCTypes::MLCArithmeticOperationDebugDescription;
#[cfg(feature = "Foundation_NSString")]
pub use self::__MLCTypes::MLCComparisonOperationDebugDescription;
#[cfg(feature = "Foundation_NSString")]
pub use self::__MLCTypes::MLCConvolutionTypeDebugDescription;
#[cfg(feature = "Foundation_NSString")]
pub use self::__MLCTypes::MLCGradientClippingTypeDebugDescription;
pub use self::__MLCTypes::MLCGraphCompletionHandler;
#[cfg(feature = "Foundation_NSString")]
pub use self::__MLCTypes::MLCLSTMResultModeDebugDescription;
#[cfg(feature = "Foundation_NSString")]
pub use self::__MLCTypes::MLCLossTypeDebugDescription;
#[cfg(feature = "Foundation_NSString")]
pub use self::__MLCTypes::MLCPaddingPolicyDebugDescription;
#[cfg(feature = "Foundation_NSString")]
pub use self::__MLCTypes::MLCPaddingTypeDebugDescription;
#[cfg(feature = "Foundation_NSString")]
pub use self::__MLCTypes::MLCPoolingTypeDebugDescription;
#[cfg(feature = "Foundation_NSString")]
pub use self::__MLCTypes::MLCReductionTypeDebugDescription;
#[cfg(feature = "Foundation_NSString")]
pub use self::__MLCTypes::MLCSampleModeDebugDescription;
#[cfg(feature = "Foundation_NSString")]
pub use self::__MLCTypes::MLCSoftmaxOperationDebugDescription;
pub use self::__MLCTypes::{
    MLCActivationType, MLCActivationTypeAbsolute, MLCActivationTypeCELU, MLCActivationTypeClamp,
    MLCActivationTypeCount, MLCActivationTypeELU, MLCActivationTypeGELU,
    MLCActivationTypeHardShrink, MLCActivationTypeHardSigmoid, MLCActivationTypeHardSwish,
    MLCActivationTypeLinear, MLCActivationTypeLogSigmoid, MLCActivationTypeNone,
    MLCActivationTypeReLU, MLCActivationTypeReLUN, MLCActivationTypeSELU, MLCActivationTypeSigmoid,
    MLCActivationTypeSoftPlus, MLCActivationTypeSoftShrink, MLCActivationTypeSoftSign,
    MLCActivationTypeTanh, MLCActivationTypeTanhShrink, MLCActivationTypeThreshold,
};
pub use self::__MLCTypes::{
    MLCArithmeticOperation, MLCArithmeticOperationAcos, MLCArithmeticOperationAcosh,
    MLCArithmeticOperationAdd, MLCArithmeticOperationAsin, MLCArithmeticOperationAsinh,
    MLCArithmeticOperationAtan, MLCArithmeticOperationAtanh, MLCArithmeticOperationCeil,
    MLCArithmeticOperationCos, MLCArithmeticOperationCosh, MLCArithmeticOperationCount,
    MLCArithmeticOperationDivide, MLCArithmeticOperationDivideNoNaN, MLCArithmeticOperationExp,
    MLCArithmeticOperationExp2, MLCArithmeticOperationFloor, MLCArithmeticOperationLog,
    MLCArithmeticOperationLog2, MLCArithmeticOperationMax, MLCArithmeticOperationMin,
    MLCArithmeticOperationMultiply, MLCArithmeticOperationMultiplyNoNaN, MLCArithmeticOperationPow,
    MLCArithmeticOperationRound, MLCArithmeticOperationRsqrt, MLCArithmeticOperationSin,
    MLCArithmeticOperationSinh, MLCArithmeticOperationSqrt, MLCArithmeticOperationSubtract,
    MLCArithmeticOperationTan, MLCArithmeticOperationTanh,
};
pub use self::__MLCTypes::{
    MLCComparisonOperation, MLCComparisonOperationCount, MLCComparisonOperationEqual,
    MLCComparisonOperationGreater, MLCComparisonOperationGreaterOrEqual,
    MLCComparisonOperationLess, MLCComparisonOperationLessOrEqual,
    MLCComparisonOperationLogicalAND, MLCComparisonOperationLogicalNAND,
    MLCComparisonOperationLogicalNOR, MLCComparisonOperationLogicalNOT,
    MLCComparisonOperationLogicalOR, MLCComparisonOperationLogicalXOR,
    MLCComparisonOperationNotEqual,
};
pub use self::__MLCTypes::{
    MLCConvolutionType, MLCConvolutionTypeDepthwise, MLCConvolutionTypeStandard,
    MLCConvolutionTypeTransposed,
};
pub use self::__MLCTypes::{
    MLCDataType, MLCDataTypeBoolean, MLCDataTypeCount, MLCDataTypeFloat16, MLCDataTypeFloat32,
    MLCDataTypeInt32, MLCDataTypeInt64, MLCDataTypeInt8, MLCDataTypeInvalid, MLCDataTypeUInt8,
};
pub use self::__MLCTypes::{
    MLCDeviceType, MLCDeviceTypeANE, MLCDeviceTypeAny, MLCDeviceTypeCPU, MLCDeviceTypeCount,
    MLCDeviceTypeGPU,
};
pub use self::__MLCTypes::{
    MLCExecutionOptions, MLCExecutionOptionsForwardForInference, MLCExecutionOptionsNone,
    MLCExecutionOptionsPerLayerProfiling, MLCExecutionOptionsProfiling,
    MLCExecutionOptionsSkipWritingInputDataToDevice, MLCExecutionOptionsSynchronous,
};
pub use self::__MLCTypes::{
    MLCGradientClippingType, MLCGradientClippingTypeByGlobalNorm, MLCGradientClippingTypeByNorm,
    MLCGradientClippingTypeByValue,
};
pub use self::__MLCTypes::{
    MLCGraphCompilationOptions, MLCGraphCompilationOptionsComputeAllGradients,
    MLCGraphCompilationOptionsDebugLayers, MLCGraphCompilationOptionsDisableLayerFusion,
    MLCGraphCompilationOptionsLinkGraphs, MLCGraphCompilationOptionsNone,
};
pub use self::__MLCTypes::{
    MLCLSTMResultMode, MLCLSTMResultModeOutput, MLCLSTMResultModeOutputAndStates,
};
pub use self::__MLCTypes::{
    MLCLossType, MLCLossTypeCategoricalCrossEntropy, MLCLossTypeCosineDistance, MLCLossTypeCount,
    MLCLossTypeHinge, MLCLossTypeHuber, MLCLossTypeLog, MLCLossTypeMeanAbsoluteError,
    MLCLossTypeMeanSquaredError, MLCLossTypeSigmoidCrossEntropy, MLCLossTypeSoftmaxCrossEntropy,
};
pub use self::__MLCTypes::{
    MLCPaddingPolicy, MLCPaddingPolicySame, MLCPaddingPolicyUsePaddingSize, MLCPaddingPolicyValid,
};
pub use self::__MLCTypes::{
    MLCPaddingType, MLCPaddingTypeConstant, MLCPaddingTypeReflect, MLCPaddingTypeSymmetric,
    MLCPaddingTypeZero,
};
pub use self::__MLCTypes::{
    MLCPoolingType, MLCPoolingTypeAverage, MLCPoolingTypeCount, MLCPoolingTypeL2Norm,
    MLCPoolingTypeMax,
};
pub use self::__MLCTypes::{
    MLCRandomInitializerType, MLCRandomInitializerTypeCount, MLCRandomInitializerTypeGlorotUniform,
    MLCRandomInitializerTypeInvalid, MLCRandomInitializerTypeUniform,
    MLCRandomInitializerTypeXavier,
};
pub use self::__MLCTypes::{
    MLCReductionType, MLCReductionTypeAll, MLCReductionTypeAny, MLCReductionTypeArgMax,
    MLCReductionTypeArgMin, MLCReductionTypeCount, MLCReductionTypeL1Norm, MLCReductionTypeMax,
    MLCReductionTypeMean, MLCReductionTypeMin, MLCReductionTypeNone, MLCReductionTypeSum,
};
pub use self::__MLCTypes::{
    MLCRegularizationType, MLCRegularizationTypeL1, MLCRegularizationTypeL2,
    MLCRegularizationTypeNone,
};
pub use self::__MLCTypes::{MLCSampleMode, MLCSampleModeLinear, MLCSampleModeNearest};
pub use self::__MLCTypes::{
    MLCSoftmaxOperation, MLCSoftmaxOperationLogSoftmax, MLCSoftmaxOperationSoftmax,
};
#[cfg(feature = "MLCompute_MLCUpsampleLayer")]
pub use self::__MLCUpsampleLayer::MLCUpsampleLayer;
#[cfg(feature = "MLCompute_MLCYOLOLossDescriptor")]
pub use self::__MLCYOLOLossDescriptor::MLCYOLOLossDescriptor;
#[cfg(feature = "MLCompute_MLCYOLOLossLayer")]
pub use self::__MLCYOLOLossLayer::MLCYOLOLossLayer;
