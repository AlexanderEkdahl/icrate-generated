//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::MLCompute::*;
use crate::Metal::*;

pub type MLCGraphCompletionHandler = *mut Block<(*mut MLCTensor, *mut NSError, NSTimeInterval), ()>;

ns_enum!(
    #[underlying(i32)]
    pub enum MLCDataType {
        MLCDataTypeInvalid = 0,
        MLCDataTypeFloat32 = 1,
        MLCDataTypeFloat16 = 3,
        MLCDataTypeBoolean = 4,
        MLCDataTypeInt64 = 5,
        MLCDataTypeInt32 = 7,
        MLCDataTypeInt8 = 8,
        MLCDataTypeUInt8 = 9,
        MLCDataTypeCount = 10,
    }
);

ns_enum!(
    #[underlying(i32)]
    pub enum MLCRandomInitializerType {
        MLCRandomInitializerTypeInvalid = 0,
        MLCRandomInitializerTypeUniform = 1,
        MLCRandomInitializerTypeGlorotUniform = 2,
        MLCRandomInitializerTypeXavier = 3,
        MLCRandomInitializerTypeCount = 4,
    }
);

ns_enum!(
    #[underlying(i32)]
    pub enum MLCDeviceType {
        MLCDeviceTypeCPU = 0,
        MLCDeviceTypeGPU = 1,
        MLCDeviceTypeAny = 2,
        MLCDeviceTypeANE = 3,
        MLCDeviceTypeCount = 4,
    }
);

ns_options!(
    #[underlying(u64)]
    pub enum MLCGraphCompilationOptions {
        MLCGraphCompilationOptionsNone = 0x00,
        MLCGraphCompilationOptionsDebugLayers = 0x01,
        MLCGraphCompilationOptionsDisableLayerFusion = 0x02,
        MLCGraphCompilationOptionsLinkGraphs = 0x04,
        MLCGraphCompilationOptionsComputeAllGradients = 0x08,
    }
);

ns_options!(
    #[underlying(u64)]
    pub enum MLCExecutionOptions {
        MLCExecutionOptionsNone = 0x00,
        MLCExecutionOptionsSkipWritingInputDataToDevice = 0x01,
        MLCExecutionOptionsSynchronous = 0x02,
        MLCExecutionOptionsProfiling = 0x04,
        MLCExecutionOptionsForwardForInference = 0x08,
        MLCExecutionOptionsPerLayerProfiling = 0x10,
    }
);

ns_enum!(
    #[underlying(i32)]
    pub enum MLCArithmeticOperation {
        MLCArithmeticOperationAdd = 0,
        MLCArithmeticOperationSubtract = 1,
        MLCArithmeticOperationMultiply = 2,
        MLCArithmeticOperationDivide = 3,
        MLCArithmeticOperationFloor = 4,
        MLCArithmeticOperationRound = 5,
        MLCArithmeticOperationCeil = 6,
        MLCArithmeticOperationSqrt = 7,
        MLCArithmeticOperationRsqrt = 8,
        MLCArithmeticOperationSin = 9,
        MLCArithmeticOperationCos = 10,
        MLCArithmeticOperationTan = 11,
        MLCArithmeticOperationAsin = 12,
        MLCArithmeticOperationAcos = 13,
        MLCArithmeticOperationAtan = 14,
        MLCArithmeticOperationSinh = 15,
        MLCArithmeticOperationCosh = 16,
        MLCArithmeticOperationTanh = 17,
        MLCArithmeticOperationAsinh = 18,
        MLCArithmeticOperationAcosh = 19,
        MLCArithmeticOperationAtanh = 20,
        MLCArithmeticOperationPow = 21,
        MLCArithmeticOperationExp = 22,
        MLCArithmeticOperationExp2 = 23,
        MLCArithmeticOperationLog = 24,
        MLCArithmeticOperationLog2 = 25,
        MLCArithmeticOperationMultiplyNoNaN = 26,
        MLCArithmeticOperationDivideNoNaN = 27,
        MLCArithmeticOperationMin = 28,
        MLCArithmeticOperationMax = 29,
        MLCArithmeticOperationCount = 30,
    }
);

ns_enum!(
    #[underlying(i32)]
    pub enum MLCLossType {
        MLCLossTypeMeanAbsoluteError = 0,
        MLCLossTypeMeanSquaredError = 1,
        MLCLossTypeSoftmaxCrossEntropy = 2,
        MLCLossTypeSigmoidCrossEntropy = 3,
        MLCLossTypeCategoricalCrossEntropy = 4,
        MLCLossTypeHinge = 5,
        MLCLossTypeHuber = 6,
        MLCLossTypeCosineDistance = 7,
        MLCLossTypeLog = 8,
        MLCLossTypeCount = 9,
    }
);

ns_enum!(
    #[underlying(i32)]
    pub enum MLCActivationType {
        MLCActivationTypeNone = 0,
        MLCActivationTypeReLU = 1,
        MLCActivationTypeLinear = 2,
        MLCActivationTypeSigmoid = 3,
        MLCActivationTypeHardSigmoid = 4,
        MLCActivationTypeTanh = 5,
        MLCActivationTypeAbsolute = 6,
        MLCActivationTypeSoftPlus = 7,
        MLCActivationTypeSoftSign = 8,
        MLCActivationTypeELU = 9,
        MLCActivationTypeReLUN = 10,
        MLCActivationTypeLogSigmoid = 11,
        MLCActivationTypeSELU = 12,
        MLCActivationTypeCELU = 13,
        MLCActivationTypeHardShrink = 14,
        MLCActivationTypeSoftShrink = 15,
        MLCActivationTypeTanhShrink = 16,
        MLCActivationTypeThreshold = 17,
        MLCActivationTypeGELU = 18,
        MLCActivationTypeHardSwish = 19,
        MLCActivationTypeClamp = 20,
        MLCActivationTypeCount = 21,
    }
);

ns_enum!(
    #[underlying(i32)]
    pub enum MLCConvolutionType {
        MLCConvolutionTypeStandard = 0,
        MLCConvolutionTypeTransposed = 1,
        MLCConvolutionTypeDepthwise = 2,
    }
);

ns_enum!(
    #[underlying(i32)]
    pub enum MLCPaddingPolicy {
        MLCPaddingPolicySame = 0,
        MLCPaddingPolicyValid = 1,
        MLCPaddingPolicyUsePaddingSize = 2,
    }
);

ns_enum!(
    #[underlying(i32)]
    pub enum MLCPaddingType {
        MLCPaddingTypeZero = 0,
        MLCPaddingTypeReflect = 1,
        MLCPaddingTypeSymmetric = 2,
        MLCPaddingTypeConstant = 3,
    }
);

ns_enum!(
    #[underlying(i32)]
    pub enum MLCPoolingType {
        MLCPoolingTypeMax = 1,
        MLCPoolingTypeAverage = 2,
        MLCPoolingTypeL2Norm = 3,
        MLCPoolingTypeCount = 4,
    }
);

ns_enum!(
    #[underlying(i32)]
    pub enum MLCReductionType {
        MLCReductionTypeNone = 0,
        MLCReductionTypeSum = 1,
        MLCReductionTypeMean = 2,
        MLCReductionTypeMax = 3,
        MLCReductionTypeMin = 4,
        MLCReductionTypeArgMax = 5,
        MLCReductionTypeArgMin = 6,
        MLCReductionTypeL1Norm = 7,
        MLCReductionTypeAny = 8,
        MLCReductionTypeAll = 9,
        MLCReductionTypeCount = 10,
    }
);

ns_enum!(
    #[underlying(i32)]
    pub enum MLCRegularizationType {
        MLCRegularizationTypeNone = 0,
        MLCRegularizationTypeL1 = 1,
        MLCRegularizationTypeL2 = 2,
    }
);

ns_enum!(
    #[underlying(i32)]
    pub enum MLCSampleMode {
        MLCSampleModeNearest = 0,
        MLCSampleModeLinear = 1,
    }
);

ns_enum!(
    #[underlying(i32)]
    pub enum MLCSoftmaxOperation {
        MLCSoftmaxOperationSoftmax = 0,
        MLCSoftmaxOperationLogSoftmax = 1,
    }
);

ns_enum!(
    #[underlying(u64)]
    pub enum MLCLSTMResultMode {
        MLCLSTMResultModeOutput = 0,
        MLCLSTMResultModeOutputAndStates = 1,
    }
);

ns_enum!(
    #[underlying(i32)]
    pub enum MLCComparisonOperation {
        MLCComparisonOperationEqual = 0,
        MLCComparisonOperationNotEqual = 1,
        MLCComparisonOperationLess = 2,
        MLCComparisonOperationGreater = 3,
        MLCComparisonOperationLessOrEqual = 4,
        MLCComparisonOperationGreaterOrEqual = 5,
        MLCComparisonOperationLogicalAND = 6,
        MLCComparisonOperationLogicalOR = 7,
        MLCComparisonOperationLogicalNOT = 8,
        MLCComparisonOperationLogicalNAND = 9,
        MLCComparisonOperationLogicalNOR = 10,
        MLCComparisonOperationLogicalXOR = 11,
        MLCComparisonOperationCount = 12,
    }
);

ns_enum!(
    #[underlying(i32)]
    pub enum MLCGradientClippingType {
        MLCGradientClippingTypeByValue = 0,
        MLCGradientClippingTypeByNorm = 1,
        MLCGradientClippingTypeByGlobalNorm = 2,
    }
);

extern_fn!(
    #[cfg(feature = "Foundation_NSString")]
    pub unsafe fn MLCActivationTypeDebugDescription(
        activation_type: MLCActivationType,
    ) -> NonNull<NSString>;
);

extern_fn!(
    #[cfg(feature = "Foundation_NSString")]
    pub unsafe fn MLCArithmeticOperationDebugDescription(
        operation: MLCArithmeticOperation,
    ) -> NonNull<NSString>;
);

extern_fn!(
    #[cfg(feature = "Foundation_NSString")]
    pub unsafe fn MLCPaddingPolicyDebugDescription(
        padding_policy: MLCPaddingPolicy,
    ) -> NonNull<NSString>;
);

extern_fn!(
    #[cfg(feature = "Foundation_NSString")]
    pub unsafe fn MLCLossTypeDebugDescription(loss_type: MLCLossType) -> NonNull<NSString>;
);

extern_fn!(
    #[cfg(feature = "Foundation_NSString")]
    pub unsafe fn MLCReductionTypeDebugDescription(
        reduction_type: MLCReductionType,
    ) -> NonNull<NSString>;
);

extern_fn!(
    #[cfg(feature = "Foundation_NSString")]
    pub unsafe fn MLCPaddingTypeDebugDescription(padding_type: MLCPaddingType)
        -> NonNull<NSString>;
);

extern_fn!(
    #[cfg(feature = "Foundation_NSString")]
    pub unsafe fn MLCConvolutionTypeDebugDescription(
        convolution_type: MLCConvolutionType,
    ) -> NonNull<NSString>;
);

extern_fn!(
    #[cfg(feature = "Foundation_NSString")]
    pub unsafe fn MLCPoolingTypeDebugDescription(pooling_type: MLCPoolingType)
        -> NonNull<NSString>;
);

extern_fn!(
    #[cfg(feature = "Foundation_NSString")]
    pub unsafe fn MLCSoftmaxOperationDebugDescription(
        operation: MLCSoftmaxOperation,
    ) -> NonNull<NSString>;
);

extern_fn!(
    #[cfg(feature = "Foundation_NSString")]
    pub unsafe fn MLCSampleModeDebugDescription(mode: MLCSampleMode) -> NonNull<NSString>;
);

extern_fn!(
    #[cfg(feature = "Foundation_NSString")]
    pub unsafe fn MLCLSTMResultModeDebugDescription(mode: MLCLSTMResultMode) -> NonNull<NSString>;
);

extern_fn!(
    #[cfg(feature = "Foundation_NSString")]
    pub unsafe fn MLCComparisonOperationDebugDescription(
        operation: MLCComparisonOperation,
    ) -> NonNull<NSString>;
);

extern_fn!(
    #[cfg(feature = "Foundation_NSString")]
    pub unsafe fn MLCGradientClippingTypeDebugDescription(
        gradient_clipping_type: MLCGradientClippingType,
    ) -> NonNull<NSString>;
);
