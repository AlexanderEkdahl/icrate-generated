//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::MLCompute::*;
use crate::Foundation::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MLCompute_MLCGraph")]
    pub struct MLCGraph;

    #[cfg(feature = "MLCompute_MLCGraph")]
    unsafe impl ClassType for MLCGraph {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

#[cfg(feature = "MLCompute_MLCGraph")]
unsafe impl NSObjectProtocol for MLCGraph {}

extern_methods!(
    #[cfg(feature = "MLCompute_MLCGraph")]
    unsafe impl MLCGraph {
        #[cfg(feature = "MLCompute_MLCDevice")]
        #[method_id(@__retain_semantics Other device)]
        pub unsafe fn device(&self, ) -> Option<Id<MLCDevice>>;

        #[cfg(all(feature = "Foundation_NSArray",feature = "MLCompute_MLCLayer"))]
        #[method_id(@__retain_semantics Other layers)]
        pub unsafe fn layers(&self, ) -> Id<NSArray<MLCLayer,>>;

        #[method_id(@__retain_semantics Other graph)]
        pub unsafe fn graph() -> Id<Self>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other summarizedDOTDescription)]
        pub unsafe fn summarizedDOTDescription(&self, ) -> Id<NSString>;

        #[cfg(all(feature = "MLCompute_MLCLayer",feature = "MLCompute_MLCTensor"))]
        #[method_id(@__retain_semantics Other nodeWithLayer:source:)]
        pub unsafe fn nodeWithLayer_source(&self, layer: &MLCLayer,source: &MLCTensor,) -> Option<Id<MLCTensor>>;

        #[cfg(all(feature = "Foundation_NSArray",feature = "MLCompute_MLCLayer",feature = "MLCompute_MLCTensor"))]
        #[method_id(@__retain_semantics Other nodeWithLayer:sources:)]
        pub unsafe fn nodeWithLayer_sources(&self, layer: &MLCLayer,sources: &NSArray<MLCTensor,>,) -> Option<Id<MLCTensor>>;

        #[cfg(all(feature = "Foundation_NSArray",feature = "MLCompute_MLCLayer",feature = "MLCompute_MLCTensor"))]
        #[method_id(@__retain_semantics Other nodeWithLayer:sources:disableUpdate:)]
        pub unsafe fn nodeWithLayer_sources_disableUpdate(&self, layer: &MLCLayer,sources: &NSArray<MLCTensor,>,disable_update: bool,) -> Option<Id<MLCTensor>>;

        #[cfg(all(feature = "Foundation_NSArray",feature = "MLCompute_MLCLayer",feature = "MLCompute_MLCTensor"))]
        #[method_id(@__retain_semantics Other nodeWithLayer:sources:lossLabels:)]
        pub unsafe fn nodeWithLayer_sources_lossLabels(&self, layer: &MLCLayer,sources: &NSArray<MLCTensor,>,loss_labels: &NSArray<MLCTensor,>,) -> Option<Id<MLCTensor>>;

        #[cfg(all(feature = "Foundation_NSArray",feature = "MLCompute_MLCTensor"))]
        #[method_id(@__retain_semantics Other splitWithSource:splitCount:dimension:)]
        pub unsafe fn splitWithSource_splitCount_dimension(&self, source: &MLCTensor,split_count: NSUInteger,dimension: NSUInteger,) -> Option<Id<NSArray<MLCTensor,>>>;

        #[cfg(all(feature = "Foundation_NSArray",feature = "Foundation_NSNumber",feature = "MLCompute_MLCTensor"))]
        #[method_id(@__retain_semantics Other splitWithSource:splitSectionLengths:dimension:)]
        pub unsafe fn splitWithSource_splitSectionLengths_dimension(&self, source: &MLCTensor,split_section_lengths: &NSArray<NSNumber,>,dimension: NSUInteger,) -> Option<Id<NSArray<MLCTensor,>>>;

        #[cfg(all(feature = "Foundation_NSArray",feature = "MLCompute_MLCTensor"))]
        #[method_id(@__retain_semantics Other concatenateWithSources:dimension:)]
        pub unsafe fn concatenateWithSources_dimension(&self, sources: &NSArray<MLCTensor,>,dimension: NSUInteger,) -> Option<Id<MLCTensor>>;

        #[cfg(all(feature = "Foundation_NSArray",feature = "Foundation_NSNumber",feature = "MLCompute_MLCTensor"))]
        #[method_id(@__retain_semantics Other reshapeWithShape:source:)]
        pub unsafe fn reshapeWithShape_source(&self, shape: &NSArray<NSNumber,>,source: &MLCTensor,) -> Option<Id<MLCTensor>>;

        #[cfg(all(feature = "Foundation_NSArray",feature = "Foundation_NSNumber",feature = "MLCompute_MLCTensor"))]
        #[method_id(@__retain_semantics Other transposeWithDimensions:source:)]
        pub unsafe fn transposeWithDimensions_source(&self, dimensions: &NSArray<NSNumber,>,source: &MLCTensor,) -> Option<Id<MLCTensor>>;

        #[cfg(all(feature = "Foundation_NSArray",feature = "MLCompute_MLCTensor"))]
        #[method_id(@__retain_semantics Other selectWithSources:condition:)]
        pub unsafe fn selectWithSources_condition(&self, sources: &NSArray<MLCTensor,>,condition: &MLCTensor,) -> Option<Id<MLCTensor>>;

        #[cfg(feature = "MLCompute_MLCTensor")]
        #[method_id(@__retain_semantics Other scatterWithDimension:source:indices:copyFrom:reductionType:)]
        pub unsafe fn scatterWithDimension_source_indices_copyFrom_reductionType(&self, dimension: NSUInteger,source: &MLCTensor,indices: &MLCTensor,copy_from: &MLCTensor,reduction_type: MLCReductionType,) -> Option<Id<MLCTensor>>;

        #[cfg(feature = "MLCompute_MLCTensor")]
        #[method_id(@__retain_semantics Other gatherWithDimension:source:indices:)]
        pub unsafe fn gatherWithDimension_source_indices(&self, dimension: NSUInteger,source: &MLCTensor,indices: &MLCTensor,) -> Option<Id<MLCTensor>>;

        #[cfg(all(feature = "Foundation_NSDictionary",feature = "Foundation_NSString",feature = "MLCompute_MLCDevice",feature = "MLCompute_MLCTensor",feature = "MLCompute_MLCTensorData"))]
        #[method(bindAndWriteData:forInputs:toDevice:batchSize:synchronous:)]
        pub unsafe fn bindAndWriteData_forInputs_toDevice_batchSize_synchronous(&self, inputs_data: &NSDictionary<NSString,MLCTensorData,>,input_tensors: &NSDictionary<NSString,MLCTensor,>,device: &MLCDevice,batch_size: NSUInteger,synchronous: bool,) -> bool;

        #[cfg(all(feature = "Foundation_NSDictionary",feature = "Foundation_NSString",feature = "MLCompute_MLCDevice",feature = "MLCompute_MLCTensor",feature = "MLCompute_MLCTensorData"))]
        #[method(bindAndWriteData:forInputs:toDevice:synchronous:)]
        pub unsafe fn bindAndWriteData_forInputs_toDevice_synchronous(&self, inputs_data: &NSDictionary<NSString,MLCTensorData,>,input_tensors: &NSDictionary<NSString,MLCTensor,>,device: &MLCDevice,synchronous: bool,) -> bool;

        #[cfg(all(feature = "Foundation_NSArray",feature = "MLCompute_MLCLayer",feature = "MLCompute_MLCTensor"))]
        #[method_id(@__retain_semantics Other sourceTensorsForLayer:)]
        pub unsafe fn sourceTensorsForLayer(&self, layer: &MLCLayer,) -> Id<NSArray<MLCTensor,>>;

        #[cfg(all(feature = "Foundation_NSArray",feature = "MLCompute_MLCLayer",feature = "MLCompute_MLCTensor"))]
        #[method_id(@__retain_semantics Other resultTensorsForLayer:)]
        pub unsafe fn resultTensorsForLayer(&self, layer: &MLCLayer,) -> Id<NSArray<MLCTensor,>>;

    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "MLCompute_MLCGraph")]
    unsafe impl MLCGraph {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>, ) -> Id<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;

    }
);

