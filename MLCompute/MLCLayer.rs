//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::MLCompute::*;
use crate::Metal::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MLCompute_MLCLayer")]
    pub struct MLCLayer;

    #[cfg(feature = "MLCompute_MLCLayer")]
    unsafe impl ClassType for MLCLayer {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

#[cfg(feature = "MLCompute_MLCLayer")]
unsafe impl NSObjectProtocol for MLCLayer {}

extern_methods!(
    #[cfg(feature = "MLCompute_MLCLayer")]
    unsafe impl MLCLayer {
        #[method(layerID)]
        pub unsafe fn layerID(&self) -> NSUInteger;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other label)]
        pub unsafe fn label(&self) -> Id<NSString>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setLabel:)]
        pub unsafe fn setLabel(&self, label: &NSString);

        #[method(isDebuggingEnabled)]
        pub unsafe fn isDebuggingEnabled(&self) -> bool;

        #[method(setIsDebuggingEnabled:)]
        pub unsafe fn setIsDebuggingEnabled(&self, is_debugging_enabled: bool);

        #[cfg(feature = "MLCompute_MLCDevice")]
        #[method(supportsDataType:onDevice:)]
        pub unsafe fn supportsDataType_onDevice(data_type: MLCDataType, device: &MLCDevice)
            -> bool;

        #[method(deviceType)]
        pub unsafe fn deviceType(&self) -> MLCDeviceType;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;
    }
);
