//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::MLCompute::*;
use crate::Foundation::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MLCompute_MLCTrainingGraph")]
    pub struct MLCTrainingGraph;

    #[cfg(feature = "MLCompute_MLCTrainingGraph")]
    unsafe impl ClassType for MLCTrainingGraph {
        #[inherits(NSObject)]
        type Super = MLCGraph;
        type Mutability = InteriorMutable;
    }
);

#[cfg(feature = "MLCompute_MLCTrainingGraph")]
unsafe impl NSObjectProtocol for MLCTrainingGraph {}

extern_methods!(
    #[cfg(feature = "MLCompute_MLCTrainingGraph")]
    unsafe impl MLCTrainingGraph {
        #[cfg(feature = "MLCompute_MLCOptimizer")]
        #[method_id(@__retain_semantics Other optimizer)]
        pub unsafe fn optimizer(&self, ) -> Option<Id<MLCOptimizer>>;

        #[method(deviceMemorySize)]
        pub unsafe fn deviceMemorySize(&self, ) -> NSUInteger;

        #[cfg(all(feature = "Foundation_NSArray",feature = "MLCompute_MLCLayer",feature = "MLCompute_MLCOptimizer"))]
        #[method_id(@__retain_semantics Other graphWithGraphObjects:lossLayer:optimizer:)]
        pub unsafe fn graphWithGraphObjects_lossLayer_optimizer(graph_objects: &NSArray<MLCGraph,>,loss_layer: Option<&MLCLayer>,optimizer: Option<&MLCOptimizer>,) -> Id<Self>;

        #[cfg(all(feature = "Foundation_NSDictionary",feature = "Foundation_NSString",feature = "MLCompute_MLCTensor"))]
        #[method(addInputs:lossLabels:)]
        pub unsafe fn addInputs_lossLabels(&self, inputs: &NSDictionary<NSString,MLCTensor,>,loss_labels: Option<&NSDictionary<NSString,MLCTensor,>>,) -> bool;

        #[cfg(all(feature = "Foundation_NSDictionary",feature = "Foundation_NSString",feature = "MLCompute_MLCTensor"))]
        #[method(addInputs:lossLabels:lossLabelWeights:)]
        pub unsafe fn addInputs_lossLabels_lossLabelWeights(&self, inputs: &NSDictionary<NSString,MLCTensor,>,loss_labels: Option<&NSDictionary<NSString,MLCTensor,>>,loss_label_weights: Option<&NSDictionary<NSString,MLCTensor,>>,) -> bool;

        #[cfg(all(feature = "Foundation_NSDictionary",feature = "Foundation_NSString",feature = "MLCompute_MLCTensor"))]
        #[method(addOutputs:)]
        pub unsafe fn addOutputs(&self, outputs: &NSDictionary<NSString,MLCTensor,>,) -> bool;

        #[cfg(all(feature = "Foundation_NSArray",feature = "MLCompute_MLCTensor"))]
        #[method(stopGradientForTensors:)]
        pub unsafe fn stopGradientForTensors(&self, tensors: &NSArray<MLCTensor,>,) -> bool;

        #[cfg(feature = "MLCompute_MLCDevice")]
        #[method(compileWithOptions:device:)]
        pub unsafe fn compileWithOptions_device(&self, options: MLCGraphCompilationOptions,device: &MLCDevice,) -> bool;

        #[cfg(all(feature = "Foundation_NSDictionary",feature = "Foundation_NSString",feature = "MLCompute_MLCDevice",feature = "MLCompute_MLCTensor",feature = "MLCompute_MLCTensorData"))]
        #[method(compileWithOptions:device:inputTensors:inputTensorsData:)]
        pub unsafe fn compileWithOptions_device_inputTensors_inputTensorsData(&self, options: MLCGraphCompilationOptions,device: &MLCDevice,input_tensors: Option<&NSDictionary<NSString,MLCTensor,>>,input_tensors_data: Option<&NSDictionary<NSString,MLCTensorData,>>,) -> bool;

        #[cfg(feature = "MLCompute_MLCOptimizer")]
        #[method(compileOptimizer:)]
        pub unsafe fn compileOptimizer(&self, optimizer: &MLCOptimizer,) -> bool;

        #[cfg(feature = "Foundation_NSArray")]
        #[method(linkWithGraphs:)]
        pub unsafe fn linkWithGraphs(&self, graphs: &NSArray<MLCTrainingGraph,>,) -> bool;

        #[cfg(feature = "MLCompute_MLCTensor")]
        #[method_id(@__retain_semantics Other gradientTensorForInput:)]
        pub unsafe fn gradientTensorForInput(&self, input: &MLCTensor,) -> Option<Id<MLCTensor>>;

        #[cfg(all(feature = "Foundation_NSArray",feature = "MLCompute_MLCLayer",feature = "MLCompute_MLCTensor"))]
        #[method_id(@__retain_semantics Other sourceGradientTensorsForLayer:)]
        pub unsafe fn sourceGradientTensorsForLayer(&self, layer: &MLCLayer,) -> Id<NSArray<MLCTensor,>>;

        #[cfg(all(feature = "Foundation_NSArray",feature = "MLCompute_MLCLayer",feature = "MLCompute_MLCTensor"))]
        #[method_id(@__retain_semantics Other resultGradientTensorsForLayer:)]
        pub unsafe fn resultGradientTensorsForLayer(&self, layer: &MLCLayer,) -> Id<NSArray<MLCTensor,>>;

        #[cfg(all(feature = "Foundation_NSData",feature = "MLCompute_MLCLayer",feature = "MLCompute_MLCTensor"))]
        #[method_id(@__retain_semantics Other gradientDataForParameter:layer:)]
        pub unsafe fn gradientDataForParameter_layer(&self, parameter: &MLCTensor,layer: &MLCLayer,) -> Option<Id<NSData>>;

        #[cfg(feature = "MLCompute_MLCTensor")]
        #[method_id(@__retain_semantics Other allocateUserGradientForTensor:)]
        pub unsafe fn allocateUserGradientForTensor(&self, tensor: &MLCTensor,) -> Option<Id<MLCTensor>>;

        #[cfg(all(feature = "Foundation_NSDictionary",feature = "Foundation_NSString",feature = "MLCompute_MLCTensorData"))]
        #[method(executeWithInputsData:lossLabelsData:lossLabelWeightsData:batchSize:options:completionHandler:)]
        pub unsafe fn executeWithInputsData_lossLabelsData_lossLabelWeightsData_batchSize_options_completionHandler(&self, inputs_data: &NSDictionary<NSString,MLCTensorData,>,loss_labels_data: Option<&NSDictionary<NSString,MLCTensorData,>>,loss_label_weights_data: Option<&NSDictionary<NSString,MLCTensorData,>>,batch_size: NSUInteger,options: MLCExecutionOptions,completion_handler: MLCGraphCompletionHandler,) -> bool;

        #[cfg(all(feature = "Foundation_NSDictionary",feature = "Foundation_NSString",feature = "MLCompute_MLCTensorData"))]
        #[method(executeWithInputsData:lossLabelsData:lossLabelWeightsData:outputsData:batchSize:options:completionHandler:)]
        pub unsafe fn executeWithInputsData_lossLabelsData_lossLabelWeightsData_outputsData_batchSize_options_completionHandler(&self, inputs_data: &NSDictionary<NSString,MLCTensorData,>,loss_labels_data: Option<&NSDictionary<NSString,MLCTensorData,>>,loss_label_weights_data: Option<&NSDictionary<NSString,MLCTensorData,>>,outputs_data: Option<&NSDictionary<NSString,MLCTensorData,>>,batch_size: NSUInteger,options: MLCExecutionOptions,completion_handler: MLCGraphCompletionHandler,) -> bool;

        #[method(executeForwardWithBatchSize:options:completionHandler:)]
        pub unsafe fn executeForwardWithBatchSize_options_completionHandler(&self, batch_size: NSUInteger,options: MLCExecutionOptions,completion_handler: MLCGraphCompletionHandler,) -> bool;

        #[cfg(all(feature = "Foundation_NSDictionary",feature = "Foundation_NSString",feature = "MLCompute_MLCTensorData"))]
        #[method(executeForwardWithBatchSize:options:outputsData:completionHandler:)]
        pub unsafe fn executeForwardWithBatchSize_options_outputsData_completionHandler(&self, batch_size: NSUInteger,options: MLCExecutionOptions,outputs_data: Option<&NSDictionary<NSString,MLCTensorData,>>,completion_handler: MLCGraphCompletionHandler,) -> bool;

        #[method(executeGradientWithBatchSize:options:completionHandler:)]
        pub unsafe fn executeGradientWithBatchSize_options_completionHandler(&self, batch_size: NSUInteger,options: MLCExecutionOptions,completion_handler: MLCGraphCompletionHandler,) -> bool;

        #[cfg(all(feature = "Foundation_NSDictionary",feature = "Foundation_NSString",feature = "MLCompute_MLCTensorData"))]
        #[method(executeGradientWithBatchSize:options:outputsData:completionHandler:)]
        pub unsafe fn executeGradientWithBatchSize_options_outputsData_completionHandler(&self, batch_size: NSUInteger,options: MLCExecutionOptions,outputs_data: Option<&NSDictionary<NSString,MLCTensorData,>>,completion_handler: MLCGraphCompletionHandler,) -> bool;

        #[method(executeOptimizerUpdateWithOptions:completionHandler:)]
        pub unsafe fn executeOptimizerUpdateWithOptions_completionHandler(&self, options: MLCExecutionOptions,completion_handler: MLCGraphCompletionHandler,) -> bool;

        #[method(synchronizeUpdates)]
        pub unsafe fn synchronizeUpdates(&self, );

        #[cfg(all(feature = "Foundation_NSArray",feature = "MLCompute_MLCTensorParameter"))]
        #[method(setTrainingTensorParameters:)]
        pub unsafe fn setTrainingTensorParameters(&self, parameters: &NSArray<MLCTensorParameter,>,) -> bool;

        #[cfg(all(feature = "Foundation_NSArray",feature = "MLCompute_MLCTensor",feature = "MLCompute_MLCTensorData",feature = "MLCompute_MLCTensorOptimizerDeviceData"))]
        #[method(bindOptimizerData:deviceData:withTensor:)]
        pub unsafe fn bindOptimizerData_deviceData_withTensor(&self, data: &NSArray<MLCTensorData,>,device_data: Option<&NSArray<MLCTensorOptimizerDeviceData,>>,tensor: &MLCTensor,) -> bool;

    }
);

extern_methods!(
    /// Methods declared on superclass `MLCGraph`
    #[cfg(feature = "MLCompute_MLCTrainingGraph")]
    unsafe impl MLCTrainingGraph {
        #[method_id(@__retain_semantics Other graph)]
        pub unsafe fn graph() -> Id<Self>;

    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "MLCompute_MLCTrainingGraph")]
    unsafe impl MLCTrainingGraph {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>, ) -> Id<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;

    }
);

