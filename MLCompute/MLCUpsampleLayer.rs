//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::MLCompute::*;
use crate::Metal::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MLCompute_MLCUpsampleLayer")]
    pub struct MLCUpsampleLayer;

    #[cfg(feature = "MLCompute_MLCUpsampleLayer")]
    unsafe impl ClassType for MLCUpsampleLayer {
        #[inherits(NSObject)]
        type Super = MLCLayer;
        type Mutability = InteriorMutable;
    }
);

#[cfg(feature = "MLCompute_MLCUpsampleLayer")]
unsafe impl NSObjectProtocol for MLCUpsampleLayer {}

extern_methods!(
    #[cfg(feature = "MLCompute_MLCUpsampleLayer")]
    unsafe impl MLCUpsampleLayer {
        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
        #[method_id(@__retain_semantics Other shape)]
        pub unsafe fn shape(&self) -> Id<NSArray<NSNumber>>;

        #[method(sampleMode)]
        pub unsafe fn sampleMode(&self) -> MLCSampleMode;

        #[method(alignsCorners)]
        pub unsafe fn alignsCorners(&self) -> bool;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
        #[method_id(@__retain_semantics Other layerWithShape:)]
        pub unsafe fn layerWithShape(shape: &NSArray<NSNumber>) -> Option<Id<Self>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSNumber"))]
        #[method_id(@__retain_semantics Other layerWithShape:sampleMode:alignsCorners:)]
        pub unsafe fn layerWithShape_sampleMode_alignsCorners(
            shape: &NSArray<NSNumber>,
            sample_mode: MLCSampleMode,
            aligns_corners: bool,
        ) -> Option<Id<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `MLCLayer`
    #[cfg(feature = "MLCompute_MLCUpsampleLayer")]
    unsafe impl MLCUpsampleLayer {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;
    }
);
