//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::MLCompute::*;
use crate::Foundation::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MLCompute_MLCOptimizer")]
    pub struct MLCOptimizer;

    #[cfg(feature = "MLCompute_MLCOptimizer")]
    unsafe impl ClassType for MLCOptimizer {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

#[cfg(feature = "MLCompute_MLCOptimizer")]
unsafe impl NSCopying for MLCOptimizer {}

#[cfg(feature = "MLCompute_MLCOptimizer")]
unsafe impl NSObjectProtocol for MLCOptimizer {}

extern_methods!(
    #[cfg(feature = "MLCompute_MLCOptimizer")]
    unsafe impl MLCOptimizer {
        #[method(learningRate)]
        pub unsafe fn learningRate(&self, ) -> c_float;

        #[method(setLearningRate:)]
        pub unsafe fn setLearningRate(&self, learning_rate: c_float,);

        #[method(gradientRescale)]
        pub unsafe fn gradientRescale(&self, ) -> c_float;

        #[method(appliesGradientClipping)]
        pub unsafe fn appliesGradientClipping(&self, ) -> bool;

        #[method(setAppliesGradientClipping:)]
        pub unsafe fn setAppliesGradientClipping(&self, applies_gradient_clipping: bool,);

        #[method(gradientClipMax)]
        pub unsafe fn gradientClipMax(&self, ) -> c_float;

        #[method(gradientClipMin)]
        pub unsafe fn gradientClipMin(&self, ) -> c_float;

        #[method(regularizationScale)]
        pub unsafe fn regularizationScale(&self, ) -> c_float;

        #[method(regularizationType)]
        pub unsafe fn regularizationType(&self, ) -> MLCRegularizationType;

        #[method(gradientClippingType)]
        pub unsafe fn gradientClippingType(&self, ) -> MLCGradientClippingType;

        #[method(maximumClippingNorm)]
        pub unsafe fn maximumClippingNorm(&self, ) -> c_float;

        #[method(customGlobalNorm)]
        pub unsafe fn customGlobalNorm(&self, ) -> c_float;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>, ) -> Id<Self>;

    }
);

