//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::MLCompute::*;
use crate::Foundation::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MLCompute_MLCReductionLayer")]
    pub struct MLCReductionLayer;

    #[cfg(feature = "MLCompute_MLCReductionLayer")]
    unsafe impl ClassType for MLCReductionLayer {
        #[inherits(NSObject)]
        type Super = MLCLayer;
        type Mutability = InteriorMutable;
    }
);

#[cfg(feature = "MLCompute_MLCReductionLayer")]
unsafe impl NSObjectProtocol for MLCReductionLayer {}

extern_methods!(
    #[cfg(feature = "MLCompute_MLCReductionLayer")]
    unsafe impl MLCReductionLayer {
        #[method(reductionType)]
        pub unsafe fn reductionType(&self, ) -> MLCReductionType;

        #[method(dimension)]
        pub unsafe fn dimension(&self, ) -> NSUInteger;

        #[cfg(all(feature = "Foundation_NSArray",feature = "Foundation_NSNumber"))]
        #[method_id(@__retain_semantics Other dimensions)]
        pub unsafe fn dimensions(&self, ) -> Id<NSArray<NSNumber,>>;

        #[method_id(@__retain_semantics Other layerWithReductionType:dimension:)]
        pub unsafe fn layerWithReductionType_dimension(reduction_type: MLCReductionType,dimension: NSUInteger,) -> Option<Id<Self>>;

        #[cfg(all(feature = "Foundation_NSArray",feature = "Foundation_NSNumber"))]
        #[method_id(@__retain_semantics Other layerWithReductionType:dimensions:)]
        pub unsafe fn layerWithReductionType_dimensions(reduction_type: MLCReductionType,dimensions: &NSArray<NSNumber,>,) -> Option<Id<Self>>;

    }
);

extern_methods!(
    /// Methods declared on superclass `MLCLayer`
    #[cfg(feature = "MLCompute_MLCReductionLayer")]
    unsafe impl MLCReductionLayer {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>, ) -> Id<Self>;

    }
);

