//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::MLCompute::*;
use crate::Foundation::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MLCompute_MLCTensor")]
    pub struct MLCTensor;

    #[cfg(feature = "MLCompute_MLCTensor")]
    unsafe impl ClassType for MLCTensor {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

#[cfg(feature = "MLCompute_MLCTensor")]
unsafe impl NSCopying for MLCTensor {}

#[cfg(feature = "MLCompute_MLCTensor")]
unsafe impl NSObjectProtocol for MLCTensor {}

extern_methods!(
    #[cfg(feature = "MLCompute_MLCTensor")]
    unsafe impl MLCTensor {
        #[method(tensorID)]
        pub unsafe fn tensorID(&self, ) -> NSUInteger;

        #[cfg(feature = "MLCompute_MLCTensorDescriptor")]
        #[method_id(@__retain_semantics Other descriptor)]
        pub unsafe fn descriptor(&self, ) -> Id<MLCTensorDescriptor>;

        #[cfg(feature = "Foundation_NSData")]
        #[method_id(@__retain_semantics Other data)]
        pub unsafe fn data(&self, ) -> Option<Id<NSData>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other label)]
        pub unsafe fn label(&self, ) -> Id<NSString>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setLabel:)]
        pub unsafe fn setLabel(&self, label: &NSString,);

        #[cfg(feature = "MLCompute_MLCDevice")]
        #[method_id(@__retain_semantics Other device)]
        pub unsafe fn device(&self, ) -> Option<Id<MLCDevice>>;

        #[cfg(all(feature = "Foundation_NSArray",feature = "MLCompute_MLCTensorData"))]
        #[method_id(@__retain_semantics Other optimizerData)]
        pub unsafe fn optimizerData(&self, ) -> Id<NSArray<MLCTensorData,>>;

        #[cfg(all(feature = "Foundation_NSArray",feature = "MLCompute_MLCTensorOptimizerDeviceData"))]
        #[method_id(@__retain_semantics Other optimizerDeviceData)]
        pub unsafe fn optimizerDeviceData(&self, ) -> Id<NSArray<MLCTensorOptimizerDeviceData,>>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>, ) -> Id<Self>;

        #[cfg(feature = "MLCompute_MLCTensorDescriptor")]
        #[method_id(@__retain_semantics Other tensorWithDescriptor:)]
        pub unsafe fn tensorWithDescriptor(tensor_descriptor: &MLCTensorDescriptor,) -> Id<Self>;

        #[cfg(feature = "MLCompute_MLCTensorDescriptor")]
        #[method_id(@__retain_semantics Other tensorWithDescriptor:randomInitializerType:)]
        pub unsafe fn tensorWithDescriptor_randomInitializerType(tensor_descriptor: &MLCTensorDescriptor,random_initializer_type: MLCRandomInitializerType,) -> Id<Self>;

        #[cfg(all(feature = "Foundation_NSNumber",feature = "MLCompute_MLCTensorDescriptor"))]
        #[method_id(@__retain_semantics Other tensorWithDescriptor:fillWithData:)]
        pub unsafe fn tensorWithDescriptor_fillWithData(tensor_descriptor: &MLCTensorDescriptor,fill_data: &NSNumber,) -> Id<Self>;

        #[cfg(all(feature = "MLCompute_MLCTensorData",feature = "MLCompute_MLCTensorDescriptor"))]
        #[method_id(@__retain_semantics Other tensorWithDescriptor:data:)]
        pub unsafe fn tensorWithDescriptor_data(tensor_descriptor: &MLCTensorDescriptor,data: &MLCTensorData,) -> Id<Self>;

        #[cfg(all(feature = "Foundation_NSArray",feature = "Foundation_NSNumber"))]
        #[method_id(@__retain_semantics Other tensorWithShape:)]
        pub unsafe fn tensorWithShape(shape: &NSArray<NSNumber,>,) -> Id<Self>;

        #[cfg(all(feature = "Foundation_NSArray",feature = "Foundation_NSNumber"))]
        #[method_id(@__retain_semantics Other tensorWithShape:randomInitializerType:)]
        pub unsafe fn tensorWithShape_randomInitializerType(shape: &NSArray<NSNumber,>,random_initializer_type: MLCRandomInitializerType,) -> Id<Self>;

        #[cfg(all(feature = "Foundation_NSArray",feature = "Foundation_NSNumber"))]
        #[method_id(@__retain_semantics Other tensorWithShape:randomInitializerType:dataType:)]
        pub unsafe fn tensorWithShape_randomInitializerType_dataType(shape: &NSArray<NSNumber,>,random_initializer_type: MLCRandomInitializerType,data_type: MLCDataType,) -> Id<Self>;

        #[cfg(all(feature = "Foundation_NSArray",feature = "Foundation_NSNumber"))]
        #[method_id(@__retain_semantics Other tensorWithShape:dataType:)]
        pub unsafe fn tensorWithShape_dataType(shape: &NSArray<NSNumber,>,data_type: MLCDataType,) -> Id<Self>;

        #[cfg(all(feature = "Foundation_NSArray",feature = "Foundation_NSNumber",feature = "MLCompute_MLCTensorData"))]
        #[method_id(@__retain_semantics Other tensorWithShape:data:dataType:)]
        pub unsafe fn tensorWithShape_data_dataType(shape: &NSArray<NSNumber,>,data: &MLCTensorData,data_type: MLCDataType,) -> Id<Self>;

        #[cfg(all(feature = "Foundation_NSArray",feature = "Foundation_NSNumber"))]
        #[method_id(@__retain_semantics Other tensorWithShape:fillWithData:dataType:)]
        pub unsafe fn tensorWithShape_fillWithData_dataType(shape: &NSArray<NSNumber,>,fill_data: &NSNumber,data_type: MLCDataType,) -> Id<Self>;

        #[method_id(@__retain_semantics Other tensorWithWidth:height:featureChannelCount:batchSize:)]
        pub unsafe fn tensorWithWidth_height_featureChannelCount_batchSize(width: NSUInteger,height: NSUInteger,feature_channel_count: NSUInteger,batch_size: NSUInteger,) -> Id<Self>;

        #[method_id(@__retain_semantics Other tensorWithWidth:height:featureChannelCount:batchSize:fillWithData:dataType:)]
        pub unsafe fn tensorWithWidth_height_featureChannelCount_batchSize_fillWithData_dataType(width: NSUInteger,height: NSUInteger,feature_channel_count: NSUInteger,batch_size: NSUInteger,fill_data: c_float,data_type: MLCDataType,) -> Id<Self>;

        #[method_id(@__retain_semantics Other tensorWithWidth:height:featureChannelCount:batchSize:randomInitializerType:)]
        pub unsafe fn tensorWithWidth_height_featureChannelCount_batchSize_randomInitializerType(width: NSUInteger,height: NSUInteger,feature_channel_count: NSUInteger,batch_size: NSUInteger,random_initializer_type: MLCRandomInitializerType,) -> Id<Self>;

        #[cfg(feature = "MLCompute_MLCTensorData")]
        #[method_id(@__retain_semantics Other tensorWithWidth:height:featureChannelCount:batchSize:data:)]
        pub unsafe fn tensorWithWidth_height_featureChannelCount_batchSize_data(width: NSUInteger,height: NSUInteger,feature_channel_count: NSUInteger,batch_size: NSUInteger,data: &MLCTensorData,) -> Id<Self>;

        #[cfg(feature = "MLCompute_MLCTensorData")]
        #[method_id(@__retain_semantics Other tensorWithWidth:height:featureChannelCount:batchSize:data:dataType:)]
        pub unsafe fn tensorWithWidth_height_featureChannelCount_batchSize_data_dataType(width: NSUInteger,height: NSUInteger,feature_channel_count: NSUInteger,batch_size: NSUInteger,data: &MLCTensorData,data_type: MLCDataType,) -> Id<Self>;

        #[method_id(@__retain_semantics Other tensorWithSequenceLength:featureChannelCount:batchSize:)]
        pub unsafe fn tensorWithSequenceLength_featureChannelCount_batchSize(sequence_length: NSUInteger,feature_channel_count: NSUInteger,batch_size: NSUInteger,) -> Id<Self>;

        #[method_id(@__retain_semantics Other tensorWithSequenceLength:featureChannelCount:batchSize:randomInitializerType:)]
        pub unsafe fn tensorWithSequenceLength_featureChannelCount_batchSize_randomInitializerType(sequence_length: NSUInteger,feature_channel_count: NSUInteger,batch_size: NSUInteger,random_initializer_type: MLCRandomInitializerType,) -> Id<Self>;

        #[cfg(feature = "MLCompute_MLCTensorData")]
        #[method_id(@__retain_semantics Other tensorWithSequenceLength:featureChannelCount:batchSize:data:)]
        pub unsafe fn tensorWithSequenceLength_featureChannelCount_batchSize_data(sequence_length: NSUInteger,feature_channel_count: NSUInteger,batch_size: NSUInteger,data: Option<&MLCTensorData>,) -> Id<Self>;

        #[cfg(all(feature = "Foundation_NSArray",feature = "Foundation_NSNumber"))]
        #[method_id(@__retain_semantics Other tensorWithSequenceLengths:sortedSequences:featureChannelCount:batchSize:randomInitializerType:)]
        pub unsafe fn tensorWithSequenceLengths_sortedSequences_featureChannelCount_batchSize_randomInitializerType(sequence_lengths: &NSArray<NSNumber,>,sorted_sequences: bool,feature_channel_count: NSUInteger,batch_size: NSUInteger,random_initializer_type: MLCRandomInitializerType,) -> Option<Id<Self>>;

        #[cfg(all(feature = "Foundation_NSArray",feature = "Foundation_NSNumber",feature = "MLCompute_MLCTensorData"))]
        #[method_id(@__retain_semantics Other tensorWithSequenceLengths:sortedSequences:featureChannelCount:batchSize:data:)]
        pub unsafe fn tensorWithSequenceLengths_sortedSequences_featureChannelCount_batchSize_data(sequence_lengths: &NSArray<NSNumber,>,sorted_sequences: bool,feature_channel_count: NSUInteger,batch_size: NSUInteger,data: Option<&MLCTensorData>,) -> Option<Id<Self>>;

        #[method(hasValidNumerics)]
        pub unsafe fn hasValidNumerics(&self, ) -> bool;

        #[method(synchronizeData)]
        pub unsafe fn synchronizeData(&self, ) -> bool;

        #[method(synchronizeOptimizerData)]
        pub unsafe fn synchronizeOptimizerData(&self, ) -> bool;

        #[method(copyDataFromDeviceMemoryToBytes:length:synchronizeWithDevice:)]
        pub unsafe fn copyDataFromDeviceMemoryToBytes_length_synchronizeWithDevice(&self, bytes: NonNull<c_void>,length: NSUInteger,synchronize_with_device: bool,) -> bool;

        #[cfg(all(feature = "MLCompute_MLCDevice",feature = "MLCompute_MLCTensorData"))]
        #[method(bindAndWriteData:toDevice:)]
        pub unsafe fn bindAndWriteData_toDevice(&self, data: &MLCTensorData,device: &MLCDevice,) -> bool;

        #[cfg(all(feature = "Foundation_NSArray",feature = "MLCompute_MLCTensorData",feature = "MLCompute_MLCTensorOptimizerDeviceData"))]
        #[method(bindOptimizerData:deviceData:)]
        pub unsafe fn bindOptimizerData_deviceData(&self, data: &NSArray<MLCTensorData,>,device_data: Option<&NSArray<MLCTensorOptimizerDeviceData,>>,) -> bool;

        #[method_id(@__retain_semantics Other tensorByQuantizingToType:scale:bias:)]
        pub unsafe fn tensorByQuantizingToType_scale_bias(&self, r#type: MLCDataType,scale: c_float,bias: NSInteger,) -> Option<Id<MLCTensor>>;

        #[method_id(@__retain_semantics Other tensorByQuantizingToType:scale:bias:axis:)]
        pub unsafe fn tensorByQuantizingToType_scale_bias_axis(&self, r#type: MLCDataType,scale: &MLCTensor,bias: &MLCTensor,axis: NSInteger,) -> Option<Id<MLCTensor>>;

        #[method_id(@__retain_semantics Other tensorByDequantizingToType:scale:bias:)]
        pub unsafe fn tensorByDequantizingToType_scale_bias(&self, r#type: MLCDataType,scale: &MLCTensor,bias: &MLCTensor,) -> Option<Id<MLCTensor>>;

        #[method_id(@__retain_semantics Other tensorByDequantizingToType:scale:bias:axis:)]
        pub unsafe fn tensorByDequantizingToType_scale_bias_axis(&self, r#type: MLCDataType,scale: &MLCTensor,bias: &MLCTensor,axis: NSInteger,) -> Option<Id<MLCTensor>>;

    }
);

